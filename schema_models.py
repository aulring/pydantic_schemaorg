from __future__ import annotations
from typing import TYPE_CHECKING


from typing import List, Optional, Union
from pydantic import AnyUrl


from pydantic import Field
from pydantic_schemaorg.SchemaOrgBase import SchemaOrgBase




class Thing(SchemaOrgBase):
    """The most generic type of item.

    See: https://schema.org/Thing
    Model depth: 1
    """
    type_: str = Field(default="Thing", alias='@type', const=True)
    potentialAction: Optional[Union[List[Union[Action, str]], Action, str]] = Field(
        default=None,
        description="Indicates a potential Action, which describes an idealized action in which this thing"
     "would play an 'object' role.",
    )
    mainEntityOfPage: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Indicates a page (or other CreativeWork) for which this thing is the main entity being"
     "described. See [background notes](/docs/datamodel.html#mainEntityBackground)"
     "for details.",
    )
    subjectOf: Optional[Union[List[Union[Event, CreativeWork, str]], Event, CreativeWork, str]] = Field(
        default=None,
        description="A CreativeWork or Event about this Thing.",
    )
    url: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="URL of the item.",
    )
    alternateName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An alias for the item.",
    )
    sameAs: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="URL of a reference Web page that unambiguously indicates the item's identity. E.g. the"
     "URL of the item's Wikipedia page, Wikidata entry, or official website.",
    )
    description: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the item.",
    )
    disambiguatingDescription: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A sub property of description. A short description of the item used to disambiguate from"
     "other, similar items. Information from other properties (in particular, name) may"
     "be necessary for the description to be useful for disambiguation.",
    )
    identifier: Optional[Union[List[Union[AnyUrl, URL, str, Text, PropertyValue]], AnyUrl, URL, str, Text, PropertyValue]] = Field(
        default=None,
        description="The identifier property represents any kind of identifier for any kind of [[Thing]],"
     "such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for"
     "representing many of these, either as textual strings or as URL (URI) links. See [background"
     "notes](/docs/datamodel.html#identifierBg) for more details.",
    )
    image: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].",
    )
    name: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of the item.",
    )
    additionalType: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="An additional type for the item, typically used for adding more specific types from external"
     "vocabularies in microdata syntax. This is a relationship between something and a class"
     "that the thing is in. In RDFa syntax, it is better to use the native RDFa syntax - the 'typeof'"
     "attribute - for multiple types. Schema.org tools may have only weaker understanding"
     "of extra types, in particular those defined externally.",
    )
    



class Intangible(Thing):
    """A utility class that serves as the umbrella for a number of 'intangible' things such as"
     "quantities, structured values, etc.

    See: https://schema.org/Intangible
    Model depth: 2
    """
    type_: str = Field(default="Intangible", alias='@type', const=True)
    



class StructuredValue(Intangible):
    """Structured values are used when the value of a property has a more complex structure than"
     "simply being a textual value or a reference to another thing.

    See: https://schema.org/StructuredValue
    Model depth: 3
    """
    type_: str = Field(default="StructuredValue", alias='@type', const=True)
    



class GeoShape(StructuredValue):
    """The geographic shape of a place. A GeoShape can be described using several properties"
     "whose values are based on latitude/longitude pairs. Either whitespace or commas can"
     "be used to separate latitude and longitude; whitespace should be used when writing a"
     "list of several such points.

    See: https://schema.org/GeoShape
    Model depth: 4
    """
    type_: str = Field(default="GeoShape", alias='@type', const=True)
    polygon: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A polygon is the area enclosed by a point-to-point path for which the starting and ending"
     "points are the same. A polygon is expressed as a series of four or more space delimited"
     "points where the first and final points are identical.",
    )
    circle: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A circle is the circular region of a specified radius centered at a specified latitude"
     "and longitude. A circle is expressed as a pair followed by a radius in meters.",
    )
    elevation: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System))."
     "Values may be of the form 'NUMBER UNIT\_OF\_MEASUREMENT' (e.g., '1,000 m', '3,200 ft')"
     "while numbers alone should be assumed to be a value in meters.",
    )
    addressCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2"
     "country code](http://en.wikipedia.org/wiki/ISO_3166-1).",
    )
    postalCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The postal code. For example, 94043.",
    )
    address: Optional[Union[List[Union[str, Text, PostalAddress]], str, Text, PostalAddress]] = Field(
        default=None,
        description="Physical address of the item.",
    )
    line: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A line is a point-to-point path consisting of two or more points. A line is expressed as"
     "a series of two or more point objects separated by space.",
    )
    box: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A box is the area enclosed by the rectangle formed by two points. The first point is the"
     "lower corner, the second point is the upper corner. A box is expressed as two points separated"
     "by a space character.",
    )
    



class Enumeration(Intangible):
    """Lists or enumerations—for example, a list of cuisines or music genres, etc.

    See: https://schema.org/Enumeration
    Model depth: 3
    """
    type_: str = Field(default="Enumeration", alias='@type', const=True)
    supersededBy: Optional[Union[List[Union[Enumeration, Class, Property, str]], Enumeration, Class, Property, str]] = Field(
        default=None,
        description="Relates a term (i.e. a property, class or enumeration) to one that supersedes it.",
    )
    



class SizeGroupEnumeration(Enumeration):
    """Enumerates common size groups for various product categories.

    See: https://schema.org/SizeGroupEnumeration
    Model depth: 4
    """
    type_: str = Field(default="SizeGroupEnumeration", alias='@type', const=True)
    



class WearableSizeGroupEnumeration(SizeGroupEnumeration):
    """Enumerates common size groups (also known as \"size types\") for wearable products.

    See: https://schema.org/WearableSizeGroupEnumeration
    Model depth: 5
    """
    type_: str = Field(default="WearableSizeGroupEnumeration", alias='@type', const=True)
    



class WearableSizeGroupMens(WearableSizeGroupEnumeration):
    """Size group \"Mens\" for wearables.

    See: https://schema.org/WearableSizeGroupMens
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupMens", alias='@type', const=True)
    



class QualitativeValue(Enumeration):
    """A predefined value for a product characteristic, e.g. the power cord plug type 'US' or"
     "the garment sizes 'S', 'M', 'L', and 'XL'.

    See: https://schema.org/QualitativeValue
    Model depth: 4
    """
    type_: str = Field(default="QualitativeValue", alias='@type', const=True)
    greater: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is greater"
     "than the object.",
    )
    additionalProperty: Optional[Union[List[Union[PropertyValue, str]], PropertyValue, str]] = Field(
        default=None,
        description="A property-value pair representing an additional characteristic of the entity, e.g."
     "a product feature or another characteristic for which there is no matching property"
     "in schema.org. Note: Publishers should be aware that applications designed to use specific"
     "schema.org properties (e.g. https://schema.org/width, https://schema.org/color,"
     "https://schema.org/gtin13, ...) will typically expect such data to be provided using"
     "those properties, rather than using the generic property/value mechanism.",
    )
    valueReference: Optional[Union[List[Union[str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]], str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]] = Field(
        default=None,
        description="A secondary value that provides additional information on the original value, e.g."
     "a reference temperature or a type of measurement.",
    )
    equal: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is equal to"
     "the object.",
    )
    lesser: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is lesser"
     "than the object.",
    )
    greaterOrEqual: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is greater"
     "than or equal to the object.",
    )
    lesserOrEqual: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is lesser"
     "than or equal to the object.",
    )
    nonEqual: Optional[Union[List[Union[QualitativeValue, str]], QualitativeValue, str]] = Field(
        default=None,
        description="This ordering relation for qualitative values indicates that the subject is not equal"
     "to the object.",
    )
    



class DriveWheelConfigurationValue(QualitativeValue):
    """A value indicating which roadwheels will receive torque.

    See: https://schema.org/DriveWheelConfigurationValue
    Model depth: 5
    """
    type_: str = Field(default="DriveWheelConfigurationValue", alias='@type', const=True)
    



class FrontWheelDriveConfiguration(DriveWheelConfigurationValue):
    """Front-wheel drive is a transmission layout where the engine drives the front wheels.

    See: https://schema.org/FrontWheelDriveConfiguration
    Model depth: 6
    """
    type_: str = Field(default="FrontWheelDriveConfiguration", alias='@type', const=True)
    



class QuantitativeValueDistribution(StructuredValue):
    """A statistical distribution of values.

    See: https://schema.org/QuantitativeValueDistribution
    Model depth: 4
    """
    type_: str = Field(default="QuantitativeValueDistribution", alias='@type', const=True)
    percentile75: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The 75th percentile value.",
    )
    percentile25: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The 25th percentile value.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    median: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The median value.",
    )
    percentile90: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The 90th percentile value.",
    )
    percentile10: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The 10th percentile value.",
    )
    



class MonetaryAmountDistribution(QuantitativeValueDistribution):
    """A statistical distribution of monetary amounts.

    See: https://schema.org/MonetaryAmountDistribution
    Model depth: 5
    """
    type_: str = Field(default="MonetaryAmountDistribution", alias='@type', const=True)
    currency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217"
     "currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. \"USD\"; [Ticker"
     "symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,"
     "e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    



class Organization(Thing):
    """An organization such as a school, NGO, corporation, club, etc.

    See: https://schema.org/Organization
    Model depth: 2
    """
    type_: str = Field(default="Organization", alias='@type', const=True)
    serviceArea: Optional[Union[List[Union[GeoShape, Place, AdministrativeArea, str]], GeoShape, Place, AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area where the service is provided.",
    )
    founder: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person who founded this organization.",
    )
    isicV4: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard of Industrial Classification of All Economic Activities"
     "(ISIC), Revision 4 code for a particular organization, business person, or place.",
    )
    hasPOS: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="Points-of-Sales operated by the organization or person.",
    )
    globalLocationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred"
     "to as International Location Number or ILN) of the respective organization, person,"
     "or place. The GLN is a 13-digit number used to identify parties and physical locations.",
    )
    member: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A member of an Organization or a ProgramMembership. Organizations can be members of"
     "organizations; ProgramMembership is typically for individuals.",
    )
    knowsAbout: Optional[Union[List[Union[AnyUrl, URL, str, Text, Thing]], AnyUrl, URL, str, Text, Thing]] = Field(
        default=None,
        description="Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that"
     "is known about - suggesting possible expertise but not implying it. We do not distinguish"
     "skill levels here, or relate this to educational content, events, objectives or [[JobPosting]]"
     "descriptions.",
    )
    makesOffer: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="A pointer to products or services offered by the organization or person.",
    )
    ownershipFundingInfo: Optional[Union[List[Union[AnyUrl, URL, str, Text, AboutPage, CreativeWork]], AnyUrl, URL, str, Text, AboutPage, CreativeWork]] = Field(
        default=None,
        description="For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]),"
     "a description of organizational ownership structure; funding and grants. In a news/media"
     "setting, this is with particular reference to editorial independence. Note that the"
     "[[funder]] is also available and can be used to make basic funder information machine-readable.",
    )
    founders: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person who founded this organization.",
    )
    legalName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The official name of the organization, e.g. the registered company name.",
    )
    actionableFeedbackPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement"
     "about public engagement activities (for news media, the newsroom’s), including involving"
     "the public - digitally or otherwise -- in coverage decisions, reporting and activities"
     "after publication.",
    )
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    parentOrganization: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The larger organization that this organization is a [[subOrganization]] of, if any.",
    )
    slogan: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    department: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="A relationship between an organization and a department of that organization, also"
     "described as an organization (allowing different urls, logos, opening hours). For"
     "example: a store with a pharmacy, or a bakery with a cafe.",
    )
    keywords: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Keywords or tags used to describe some item. Multiple textual entries in a keywords list"
     "are typically delimited by commas, or by repeating the property.",
    )
    reviews: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="Review of the item.",
    )
    memberOf: Optional[Union[List[Union[Organization, ProgramMembership, str]], Organization, ProgramMembership, str]] = Field(
        default=None,
        description="An Organization (or ProgramMembership) to which this Person or Organization belongs.",
    )
    publishingPrinciples: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="The publishingPrinciples property indicates (typically via [[URL]]) a document describing"
     "the editorial principles of an [[Organization]] (or individual, e.g. a [[Person]]"
     "writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity"
     "policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles"
     "are those of the party primarily responsible for the creation of the [[CreativeWork]]."
     "While such policies are most typically expressed in natural language, sometimes related"
     "information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.",
    )
    employee: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Someone working for this organization.",
    )
    award: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An award won by or for this item.",
    )
    email: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Email address.",
    )
    contactPoints: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="A contact point for a person or organization.",
    )
    diversityStaffingReport: Optional[Union[List[Union[AnyUrl, URL, Article, str]], AnyUrl, URL, Article, str]] = Field(
        default=None,
        description="For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]),"
     "a report on staffing diversity issues. In a news context this might be for example ASNE"
     "or RTDNA (US) reports, or self-reported.",
    )
    foundingDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date that this organization was founded.",
    )
    owns: Optional[Union[List[Union[OwnershipInfo, Product, str]], OwnershipInfo, Product, str]] = Field(
        default=None,
        description="Products owned by the organization or person.",
    )
    awards: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Awards won by or for this item.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    dissolutionDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date that this organization was dissolved.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    interactionStatistic: Optional[Union[List[Union[InteractionCounter, str]], InteractionCounter, str]] = Field(
        default=None,
        description="The number of interactions for the CreativeWork using the WebSite or SoftwareApplication."
     "The most specific child type of InteractionCounter should be used.",
    )
    events: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past events associated with this place or organization.",
    )
    seeks: Optional[Union[List[Union[Demand, str]], Demand, str]] = Field(
        default=None,
        description="A pointer to products or services sought by the organization or person (demand).",
    )
    employees: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="People working for this organization.",
    )
    unnamedSourcesPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about"
     "policy on use of unnamed sources and the decision process required.",
    )
    subOrganization: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="A relationship between two organizations where the first includes the second, e.g.,"
     "as a subsidiary. See also: the more specific 'department' property.",
    )
    foundingLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The place where the Organization was founded.",
    )
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    iso6523Code: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An organization identifier as defined in ISO 6523(-1). Note that many existing organization"
     "identifiers such as [leiCode](https://schema.org/leiCode), [duns](https://schema.org/duns)"
     "and [vatID](https://schema.org/vatID) can be expressed as an ISO 6523 identifier"
     "by setting the ICD part of the ISO 6523 identifier accordingly.",
    )
    diversityPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]."
     "For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity"
     "policy on both staffing and sources, typically providing staffing data.",
    )
    hasMerchantReturnPolicy: Optional[Union[List[Union[MerchantReturnPolicy, str]], MerchantReturnPolicy, str]] = Field(
        default=None,
        description="Specifies a MerchantReturnPolicy that may be applicable.",
    )
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    duns: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Dun & Bradstreet DUNS number for identifying an organization or business person.",
    )
    alumni: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Alumni of an organization.",
    )
    ethicsPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic"
     "and publishing practices, or of a [[Restaurant]], a page describing food source policies."
     "In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement"
     "describing the personal, organizational, and corporate standards of behavior expected"
     "by the organization.",
    )
    leiCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An organization identifier that uniquely identifies a legal entity as defined in ISO"
     "17442.",
    )
    vatID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Value-added Tax ID of the organization or person.",
    )
    knowsLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Of a [[Person]], and less typically of an [[Organization]], to indicate a known language."
     "We do not distinguish skill levels or reading/writing/speaking/signing here. Use"
     "language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).",
    )
    correctionsPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing"
     "(in news media, the newsroom’s) disclosure and correction policy for errors.",
    )
    logo: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An associated logo.",
    )
    hasCredential: Optional[Union[List[Union[EducationalOccupationalCredential, str]], EducationalOccupationalCredential, str]] = Field(
        default=None,
        description="A credential awarded to the Person or Organization.",
    )
    address: Optional[Union[List[Union[str, Text, PostalAddress]], str, Text, PostalAddress]] = Field(
        default=None,
        description="Physical address of the item.",
    )
    brand: Optional[Union[List[Union[Brand, Organization, str]], Brand, Organization, str]] = Field(
        default=None,
        description="The brand(s) associated with a product or service, or the brand(s) maintained by an organization"
     "or business person.",
    )
    nonprofitStatus: Optional[Union[List[Union[NonprofitType, str]], NonprofitType, str]] = Field(
        default=None,
        description="nonprofitStatus indicates the legal status of a non-profit organization in its primary"
     "place of business.",
    )
    contactPoint: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="A contact point for a person or organization.",
    )
    hasOfferCatalog: Optional[Union[List[Union[OfferCatalog, str]], OfferCatalog, str]] = Field(
        default=None,
        description="Indicates an OfferCatalog listing for this Organization, Person, or Service.",
    )
    members: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A member of this organization.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    faxNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The fax number.",
    )
    telephone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The telephone number.",
    )
    taxID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in"
     "Spain.",
    )
    naics: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The North American Industry Classification System (NAICS) code for a particular organization"
     "or business person.",
    )
    location: Optional[Union[List[Union[str, Text, Place, PostalAddress, VirtualLocation]], str, Text, Place, PostalAddress, VirtualLocation]] = Field(
        default=None,
        description="The location of, for example, where an event is happening, where an organization is located,"
     "or where an action takes place.",
    )
    numberOfEmployees: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The number of employees in an organization, e.g. business.",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    



class WorkersUnion(Organization):
    """A Workers Union (also known as a Labor Union, Labour Union, or Trade Union) is an organization"
     "that promotes the interests of its worker members by collectively bargaining with management,"
     "organizing, and political lobbying.

    See: https://schema.org/WorkersUnion
    Model depth: 3
    """
    type_: str = Field(default="WorkersUnion", alias='@type', const=True)
    



class Place(Thing):
    """Entities that have a somewhat fixed, physical extension.

    See: https://schema.org/Place
    Model depth: 2
    """
    type_: str = Field(default="Place", alias='@type', const=True)
    geoCovers: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a covering geometry to a covered geometry. \"Every point of b is a point of (the interior"
     "or boundary of) a\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    longitude: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
    )
    smokingAllowed: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether it is allowed to smoke in the place, e.g. in the restaurant, hotel or"
     "hotel room.",
    )
    isicV4: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard of Industrial Classification of All Economic Activities"
     "(ISIC), Revision 4 code for a particular organization, business person, or place.",
    )
    globalLocationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred"
     "to as International Location Number or ILN) of the respective organization, person,"
     "or place. The GLN is a 13-digit number used to identify parties and physical locations.",
    )
    amenityFeature: Optional[Union[List[Union[LocationFeatureSpecification, str]], LocationFeatureSpecification, str]] = Field(
        default=None,
        description="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic"
     "property does not make a statement about whether the feature is included in an offer for"
     "the main accommodation or available at extra costs.",
    )
    additionalProperty: Optional[Union[List[Union[PropertyValue, str]], PropertyValue, str]] = Field(
        default=None,
        description="A property-value pair representing an additional characteristic of the entity, e.g."
     "a product feature or another characteristic for which there is no matching property"
     "in schema.org. Note: Publishers should be aware that applications designed to use specific"
     "schema.org properties (e.g. https://schema.org/width, https://schema.org/color,"
     "https://schema.org/gtin13, ...) will typically expect such data to be provided using"
     "those properties, rather than using the generic property/value mechanism.",
    )
    slogan: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    photos: Optional[Union[List[Union[ImageObject, Photograph, str]], ImageObject, Photograph, str]] = Field(
        default=None,
        description="Photographs of this place.",
    )
    keywords: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Keywords or tags used to describe some item. Multiple textual entries in a keywords list"
     "are typically delimited by commas, or by repeating the property.",
    )
    reviews: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="Review of the item.",
    )
    tourBookingPage: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]]"
     "or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.",
    )
    geoWithin: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined"
     "in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    containsPlace: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The basic containment relation between a place and another that it contains.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    hasMap: Optional[Union[List[Union[AnyUrl, URL, Map, str]], AnyUrl, URL, Map, str]] = Field(
        default=None,
        description="A URL to a map of the place.",
    )
    containedIn: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The basic containment relation between a place and one that contains it.",
    )
    events: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past events associated with this place or organization.",
    )
    geoOverlaps: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that geospatially overlaps it, i.e. they have some but not all points"
     "in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoEquals: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM)."
     "\"Two geometries are topologically equal if their interiors intersect and no part of"
     "the interior or boundary of one geometry intersects the exterior of the other\" (a symmetric"
     "relationship).",
    )
    maps: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A URL to a map of the place.",
    )
    isAccessibleForFree: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A flag to signal that the item, event, or place is accessible for free.",
    )
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    photo: Optional[Union[List[Union[ImageObject, Photograph, str]], ImageObject, Photograph, str]] = Field(
        default=None,
        description="A photograph of this place.",
    )
    containedInPlace: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The basic containment relation between a place and one that contains it.",
    )
    logo: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An associated logo.",
    )
    geoCrosses: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that crosses it: \"a crosses b: they have some but not all interior"
     "points in common, and the dimension of the intersection is less than that of at least one"
     "of them\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    address: Optional[Union[List[Union[str, Text, PostalAddress]], str, Text, PostalAddress]] = Field(
        default=None,
        description="Physical address of the item.",
    )
    geo: Optional[Union[List[Union[GeoShape, GeoCoordinates, str]], GeoShape, GeoCoordinates, str]] = Field(
        default=None,
        description="The geo coordinates of the place.",
    )
    openingHoursSpecification: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="The opening hours of a certain place.",
    )
    geoDisjoint: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "are topologically disjoint: \"they have no point in common. They form a set of disconnected"
     "geometries.\" (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)",
    )
    geoIntersects: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    latitude: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
    )
    maximumAttendeeCapacity: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The total number of individuals that may attend an event or venue.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    map: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A URL to a map of the place.",
    )
    branchCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short textual code (also called \"store code\") that uniquely identifies a place of"
     "business. The code is typically assigned by the parentOrganization and used in structured"
     "URLs. For example, in the URL http://www.starbucks.co.uk/store-locator/etc/detail/3047"
     "the code \"3047\" is a branchCode for a particular branch.",
    )
    faxNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The fax number.",
    )
    publicAccess: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A flag to signal that the [[Place]] is open to public visitors. If this property is omitted"
     "there is no assumed default boolean value",
    )
    geoTouches: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "touch: \"they have at least one boundary point in common, but no interior points.\" (A"
     "symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)",
    )
    geoCoveredBy: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    telephone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The telephone number.",
    )
    hasDriveThroughService: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether some facility (e.g. [[FoodEstablishment]], [[CovidTestingFacility]])"
     "offers a service that can be used by driving through in a car. In the case of [[CovidTestingFacility]]"
     "such facilities could potentially help with social distancing from other potentially-infected"
     "users.",
    )
    specialOpeningHoursSpecification: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="The special opening hours of a certain place. Use this to explicitly override general"
     "opening hours brought in scope by [[openingHoursSpecification]] or [[openingHours]].",
    )
    geoContains: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a containing geometry to a contained geometry. \"a contains b iff no points of b lie in"
     "the exterior of a, and at least one point of the interior of b lies in the interior of a\"."
     "As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    



class CivicStructure(Place):
    """A public structure, such as a town hall or concert hall.

    See: https://schema.org/CivicStructure
    Model depth: 3
    """
    type_: str = Field(default="CivicStructure", alias='@type', const=True)
    openingHours: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The general opening hours for a business. Opening hours can be specified as a weekly time"
     "range, starting with days, then times per day. Multiple days can be listed with commas"
     "',' separating each day. Day or time ranges are specified using a hyphen '-'. * Days are"
     "specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```,"
     "```Th```, ```Fr```, ```Sa```, ```Su```. * Times are specified using 24:00 format."
     "For example, 3pm is specified as ```15:00```, 10am as ```10:00```. * Here is an example:"
     "<code>&lt;time itemprop=\"openingHours\" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays"
     "and Thursdays 4-8pm&lt;/time&gt;</code>. * If a business is open 7 days a week, then"
     "it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday"
     "through Sunday, all day&lt;/time&gt;</code>.",
    )
    



class Park(CivicStructure):
    """A park.

    See: https://schema.org/Park
    Model depth: 4
    """
    type_: str = Field(default="Park", alias='@type', const=True)
    



class LocalBusiness(Organization, Place):
    """A particular physical business or branch of an organization. Examples of LocalBusiness"
     "include a restaurant, a particular branch of a restaurant chain, a branch of a bank, a"
     "medical practice, a club, a bowling alley, etc.

    See: https://schema.org/LocalBusiness
    Model depth: 3
    """
    type_: str = Field(default="LocalBusiness", alias='@type', const=True)
    priceRange: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The price range of the business, for example ```$$$```.",
    )
    currenciesAccepted: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency accepted. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    branchOf: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The larger organization that this local business is a branch of, if any. Not to be confused"
     "with (anatomical) [[branch]].",
    )
    paymentAccepted: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Cash, Credit Card, Cryptocurrency, Local Exchange Tradings System, etc.",
    )
    openingHours: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The general opening hours for a business. Opening hours can be specified as a weekly time"
     "range, starting with days, then times per day. Multiple days can be listed with commas"
     "',' separating each day. Day or time ranges are specified using a hyphen '-'. * Days are"
     "specified using the following two-letter combinations: ```Mo```, ```Tu```, ```We```,"
     "```Th```, ```Fr```, ```Sa```, ```Su```. * Times are specified using 24:00 format."
     "For example, 3pm is specified as ```15:00```, 10am as ```10:00```. * Here is an example:"
     "<code>&lt;time itemprop=\"openingHours\" datetime=&quot;Tu,Th 16:00-20:00&quot;&gt;Tuesdays"
     "and Thursdays 4-8pm&lt;/time&gt;</code>. * If a business is open 7 days a week, then"
     "it can be specified as <code>&lt;time itemprop=&quot;openingHours&quot; datetime=&quot;Mo-Su&quot;&gt;Monday"
     "through Sunday, all day&lt;/time&gt;</code>.",
    )
    



class Store(LocalBusiness):
    """A retail good store.

    See: https://schema.org/Store
    Model depth: 4
    """
    type_: str = Field(default="Store", alias='@type', const=True)
    



class PetStore(Store):
    """A pet store.

    See: https://schema.org/PetStore
    Model depth: 5
    """
    type_: str = Field(default="PetStore", alias='@type', const=True)
    



class MedicalEntity(Thing):
    """The most generic type of entity related to health and the practice of medicine.

    See: https://schema.org/MedicalEntity
    Model depth: 2
    """
    type_: str = Field(default="MedicalEntity", alias='@type', const=True)
    recognizingAuthority: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="If applicable, the organization that officially recognizes this entity as part of its"
     "endorsed system of medicine.",
    )
    relevantSpecialty: Optional[Union[List[Union[MedicalSpecialty, str]], MedicalSpecialty, str]] = Field(
        default=None,
        description="If applicable, a medical specialty in which this entity is relevant.",
    )
    medicineSystem: Optional[Union[List[Union[MedicineSystem, str]], MedicineSystem, str]] = Field(
        default=None,
        description="The system of medicine that includes this MedicalEntity, for example 'evidence-based',"
     "'homeopathic', 'chiropractic', etc.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    legalStatus: Optional[Union[List[Union[str, Text, MedicalEnumeration, DrugLegalStatus]], str, Text, MedicalEnumeration, DrugLegalStatus]] = Field(
        default=None,
        description="The drug or supplement's legal status, including any controlled substance schedules"
     "that apply.",
    )
    study: Optional[Union[List[Union[MedicalStudy, str]], MedicalStudy, str]] = Field(
        default=None,
        description="A medical study or trial related to this entity.",
    )
    guideline: Optional[Union[List[Union[MedicalGuideline, str]], MedicalGuideline, str]] = Field(
        default=None,
        description="A medical guideline related to this entity.",
    )
    code: Optional[Union[List[Union[MedicalCode, str]], MedicalCode, str]] = Field(
        default=None,
        description="A medical code for the entity, taken from a controlled vocabulary or ontology such as"
     "ICD-9, DiseasesDB, MeSH, SNOMED-CT, RxNorm, etc.",
    )
    



class MedicalIntangible(MedicalEntity):
    """A utility class that serves as the umbrella for a number of 'intangible' things in the"
     "medical space.

    See: https://schema.org/MedicalIntangible
    Model depth: 3
    """
    type_: str = Field(default="MedicalIntangible", alias='@type', const=True)
    



class DDxElement(MedicalIntangible):
    """An alternative, closely-related condition typically considered later in the differential"
     "diagnosis process along with the signs that are used to distinguish it.

    See: https://schema.org/DDxElement
    Model depth: 4
    """
    type_: str = Field(default="DDxElement", alias='@type', const=True)
    distinguishingSign: Optional[Union[List[Union[MedicalSignOrSymptom, str]], MedicalSignOrSymptom, str]] = Field(
        default=None,
        description="One of a set of signs and symptoms that can be used to distinguish this diagnosis from others"
     "in the differential diagnosis.",
    )
    diagnosis: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="One or more alternative conditions considered in the differential diagnosis process"
     "as output of a diagnosis process.",
    )
    



class ReturnFeesEnumeration(Enumeration):
    """Enumerates several kinds of policies for product return fees.

    See: https://schema.org/ReturnFeesEnumeration
    Model depth: 4
    """
    type_: str = Field(default="ReturnFeesEnumeration", alias='@type', const=True)
    



class ReturnShippingFees(ReturnFeesEnumeration):
    """Specifies that the customer must pay the return shipping costs when returning a product.

    See: https://schema.org/ReturnShippingFees
    Model depth: 5
    """
    type_: str = Field(default="ReturnShippingFees", alias='@type', const=True)
    



class Florist(Store):
    """A florist.

    See: https://schema.org/Florist
    Model depth: 5
    """
    type_: str = Field(default="Florist", alias='@type', const=True)
    



class AnatomicalStructure(MedicalEntity):
    """Any part of the human body, typically a component of an anatomical system. Organs, tissues,"
     "and cells are all anatomical structures.

    See: https://schema.org/AnatomicalStructure
    Model depth: 3
    """
    type_: str = Field(default="AnatomicalStructure", alias='@type', const=True)
    connectedTo: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="Other anatomical structures to which this structure is connected.",
    )
    partOfSystem: Optional[Union[List[Union[AnatomicalSystem, str]], AnatomicalSystem, str]] = Field(
        default=None,
        description="The anatomical or organ system that this structure is part of.",
    )
    associatedPathophysiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If applicable, a description of the pathophysiology associated with the anatomical"
     "system, including potential abnormal changes in the mechanical, physical, and biochemical"
     "functions of the system.",
    )
    bodyLocation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Location in the body of the anatomical structure.",
    )
    relatedTherapy: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A medical therapy related to this anatomy.",
    )
    subStructure: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="Component (sub-)structure(s) that comprise this anatomical structure.",
    )
    relatedCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="A medical condition associated with this anatomy.",
    )
    diagram: Optional[Union[List[Union[ImageObject, str]], ImageObject, str]] = Field(
        default=None,
        description="An image containing a diagram that illustrates the structure and/or its component substructures"
     "and/or connections with other structures.",
    )
    



class SizeSystemEnumeration(Enumeration):
    """Enumerates common size systems for different categories of products, for example \"EN-13402\""
     "or \"UK\" for wearables or \"Imperial\" for screws.

    See: https://schema.org/SizeSystemEnumeration
    Model depth: 4
    """
    type_: str = Field(default="SizeSystemEnumeration", alias='@type', const=True)
    



class WearableSizeSystemEnumeration(SizeSystemEnumeration):
    """Enumerates common size systems specific for wearable products

    See: https://schema.org/WearableSizeSystemEnumeration
    Model depth: 5
    """
    type_: str = Field(default="WearableSizeSystemEnumeration", alias='@type', const=True)
    



class WearableSizeSystemBR(WearableSizeSystemEnumeration):
    """Brazilian size system for wearables.

    See: https://schema.org/WearableSizeSystemBR
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemBR", alias='@type', const=True)
    



class NonprofitType(Enumeration):
    """NonprofitType enumerates several kinds of official non-profit types of which a non-profit"
     "organization can be.

    See: https://schema.org/NonprofitType
    Model depth: 4
    """
    type_: str = Field(default="NonprofitType", alias='@type', const=True)
    



class NLNonprofitType(NonprofitType):
    """NLNonprofitType: Non-profit organization type originating from the Netherlands.

    See: https://schema.org/NLNonprofitType
    Model depth: 5
    """
    type_: str = Field(default="NLNonprofitType", alias='@type', const=True)
    



class NonprofitSBBI(NLNonprofitType):
    """NonprofitSBBI: Non-profit type referring to a Social Interest Promoting Institution"
     "(NL).

    See: https://schema.org/NonprofitSBBI
    Model depth: 6
    """
    type_: str = Field(default="NonprofitSBBI", alias='@type', const=True)
    



class CreativeWork(Thing):
    """The most generic kind of creative work, including books, movies, photographs, software"
     "programs, etc.

    See: https://schema.org/CreativeWork
    Model depth: 2
    """
    type_: str = Field(default="CreativeWork", alias='@type', const=True)
    workTranslation: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A work that is a translation of the content of this work. E.g. 西遊記 has an English workTranslation"
     "“Journey to the West”, a German workTranslation “Monkeys Pilgerfahrt” and a Vietnamese"
     "translation Tây du ký bình khảo.",
    )
    educationalLevel: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="The level in terms of progression through an educational or training context. Examples"
     "of educational levels include 'beginner', 'intermediate' or 'advanced', and formal"
     "sets of level indicators.",
    )
    associatedMedia: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="A media object that encodes this CreativeWork. This property is a synonym for encoding.",
    )
    exampleOfWork: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A creative work that this work is an example/instance/realization/derivation of.",
    )
    releasedEvent: Optional[Union[List[Union[PublicationEvent, str]], PublicationEvent, str]] = Field(
        default=None,
        description="The place and time the release was issued, expressed as a PublicationEvent.",
    )
    version: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The version of the CreativeWork embodied by a specified resource.",
    )
    locationCreated: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The location where the CreativeWork was created, which may not be the same as the location"
     "depicted in the CreativeWork.",
    )
    acquireLicensePage: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Indicates a page documenting how licenses can be purchased or otherwise acquired, for"
     "the current item.",
    )
    thumbnailUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A thumbnail image relevant to the Thing.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    expires: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Date the content expires and is no longer useful or available. For example a [[VideoObject]]"
     "or [[NewsArticle]] whose availability or relevance is time-limited, or a [[ClaimReview]]"
     "fact check whose publisher wants to indicate that it may no longer be relevant (or helpful"
     "to highlight) after some date.",
    )
    contentLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The location depicted or described in the content. For example, the location in a photograph"
     "or painting.",
    )
    educationalUse: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The purpose of a work in the context of education; for example, 'assignment', 'group"
     "work'.",
    )
    copyrightHolder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The party holding the legal copyright to the CreativeWork.",
    )
    accessibilityControl: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifies input methods that are sufficient to fully control the described resource."
     "Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityControl-vocabulary).",
    )
    maintainer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A maintainer of a [[Dataset]], software package ([[SoftwareApplication]]), or other"
     "[[Project]]. A maintainer is a [[Person]] or [[Organization]] that manages contributions"
     "to, and/or publication of, some (typically complex) artifact. It is common for distributions"
     "of software and data to be based on \"upstream\" sources. When [[maintainer]] is applied"
     "to a specific version of something e.g. a particular version or packaging of a [[Dataset]],"
     "it is always possible that the upstream source has a different maintainer. The [[isBasedOn]]"
     "property can be used to indicate such relationships between datasets to make the different"
     "maintenance roles clear. Similarly in the case of software, a package may have dedicated"
     "maintainers working on integration into software distributions such as Ubuntu, as"
     "well as upstream maintainers of the underlying work.",
    )
    educationalAlignment: Optional[Union[List[Union[AlignmentObject, str]], AlignmentObject, str]] = Field(
        default=None,
        description="An alignment to an established educational framework. This property should not be used"
     "where the nature of the alignment can be described using a simple property, for example"
     "to express that a resource [[teaches]] or [[assesses]] a competency.",
    )
    spatial: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The \"spatial\" property can be used in cases when more specific properties (e.g. [[locationCreated]],"
     "[[spatialCoverage]], [[contentLocation]]) are not known to be appropriate.",
    )
    publisher: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The publisher of the creative work.",
    )
    keywords: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Keywords or tags used to describe some item. Multiple textual entries in a keywords list"
     "are typically delimited by commas, or by repeating the property.",
    )
    assesses: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to assess the competency or learning outcome defined"
     "by the referenced term.",
    )
    reviews: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="Review of the item.",
    )
    isBasedOn: Optional[Union[List[Union[AnyUrl, URL, Product, CreativeWork, str]], AnyUrl, URL, Product, CreativeWork, str]] = Field(
        default=None,
        description="A resource from which this work is derived or from which it is a modification or adaption.",
    )
    mentions: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="Indicates that the CreativeWork contains a reference to, but is not necessarily about"
     "a concept.",
    )
    publishingPrinciples: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="The publishingPrinciples property indicates (typically via [[URL]]) a document describing"
     "the editorial principles of an [[Organization]] (or individual, e.g. a [[Person]]"
     "writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity"
     "policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles"
     "are those of the party primarily responsible for the creation of the [[CreativeWork]]."
     "While such policies are most typically expressed in natural language, sometimes related"
     "information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.",
    )
    contributor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A secondary contributor to the CreativeWork or Event.",
    )
    license: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="A license document that applies to this content, typically indicated by URL.",
    )
    citation: Optional[Union[List[Union[str, Text, CreativeWork]], str, Text, CreativeWork]] = Field(
        default=None,
        description="A citation or reference to another creative work, such as another publication, web page,"
     "scholarly article, etc.",
    )
    accessibilitySummary: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A human-readable summary of specific accessibility features or deficiencies, consistent"
     "with the other accessibility metadata but expressing subtleties such as \"short descriptions"
     "are present but long descriptions will be needed for non-visual users\" or \"short descriptions"
     "are present and no long descriptions are needed.\"",
    )
    award: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An award won by or for this item.",
    )
    commentCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of comments this CreativeWork (e.g. Article, Question or Answer) has received."
     "This is most applicable to works published in Web sites with commenting system; additional"
     "comments may exist elsewhere.",
    )
    temporalCoverage: Optional[Union[List[Union[datetime, DateTime, AnyUrl, URL, str, Text]], datetime, DateTime, AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The temporalCoverage of a CreativeWork indicates the period that the content applies"
     "to, i.e. that it describes, either as a DateTime or as a textual string indicating a time"
     "period in [ISO 8601 time interval format](https://en.wikipedia.org/wiki/ISO_8601#Time_intervals)."
     "In the case of a Dataset it will typically indicate the relevant time period in a precise"
     "notation (e.g. for a 2011 census dataset, the year 2011 would be written \"2011/2012\")."
     "Other forms of content, e.g. ScholarlyArticle, Book, TVSeries or TVEpisode, may indicate"
     "their temporalCoverage in broader terms - textually or via well-known URL. Written"
     "works such as books may sometimes have precise temporal coverage too, e.g. a work set"
     "in 1939 - 1945 can be indicated in ISO 8601 interval format format via \"1939/1945\"."
     "Open-ended date ranges can be written with \"..\" in place of the end date. For example,"
     "\"2015-11/..\" indicates a range beginning in November 2015 and with no specified final"
     "date. This is tentative and might be updated in future when ISO 8601 is officially updated.",
    )
    dateCreated: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date on which the CreativeWork was created or the item was added to a DataFeed.",
    )
    discussionUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A link to the page containing the comments of the CreativeWork.",
    )
    copyrightNotice: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Text of a notice appropriate for describing the copyright aspects of this Creative Work,"
     "ideally indicating the owner of the copyright for the Work.",
    )
    learningResourceType: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The predominant type or kind characterizing the learning resource. For example, 'presentation',"
     "'handout'.",
    )
    awards: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Awards won by or for this item.",
    )
    accessModeSufficient: Optional[Union[List[Union[ItemList, str]], ItemList, str]] = Field(
        default=None,
        description="A list of single or combined accessModes that are sufficient to understand all the intellectual"
     "content of a resource. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessModeSufficient-vocabulary).",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    conditionsOfAccess: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Conditions that affect the availability of, or method(s) of access to, an item. Typically"
     "used for real world items such as an [[ArchiveComponent]] held by an [[ArchiveOrganization]]."
     "This property is not suitable for use as a general Web access control mechanism. It is"
     "expressed only in natural language. For example \"Available by appointment from the"
     "Reading Room\" or \"Accessible only from logged-in accounts \".",
    )
    interactivityType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The predominant mode of learning supported by the learning resource. Acceptable values"
     "are 'active', 'expositive', or 'mixed'.",
    )
    abstract: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An abstract is a short description that summarizes a [[CreativeWork]].",
    )
    fileFormat: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Media type, typically MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml))"
     "of the content, e.g. application/zip of a SoftwareApplication binary. In cases where"
     "a CreativeWork has several media type representations, 'encoding' can be used to indicate"
     "each MediaObject alongside particular fileFormat information. Unregistered or niche"
     "file formats can be indicated instead via the most appropriate URL, e.g. defining Web"
     "page or a Wikipedia entry.",
    )
    interpretedAsClaim: Optional[Union[List[Union[Claim, str]], Claim, str]] = Field(
        default=None,
        description="Used to indicate a specific claim contained, implied, translated or refined from the"
     "content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can"
     "be indicated using [[claimInterpreter]].",
    )
    text: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The textual content of this CreativeWork.",
    )
    archivedAt: Optional[Union[List[Union[AnyUrl, URL, WebPage, str]], AnyUrl, URL, WebPage, str]] = Field(
        default=None,
        description="Indicates a page or other link involved in archival of a [[CreativeWork]]. In the case"
     "of [[MediaReview]], the items in a [[MediaReviewItem]] may often become inaccessible,"
     "but be archived by archival, journalistic, activist, or law enforcement organizations."
     "In such cases, the referenced page may not directly publish the content.",
    )
    alternativeHeadline: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A secondary title of the CreativeWork.",
    )
    creditText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Text that can be used to credit person(s) and/or organization(s) associated with a published"
     "Creative Work.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    interactionStatistic: Optional[Union[List[Union[InteractionCounter, str]], InteractionCounter, str]] = Field(
        default=None,
        description="The number of interactions for the CreativeWork using the WebSite or SoftwareApplication."
     "The most specific child type of InteractionCounter should be used.",
    )
    workExample: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Example/instance/realization/derivation of the concept of this creative work. E.g."
     "the paperback edition, first edition, or e-book.",
    )
    about: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The subject matter of the content.",
    )
    encodings: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="A media object that encodes this CreativeWork.",
    )
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    video: Optional[Union[List[Union[VideoObject, Clip, str]], VideoObject, Clip, str]] = Field(
        default=None,
        description="An embedded video object.",
    )
    isPartOf: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Indicates an item or CreativeWork that this item, or CreativeWork (in some sense), is"
     "part of.",
    )
    pattern: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'."
     "Values are typically expressed as text, although links to controlled value schemes"
     "are also supported.",
    )
    editor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Specifies the Person who edited the CreativeWork.",
    )
    dateModified: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date on which the CreativeWork was most recently modified or when the item's entry"
     "was modified within a DataFeed.",
    )
    translationOfWork: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="The work that this work has been translated from. E.g. 物种起源 is a translationOf “On the"
     "Origin of Species”.",
    )
    creativeWorkStatus: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The status of a creative work in terms of its stage in a lifecycle. Example terms include"
     "Incomplete, Draft, Published, Obsolete. Some organizations define a set of terms for"
     "the stages of their publication lifecycle.",
    )
    isBasedOnUrl: Optional[Union[List[Union[AnyUrl, URL, Product, CreativeWork, str]], AnyUrl, URL, Product, CreativeWork, str]] = Field(
        default=None,
        description="A resource that was used in the creation of this resource. This term can be repeated for"
     "multiple sources. For example, http://example.com/great-multiplication-intro.html.",
    )
    isFamilyFriendly: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether this content is family friendly.",
    )
    isAccessibleForFree: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A flag to signal that the item, event, or place is accessible for free.",
    )
    author: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The author of this content or rating. Please note that author is special in that HTML 5"
     "provides a special mechanism for indicating authorship via the rel tag. That is equivalent"
     "to this and may be used interchangeably.",
    )
    contentReferenceTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The specific time described by a creative work, for works (e.g. articles, video objects"
     "etc.) that emphasise a particular moment within an Event.",
    )
    correction: Optional[Union[List[Union[AnyUrl, URL, str, Text, CorrectionComment]], AnyUrl, URL, str, Text, CorrectionComment]] = Field(
        default=None,
        description="Indicates a correction to a [[CreativeWork]], either via a [[CorrectionComment]],"
     "textually or in another document.",
    )
    sdDatePublished: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Indicates the date on which the current structured data was generated / published. Typically"
     "used alongside [[sdPublisher]]",
    )
    comment: Optional[Union[List[Union[Comment, str]], Comment, str]] = Field(
        default=None,
        description="Comments, typically from users.",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    timeRequired: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="Approximate or typical time it takes to work with or through this learning resource for"
     "the typical intended target audience, e.g. 'PT30M', 'PT1H25M'.",
    )
    typicalAgeRange: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The typical expected age range, e.g. '7-9', '11-'.",
    )
    genre: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Genre of the creative work, broadcast channel or group.",
    )
    producer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization who produced the work (e.g. music album, movie, TV/radio"
     "series etc.).",
    )
    schemaVersion: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Indicates (by URL or string) a particular version of a schema used in some CreativeWork."
     "This property was created primarily to indicate the use of a specific schema.org release,"
     "e.g. ```10.0``` as a simple string, or more explicitly via URL, ```https://schema.org/docs/releases.html#v10.0```."
     "There may be situations in which other schemas might usefully be referenced this way,"
     "e.g. ```http://dublincore.org/specifications/dublin-core/dces/1999-07-02/```"
     "but this has not been carefully explored in the community.",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    encoding: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="A media object that encodes this CreativeWork. This property is a synonym for associatedMedia.",
    )
    publisherImprint: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The publishing division which published the comic.",
    )
    accessibilityAPI: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates that the resource is compatible with the referenced accessibility API. Values"
     "should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityAPI-vocabulary).",
    )
    sdPublisher: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Indicates the party responsible for generating and publishing the current structured"
     "data markup, typically in cases where the structured data is derived automatically"
     "from existing published content but published on a different site. For example, student"
     "projects and open data initiatives often re-publish existing content with more explicitly"
     "structured metadata. The [[sdPublisher]] property helps make such practices more"
     "explicit.",
    )
    audio: Optional[Union[List[Union[AudioObject, Clip, MusicRecording, str]], AudioObject, Clip, MusicRecording, str]] = Field(
        default=None,
        description="An embedded audio object.",
    )
    accessibilityFeature: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Content features of the resource, such as accessible media, alternatives and supported"
     "enhancements for accessibility. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityFeature-vocabulary).",
    )
    spatialCoverage: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The spatialCoverage of a CreativeWork indicates the place(s) which are the focus of"
     "the content. It is a subproperty of contentLocation intended primarily for more technical"
     "and detailed materials. For example with a Dataset, it indicates areas that the dataset"
     "describes: a dataset of New York weather would have spatialCoverage which was the place:"
     "the state of New York.",
    )
    accessMode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The human sensory perceptual system or cognitive faculty through which a person may"
     "process or perceive information. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessMode-vocabulary).",
    )
    editEIDR: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]]"
     "representing a specific edit / edition for a work of film or television. For example,"
     "the motion picture known as \"Ghostbusters\" whose [[titleEIDR]] is \"10.5240/7EC7-228A-510A-053E-CBB8-J\""
     "has several edits, e.g. \"10.5240/1F2A-E1C5-680A-14C6-E76B-I\" and \"10.5240/8A35-3BEE-6497-5D12-9E4F-3\"."
     "Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and"
     "their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general"
     "description), or alongside [[editEIDR]] for a more edit-specific description.",
    )
    usageInfo: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="The schema.org [[usageInfo]] property indicates further information about a [[CreativeWork]]."
     "This property is applicable both to works that are freely available and to those that"
     "require payment or other transactions. It can reference additional information, e.g."
     "community expectations on preferred linking and citation conventions, as well as purchasing"
     "details. For something that can be commercially licensed, usageInfo can provide detailed,"
     "resource-specific information about licensing options. This property can be used"
     "alongside the license property which indicates license(s) applicable to some piece"
     "of content. The usageInfo property can provide information about other licensing options,"
     "e.g. acquiring commercial usage rights for an image that is also available under non-commercial"
     "creative commons licenses.",
    )
    position: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The position of an item in a series or sequence of items.",
    )
    encodingFormat: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)"
     "and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)),"
     "e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc. In"
     "cases where a [[CreativeWork]] has several media type representations, [[encoding]]"
     "can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]]"
     "information. Unregistered or niche encoding and file formats can be indicated instead"
     "via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.",
    )
    copyrightYear: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The year during which the claimed copyright for the CreativeWork was first asserted.",
    )
    mainEntity: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="Indicates the primary entity described in some page or other CreativeWork.",
    )
    creator: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The creator/author of this CreativeWork. This is the same as the Author property for"
     "CreativeWork.",
    )
    teaches: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to help a person learn the competency or learning"
     "outcome defined by the referenced term.",
    )
    temporal: Optional[Union[List[Union[datetime, DateTime, str, Text]], datetime, DateTime, str, Text]] = Field(
        default=None,
        description="The \"temporal\" property can be used in cases where more specific properties (e.g."
     "[[temporalCoverage]], [[dateCreated]], [[dateModified]], [[datePublished]])"
     "are not known to be appropriate.",
    )
    size: Optional[Union[List[Union[str, Text, QuantitativeValue, DefinedTerm, SizeSpecification]], str, Text, QuantitativeValue, DefinedTerm, SizeSpecification]] = Field(
        default=None,
        description="A standardized size of a product or creative work, specified either through a simple"
     "textual string (for example 'XL', '32Wx34L'), a QuantitativeValue with a unitCode,"
     "or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]],"
     "[[height]], [[depth]] and [[weight]] properties may be more applicable.",
    )
    translator: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Organization or person who adapts a creative work to different languages, regional"
     "differences and technical requirements of a target market, or that translates during"
     "some event.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    accountablePerson: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Specifies the Person that is legally accountable for the CreativeWork.",
    )
    accessibilityHazard: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A characteristic of the described resource that is physiologically dangerous to some"
     "users. Related to WCAG 2.0 guideline 2.3. Values should be drawn from the [approved vocabulary](https://www.w3.org/2021/a11y-discov-vocab/latest/#accessibilityHazard-vocabulary).",
    )
    contentRating: Optional[Union[List[Union[str, Text, Rating]], str, Text, Rating]] = Field(
        default=None,
        description="Official rating of a piece of content&#x2014;for example, 'MPAA PG-13'.",
    )
    recordedAt: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="The Event where the CreativeWork was recorded. The CreativeWork may capture all or part"
     "of the event.",
    )
    publication: Optional[Union[List[Union[PublicationEvent, str]], PublicationEvent, str]] = Field(
        default=None,
        description="A publication event associated with the item.",
    )
    sdLicense: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="A license document that applies to this structured data, typically indicated by URL.",
    )
    headline: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Headline of the article.",
    )
    materialExtent: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="The quantity of the materials being described or an expression of the physical space"
     "they occupy.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    material: Optional[Union[List[Union[AnyUrl, URL, str, Text, Product]], AnyUrl, URL, str, Text, Product]] = Field(
        default=None,
        description="A material that something is made from, e.g. leather, wool, cotton, paper.",
    )
    datePublished: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Date of first broadcast/publication.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    hasPart: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Indicates an item or CreativeWork that is part of this item, or CreativeWork (in some"
     "sense).",
    )
    sourceOrganization: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The Organization on whose behalf the creator was working.",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    character: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Fictional person connected with a creative work.",
    )
    



class DataCatalog(CreativeWork):
    """A collection of datasets.

    See: https://schema.org/DataCatalog
    Model depth: 3
    """
    type_: str = Field(default="DataCatalog", alias='@type', const=True)
    dataset: Optional[Union[List[Union[Dataset, str]], Dataset, str]] = Field(
        default=None,
        description="A dataset contained in this catalog.",
    )
    measurementTechnique: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),"
     "corresponding to the method used for measuring the corresponding variable(s) (described"
     "using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset"
     "publication but may have broader applicability; it is not intended as a full representation"
     "of measurement, but rather as a high level summary for dataset discovery. For example,"
     "if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]]"
     "could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\"."
     "If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]]"
     "could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are"
     "several [[variableMeasured]] properties recorded for some given data object, use"
     "a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].",
    )
    



class WebPageElement(CreativeWork):
    """A web page element, like a table or an image.

    See: https://schema.org/WebPageElement
    Model depth: 3
    """
    type_: str = Field(default="WebPageElement", alias='@type', const=True)
    xpath: Optional[Union[List[Union[str, XPathType]], str, XPathType]] = Field(
        default=None,
        description="An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter"
     "case, multiple matches within a page can constitute a single conceptual \"Web page element\".",
    )
    cssSelector: Optional[Union[List[Union[str, CssSelectorType]], str, CssSelectorType]] = Field(
        default=None,
        description="A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the"
     "latter case, multiple matches within a page can constitute a single conceptual \"Web"
     "page element\".",
    )
    



class Accommodation(Place):
    """An accommodation is a place that can accommodate human beings, e.g. a hotel room, a camping"
     "pitch, or a meeting room. Many accommodations are for overnight stays, but this is not"
     "a mandatory requirement. For more specific types of accommodations not defined in schema.org,"
     "one can use additionalType with external vocabularies. <br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated"
     "document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Accommodation
    Model depth: 3
    """
    type_: str = Field(default="Accommodation", alias='@type', const=True)
    floorSize: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The size of the accommodation, e.g. in square meter or squarefoot. Typical unit code(s):"
     "MTK for square meter, FTK for square foot, or YDK for square yard",
    )
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    floorLevel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The floor level for an [[Accommodation]] in a multi-storey building. Since counting"
     "systems [vary internationally](https://en.wikipedia.org/wiki/Storey#Consecutive_number_floor_designations),"
     "the local system should be used where possible.",
    )
    numberOfFullBathrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]."
     "This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).",
    )
    amenityFeature: Optional[Union[List[Union[LocationFeatureSpecification, str]], LocationFeatureSpecification, str]] = Field(
        default=None,
        description="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic"
     "property does not make a statement about whether the feature is included in an offer for"
     "the main accommodation or available at extra costs.",
    )
    tourBookingPage: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]]"
     "or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.",
    )
    numberOfBathroomsTotal: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The total integer number of bathrooms in some [[Accommodation]], following real estate"
     "conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field):"
     "\"The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms"
     "and one Half Bathroom, the Bathrooms Total Integer will be 3.\". See also [[numberOfRooms]].",
    )
    numberOfBedrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]]"
     "or [[FloorPlan]].",
    )
    accommodationCategory: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Category of an [[Accommodation]], following real estate conventions, e.g. RESO (see"
     "[PropertySubType](https://ddwiki.reso.org/display/DDW17/PropertySubType+Field),"
     "and [PropertyType](https://ddwiki.reso.org/display/DDW17/PropertyType+Field)"
     "fields for suggested values).",
    )
    leaseLength: Optional[Union[List[Union[Duration, QuantitativeValue, str]], Duration, QuantitativeValue, str]] = Field(
        default=None,
        description="Length of the lease for some [[Accommodation]], either particular to some [[Offer]]"
     "or in some cases intrinsic to the property.",
    )
    petsAllowed: Optional[Union[List[Union[str, Text, StrictBool, Boolean]], str, Text, StrictBool, Boolean]] = Field(
        default=None,
        description="Indicates whether pets are allowed to enter the accommodation or lodging business."
     "More detailed information can be put in a text value.",
    )
    permittedUsage: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indications regarding the permitted usage of the accommodation.",
    )
    numberOfPartialBathrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]."
     "This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).",
    )
    accommodationFloorPlan: Optional[Union[List[Union[FloorPlan, str]], FloorPlan, str]] = Field(
        default=None,
        description="A floorplan of some [[Accommodation]].",
    )
    yearBuilt: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The year an [[Accommodation]] was constructed. This corresponds to the [YearBuilt"
     "field in RESO](https://ddwiki.reso.org/display/DDW17/YearBuilt+Field).",
    )
    



class Apartment(Accommodation):
    """An apartment (in American English) or flat (in British English) is a self-contained"
     "housing unit (a type of residential real estate) that occupies only part of a building"
     "(source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Apartment\">http://en.wikipedia.org/wiki/Apartment</a>).

    See: https://schema.org/Apartment
    Model depth: 4
    """
    type_: str = Field(default="Apartment", alias='@type', const=True)
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    occupancy: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The allowed total occupancy for the accommodation in persons (including infants etc)."
     "For individual accommodations, this is not necessarily the legal maximum but defines"
     "the permitted usage as per the contractual agreement (e.g. a double room used by a single"
     "person). Typical unit code(s): C62 for person",
    )
    



class Event(Thing):
    """An event happening at a certain time and location, such as a concert, lecture, or festival."
     "Ticketing information may be added via the [[offers]] property. Repeated events may"
     "be structured as separate Event objects.

    See: https://schema.org/Event
    Model depth: 2
    """
    type_: str = Field(default="Event", alias='@type', const=True)
    performer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A performer at the event&#x2014;for example, a presenter, musician, musical group"
     "or actor.",
    )
    eventAttendanceMode: Optional[Union[List[Union[EventAttendanceModeEnumeration, str]], EventAttendanceModeEnumeration, str]] = Field(
        default=None,
        description="The eventAttendanceMode of an event indicates whether it occurs online, offline, or"
     "a mix.",
    )
    workFeatured: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A work featured in some event, e.g. exhibited in an ExhibitionEvent. Specific subproperties"
     "are available for workPerformed (e.g. a play), or a workPresented (a Movie at a ScreeningEvent).",
    )
    remainingAttendeeCapacity: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of attendee places for an event that remain unallocated.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    doorTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The time admission will commence.",
    )
    previousStartDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Used in conjunction with eventStatus for rescheduled or cancelled events. This property"
     "contains the previously scheduled start date. For rescheduled events, the startDate"
     "property should be used for the newly scheduled start date. In the (rare) case of an event"
     "that has been postponed and rescheduled multiple times, this field may be repeated.",
    )
    recordedIn: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="The CreativeWork that captured all or part of this Event.",
    )
    keywords: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Keywords or tags used to describe some item. Multiple textual entries in a keywords list"
     "are typically delimited by commas, or by repeating the property.",
    )
    contributor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A secondary contributor to the CreativeWork or Event.",
    )
    superEvent: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="An event that this event is a part of. For example, a collection of individual music performances"
     "might each have a music festival as their superEvent.",
    )
    eventSchedule: Optional[Union[List[Union[Schedule, str]], Schedule, str]] = Field(
        default=None,
        description="Associates an [[Event]] with a [[Schedule]]. There are circumstances where it is preferable"
     "to share a schedule for a series of repeating events rather than data on the individual"
     "events themselves. For example, a website or application might prefer to publish a schedule"
     "for a weekly gym class rather than provide data on every event. A schedule could be processed"
     "by applications to add forthcoming events to a calendar. An [[Event]] that is associated"
     "with a [[Schedule]] using this property should not have [[startDate]] or [[endDate]]"
     "properties. These are instead defined within the associated [[Schedule]], this avoids"
     "any ambiguity for clients using the data. The property might have repeated values to"
     "specify different schedules, e.g. for different months or seasons.",
    )
    maximumVirtualAttendeeCapacity: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]]"
     "is [[OnlineEventAttendanceMode]] (or the online aspects, in the case of a [[MixedEventAttendanceMode]]).",
    )
    attendees: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person attending the event.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    eventStatus: Optional[Union[List[Union[EventStatusType, str]], EventStatusType, str]] = Field(
        default=None,
        description="An eventStatus of an event represents its status; particularly useful when an event"
     "is cancelled or rescheduled.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    workPerformed: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A work performed in some event, for example a play performed in a TheaterEvent.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    about: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The subject matter of the content.",
    )
    composer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization who wrote a composition, or who is the composer of a work performed"
     "at some event.",
    )
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    isAccessibleForFree: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A flag to signal that the item, event, or place is accessible for free.",
    )
    subEvent: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="An Event that is part of this event. For example, a conference event includes many presentations,"
     "each of which is a subEvent of the conference.",
    )
    typicalAgeRange: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The typical expected age range, e.g. '7-9', '11-'.",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    attendee: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization attending the event.",
    )
    subEvents: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Events that are a part of this event. For example, a conference event includes many presentations,"
     "each subEvents of the conference.",
    )
    performers: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The main performer or performers of the event&#x2014;for example, a presenter, musician,"
     "or actor.",
    )
    maximumAttendeeCapacity: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The total number of individuals that may attend an event or venue.",
    )
    translator: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Organization or person who adapts a creative work to different languages, regional"
     "differences and technical requirements of a target market, or that translates during"
     "some event.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    maximumPhysicalAttendeeCapacity: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The maximum physical attendee capacity of an [[Event]] whose [[eventAttendanceMode]]"
     "is [[OfflineEventAttendanceMode]] (or the offline aspects, in the case of a [[MixedEventAttendanceMode]]).",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    location: Optional[Union[List[Union[str, Text, Place, PostalAddress, VirtualLocation]], str, Text, Place, PostalAddress, VirtualLocation]] = Field(
        default=None,
        description="The location of, for example, where an event is happening, where an organization is located,"
     "or where an action takes place.",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    organizer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An organizer of an Event.",
    )
    



class LiteraryEvent(Event):
    """Event type: Literary event.

    See: https://schema.org/LiteraryEvent
    Model depth: 3
    """
    type_: str = Field(default="LiteraryEvent", alias='@type', const=True)
    



class Clip(CreativeWork):
    """A short TV or radio program or a segment/part of a program.

    See: https://schema.org/Clip
    Model depth: 3
    """
    type_: str = Field(default="Clip", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    clipNumber: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="Position of the clip within an ordered group of clips.",
    )
    partOfEpisode: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="The episode to which this clip belongs.",
    )
    partOfSeason: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="The season to which this episode belongs.",
    )
    startOffset: Optional[Union[List[Union[StrictInt, StrictFloat, Number, HyperTocEntry, str]], StrictInt, StrictFloat, Number, HyperTocEntry, str]] = Field(
        default=None,
        description="The start time of the clip expressed as the number of seconds from the beginning of the"
     "work.",
    )
    partOfSeries: Optional[Union[List[Union[CreativeWorkSeries, str]], CreativeWorkSeries, str]] = Field(
        default=None,
        description="The series to which this episode or season belongs.",
    )
    endOffset: Optional[Union[List[Union[StrictInt, StrictFloat, Number, HyperTocEntry, str]], StrictInt, StrictFloat, Number, HyperTocEntry, str]] = Field(
        default=None,
        description="The end time of the clip expressed as the number of seconds from the beginning of the work.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class MovieClip(Clip):
    """A short segment/part of a movie.

    See: https://schema.org/MovieClip
    Model depth: 4
    """
    type_: str = Field(default="MovieClip", alias='@type', const=True)
    



class EducationEvent(Event):
    """Event type: Education event.

    See: https://schema.org/EducationEvent
    Model depth: 3
    """
    type_: str = Field(default="EducationEvent", alias='@type', const=True)
    educationalLevel: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="The level in terms of progression through an educational or training context. Examples"
     "of educational levels include 'beginner', 'intermediate' or 'advanced', and formal"
     "sets of level indicators.",
    )
    assesses: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to assess the competency or learning outcome defined"
     "by the referenced term.",
    )
    teaches: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to help a person learn the competency or learning"
     "outcome defined by the referenced term.",
    )
    



class MedicalEnumeration(Enumeration):
    """Enumerations related to health and the practice of medicine: A concept that is used to"
     "attribute a quality to another concept, as a qualifier, a collection of items or a listing"
     "of all of the elements of a set in medicine practice.

    See: https://schema.org/MedicalEnumeration
    Model depth: 4
    """
    type_: str = Field(default="MedicalEnumeration", alias='@type', const=True)
    



class MedicalProcedure(MedicalEntity):
    """A process of care used in either a diagnostic, therapeutic, preventive or palliative"
     "capacity that relies on invasive (surgical), non-invasive, or other techniques.

    See: https://schema.org/MedicalProcedure
    Model depth: 3
    """
    type_: str = Field(default="MedicalProcedure", alias='@type', const=True)
    howPerformed: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="How the procedure is performed.",
    )
    procedureType: Optional[Union[List[Union[MedicalProcedureType, str]], MedicalProcedureType, str]] = Field(
        default=None,
        description="The type of procedure, for example Surgical, Noninvasive, or Percutaneous.",
    )
    status: Optional[Union[List[Union[str, Text, EventStatusType, MedicalStudyStatus]], str, Text, EventStatusType, MedicalStudyStatus]] = Field(
        default=None,
        description="The status of the study (enumerated).",
    )
    bodyLocation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Location in the body of the anatomical structure.",
    )
    followup: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Typical or recommended followup care after the procedure is performed.",
    )
    preparation: Optional[Union[List[Union[str, Text, MedicalEntity]], str, Text, MedicalEntity]] = Field(
        default=None,
        description="Typical preparation that a patient must undergo before having the procedure performed.",
    )
    



class PhysicalExam(MedicalEnumeration, MedicalProcedure):
    """A type of physical examination of a patient performed by a physician.

    See: https://schema.org/PhysicalExam
    Model depth: 4
    """
    type_: str = Field(default="PhysicalExam", alias='@type', const=True)
    



class Abdomen(PhysicalExam):
    """Abdomen clinical examination.

    See: https://schema.org/Abdomen
    Model depth: 5
    """
    type_: str = Field(default="Abdomen", alias='@type', const=True)
    



class SocialEvent(Event):
    """Event type: Social event.

    See: https://schema.org/SocialEvent
    Model depth: 3
    """
    type_: str = Field(default="SocialEvent", alias='@type', const=True)
    



class MedicalTest(MedicalEntity):
    """Any medical test, typically performed for diagnostic purposes.

    See: https://schema.org/MedicalTest
    Model depth: 3
    """
    type_: str = Field(default="MedicalTest", alias='@type', const=True)
    affectedBy: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Drugs that affect the test's results.",
    )
    normalRange: Optional[Union[List[Union[str, Text, MedicalEnumeration]], str, Text, MedicalEnumeration]] = Field(
        default=None,
        description="Range of acceptable values for a typical patient, when applicable.",
    )
    signDetected: Optional[Union[List[Union[MedicalSign, str]], MedicalSign, str]] = Field(
        default=None,
        description="A sign detected by the test.",
    )
    usedToDiagnose: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="A condition the test is used to diagnose.",
    )
    usesDevice: Optional[Union[List[Union[MedicalDevice, str]], MedicalDevice, str]] = Field(
        default=None,
        description="Device used to perform the test.",
    )
    



class ImagingTest(MedicalTest):
    """Any medical imaging modality typically used for diagnostic purposes.

    See: https://schema.org/ImagingTest
    Model depth: 4
    """
    type_: str = Field(default="ImagingTest", alias='@type', const=True)
    imagingTechnique: Optional[Union[List[Union[MedicalImagingTechnique, str]], MedicalImagingTechnique, str]] = Field(
        default=None,
        description="Imaging technique used.",
    )
    



class InteractionCounter(StructuredValue):
    """A summary of how users have interacted with this CreativeWork. In most cases, authors"
     "will use a subtype to specify the specific type of interaction.

    See: https://schema.org/InteractionCounter
    Model depth: 4
    """
    type_: str = Field(default="InteractionCounter", alias='@type', const=True)
    endTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to end. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from January to *December*. For media, including"
     "audio and video, it's the time offset of the end of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    startTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to start. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from *January* to December. For media, including"
     "audio and video, it's the time offset of the start of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    interactionType: Optional[Union[List[Union[Action, str]], Action, str]] = Field(
        default=None,
        description="The Action representing the type of interaction. For up votes, +1s, etc. use [[LikeAction]]."
     "For down votes use [[DislikeAction]]. Otherwise, use the most specific Action.",
    )
    interactionService: Optional[Union[List[Union[SoftwareApplication, WebSite, str]], SoftwareApplication, WebSite, str]] = Field(
        default=None,
        description="The WebSite or SoftwareApplication where the interactions took place.",
    )
    userInteractionCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of interactions for the CreativeWork using the WebSite or SoftwareApplication.",
    )
    location: Optional[Union[List[Union[str, Text, Place, PostalAddress, VirtualLocation]], str, Text, Place, PostalAddress, VirtualLocation]] = Field(
        default=None,
        description="The location of, for example, where an event is happening, where an organization is located,"
     "or where an action takes place.",
    )
    



class Audience(Intangible):
    """Intended audience for an item, i.e. the group for whom the item was created.

    See: https://schema.org/Audience
    Model depth: 3
    """
    type_: str = Field(default="Audience", alias='@type', const=True)
    audienceType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The target group associated with a given audience (e.g. veterans, car owners, musicians,"
     "etc.).",
    )
    geographicArea: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area associated with the audience.",
    )
    



class PeopleAudience(Audience):
    """A set of characteristics belonging to people, e.g. who compose an item's target audience.

    See: https://schema.org/PeopleAudience
    Model depth: 4
    """
    type_: str = Field(default="PeopleAudience", alias='@type', const=True)
    healthCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="Specifying the health condition(s) of a patient, medical study, or other target audience.",
    )
    requiredGender: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Audiences defined by a person's gender.",
    )
    suggestedMinAge: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Minimum recommended age in years for the audience or user.",
    )
    requiredMinAge: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Audiences defined by a person's minimum age.",
    )
    suggestedMeasurement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A suggested range of body measurements for the intended audience or person, for example"
     "inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size"
     "chart for wearable products.",
    )
    suggestedGender: Optional[Union[List[Union[str, Text, GenderType]], str, Text, GenderType]] = Field(
        default=None,
        description="The suggested gender of the intended person or audience, for example \"male\", \"female\","
     "or \"unisex\".",
    )
    requiredMaxAge: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Audiences defined by a person's maximum age.",
    )
    suggestedAge: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The age or age range for the intended audience or person, for example 3-12 months for infants,"
     "1-5 years for toddlers.",
    )
    suggestedMaxAge: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Maximum recommended age in years for the audience or user.",
    )
    



class ParentAudience(PeopleAudience):
    """A set of characteristics describing parents, who can be interested in viewing some content.

    See: https://schema.org/ParentAudience
    Model depth: 5
    """
    type_: str = Field(default="ParentAudience", alias='@type', const=True)
    childMinAge: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Minimal age of the child.",
    )
    childMaxAge: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Maximal age of the child.",
    )
    



class Product(Thing):
    """Any offered product or service. For example: a pair of shoes; a concert ticket; the rental"
     "of a car; a haircut; or an episode of a TV show streamed online.

    See: https://schema.org/Product
    Model depth: 2
    """
    type_: str = Field(default="Product", alias='@type', const=True)
    hasMeasurement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A product measurement, for example the inseam of pants, the wheel size of a bicycle, or"
     "the gauge of a screw. Usually an exact measurement, but can also be a range of measurements"
     "for adjustable products, for example belts and ski bindings.",
    )
    countryOfAssembly: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The place where the product was assembled.",
    )
    width: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The width of the item.",
    )
    isAccessoryOrSparePartFor: Optional[Union[List[Union[Product, str]], Product, str]] = Field(
        default=None,
        description="A pointer to another product (or multiple products) for which this product is an accessory"
     "or spare part.",
    )
    isConsumableFor: Optional[Union[List[Union[Product, str]], Product, str]] = Field(
        default=None,
        description="A pointer to another product (or multiple products) for which this product is a consumable.",
    )
    depth: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The depth of the item.",
    )
    additionalProperty: Optional[Union[List[Union[PropertyValue, str]], PropertyValue, str]] = Field(
        default=None,
        description="A property-value pair representing an additional characteristic of the entity, e.g."
     "a product feature or another characteristic for which there is no matching property"
     "in schema.org. Note: Publishers should be aware that applications designed to use specific"
     "schema.org properties (e.g. https://schema.org/width, https://schema.org/color,"
     "https://schema.org/gtin13, ...) will typically expect such data to be provided using"
     "those properties, rather than using the generic property/value mechanism.",
    )
    isVariantOf: Optional[Union[List[Union[ProductModel, ProductGroup, str]], ProductModel, ProductGroup, str]] = Field(
        default=None,
        description="Indicates the kind of product that this is a variant of. In the case of [[ProductModel]],"
     "this is a pointer (from a ProductModel) to a base product from which this product is a variant."
     "It is safe to infer that the variant inherits all product features from the base model,"
     "unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the"
     "group description also serves as a template, representing a set of Products that vary"
     "on explicitly defined, specific dimensions only (so it defines both a set of variants,"
     "as well as which values distinguish amongst those variants). When used with [[ProductGroup]],"
     "this property can apply to any [[Product]] included in the group.",
    )
    slogan: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    manufacturer: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The manufacturer of the product.",
    )
    gtin14: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN"
     "Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
    )
    keywords: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Keywords or tags used to describe some item. Multiple textual entries in a keywords list"
     "are typically delimited by commas, or by repeating the property.",
    )
    positiveNotes: Optional[Union[List[Union[str, Text, ItemList, WebContent, ListItem]], str, Text, ItemList, WebContent, ListItem]] = Field(
        default=None,
        description="Provides positive considerations regarding something, for example product highlights"
     "or (alongside [[negativeNotes]]) pro/con lists for reviews. In the case of a [[Review]],"
     "the property describes the [[itemReviewed]] from the perspective of the review; in"
     "the case of a [[Product]], the product itself is being described. The property values"
     "can be expressed either as unstructured text (repeated as necessary), or if ordered,"
     "as a list (in which case the most positive is at the beginning of the list).",
    )
    reviews: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="Review of the item.",
    )
    height: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The height of the item.",
    )
    model: Optional[Union[List[Union[str, Text, ProductModel]], str, Text, ProductModel]] = Field(
        default=None,
        description="The model of the product. Use with the URL of a ProductModel or a textual representation"
     "of the model identifier. The URL of the ProductModel can be from an external source. It"
     "is recommended to additionally provide strong product identifiers via the gtin8/gtin13/gtin14"
     "and mpn properties.",
    )
    itemCondition: Optional[Union[List[Union[OfferItemCondition, str]], OfferItemCondition, str]] = Field(
        default=None,
        description="A predefined value from OfferItemCondition specifying the condition of the product"
     "or service, or the products or services included in the offer. Also used for product return"
     "policies to specify the condition of products accepted for returns.",
    )
    award: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An award won by or for this item.",
    )
    nsn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the [NATO stock number](https://en.wikipedia.org/wiki/NATO_Stock_Number)"
     "(nsn) of a [[Product]].",
    )
    awards: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Awards won by or for this item.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    gtin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin))."
     "GTINs identify trade items, including products and services, using numeric identification"
     "codes. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/)"
     "express GTINs as URLs (URIs, IRIs, etc.). Details including regular expression examples"
     "can be found in, Section 6 of the GS1 URI Syntax specification; see also [schema.org tracking"
     "issue](https://github.com/schemaorg/schemaorg/issues/3156#issuecomment-1209522809)"
     "for schema.org-specific discussion. A correct [[gtin]] value should be a valid GTIN,"
     "which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or"
     "a \"GS1 Digital Link\" URL based on such a string. The numeric component should also have"
     "a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator)"
     "and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for"
     "more details. Left-padding of the gtin values is not required or encouraged. The [[gtin]]"
     "property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]]"
     "properties. Note also that this is a definition for how to include GTINs in Schema.org"
     "data, and not a definition of GTINs in general - see the GS1 documentation for authoritative"
     "details.",
    )
    isRelatedTo: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="A pointer to another, somehow related product (or multiple products).",
    )
    negativeNotes: Optional[Union[List[Union[str, Text, ItemList, WebContent, ListItem]], str, Text, ItemList, WebContent, ListItem]] = Field(
        default=None,
        description="Provides negative considerations regarding something, most typically in pro/con"
     "lists for reviews (alongside [[positiveNotes]]). For symmetry In the case of a [[Review]],"
     "the property describes the [[itemReviewed]] from the perspective of the review; in"
     "the case of a [[Product]], the product itself is being described. Since product descriptions"
     "tend to emphasise positive claims, it may be relatively unusual to find [[negativeNotes]]"
     "used in this way. Nevertheless for the sake of symmetry, [[negativeNotes]] can be used"
     "on [[Product]]. The property values can be expressed either as unstructured text (repeated"
     "as necessary), or if ordered, as a list (in which case the most negative is at the beginning"
     "of the list).",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    mobileUrl: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [[mobileUrl]] property is provided for specific situations in which data consumers"
     "need to determine whether one of several provided URLs is a dedicated 'mobile site'."
     "To discourage over-use, and reflecting intial usecases, the property is expected only"
     "on [[Product]] and [[Offer]], rather than [[Thing]]. The general trend in web technology"
     "is towards [responsive design](https://en.wikipedia.org/wiki/Responsive_web_design)"
     "in which content can be flexibly adapted to a wide range of browsing environments. Pages"
     "and sites referenced with the long-established [[url]] property should ideally also"
     "be usable on a wide variety of devices, including mobile phones. In most cases, it would"
     "be pointless and counter productive to attempt to update all [[url]] markup to use [[mobileUrl]]"
     "for more mobile-oriented pages. The property is intended for the case when items (primarily"
     "[[Product]] and [[Offer]]) have extra URLs hosted on an additional \"mobile site\""
     "alongside the main one. It should not be taken as an endorsement of this publication style.",
    )
    hasEnergyConsumptionDetails: Optional[Union[List[Union[EnergyConsumptionDetails, str]], EnergyConsumptionDetails, str]] = Field(
        default=None,
        description="Defines the energy efficiency Category (also known as \"class\" or \"rating\") for"
     "a product according to an international energy efficiency standard.",
    )
    weight: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The weight of the product or person.",
    )
    hasMerchantReturnPolicy: Optional[Union[List[Union[MerchantReturnPolicy, str]], MerchantReturnPolicy, str]] = Field(
        default=None,
        description="Specifies a MerchantReturnPolicy that may be applicable.",
    )
    pattern: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="A pattern that something has, for example 'polka dot', 'striped', 'Canadian flag'."
     "Values are typically expressed as text, although links to controlled value schemes"
     "are also supported.",
    )
    isFamilyFriendly: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether this content is family friendly.",
    )
    gtin12: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12"
     "is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference,"
     "and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    isSimilarTo: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="A pointer to another, functionally similar product (or multiple products).",
    )
    productID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The product identifier, such as ISBN. For example: ``` meta itemprop=\"productID\""
     "content=\"isbn:123-456-789\" ```.",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    hasAdultConsideration: Optional[Union[List[Union[AdultOrientedEnumeration, str]], AdultOrientedEnumeration, str]] = Field(
        default=None,
        description="Used to tag an item to be intended or suitable for consumption or use by adults only.",
    )
    purchaseDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date the item, e.g. vehicle, was purchased by the current owner.",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    logo: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An associated logo.",
    )
    countryOfLastProcessing: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The place where the item (typically [[Product]]) was last processed and tested before"
     "importation.",
    )
    asin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique"
     "identifier assigned by Amazon.com and its partners for product identification within"
     "the Amazon organization (summary from [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s"
     "article). Note also that this is a definition for how to include ASINs in Schema.org data,"
     "and not a definition of ASINs in general - see documentation from Amazon for authoritative"
     "details. ASINs are most commonly encoded as text strings, but the [asin] property supports"
     "URL/URI as potential values too.",
    )
    gtin8: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-8 code of the product, or the product to which the offer refers. This code is also"
     "known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    releaseDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The release date of a product or product model. This can be used to distinguish the exact"
     "variant of a product.",
    )
    brand: Optional[Union[List[Union[Brand, Organization, str]], Brand, Organization, str]] = Field(
        default=None,
        description="The brand(s) associated with a product or service, or the brand(s) maintained by an organization"
     "or business person.",
    )
    productionDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date of production of the item, e.g. vehicle.",
    )
    inProductGroupWithID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the [[productGroupID]] for a [[ProductGroup]] that this product [[isVariantOf]].",
    )
    size: Optional[Union[List[Union[str, Text, QuantitativeValue, DefinedTerm, SizeSpecification]], str, Text, QuantitativeValue, DefinedTerm, SizeSpecification]] = Field(
        default=None,
        description="A standardized size of a product or creative work, specified either through a simple"
     "textual string (for example 'XL', '32Wx34L'), a QuantitativeValue with a unitCode,"
     "or a comprehensive and structured [[SizeSpecification]]; in other cases, the [[width]],"
     "[[height]], [[depth]] and [[weight]] properties may be more applicable.",
    )
    mpn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    color: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The color of the product.",
    )
    material: Optional[Union[List[Union[AnyUrl, URL, str, Text, Product]], AnyUrl, URL, str, Text, Product]] = Field(
        default=None,
        description="A material that something is made from, e.g. leather, wool, cotton, paper.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    gtin13: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent"
     "to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into"
     "a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    sku: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service,"
     "or the product to which the offer refers.",
    )
    



class ProductModel(Product):
    """A datasheet or vendor specification of a product (in the sense of a prototypical description).

    See: https://schema.org/ProductModel
    Model depth: 3
    """
    type_: str = Field(default="ProductModel", alias='@type', const=True)
    isVariantOf: Optional[Union[List[Union[ProductModel, ProductGroup, str]], ProductModel, ProductGroup, str]] = Field(
        default=None,
        description="Indicates the kind of product that this is a variant of. In the case of [[ProductModel]],"
     "this is a pointer (from a ProductModel) to a base product from which this product is a variant."
     "It is safe to infer that the variant inherits all product features from the base model,"
     "unless defined locally. This is not transitive. In the case of a [[ProductGroup]], the"
     "group description also serves as a template, representing a set of Products that vary"
     "on explicitly defined, specific dimensions only (so it defines both a set of variants,"
     "as well as which values distinguish amongst those variants). When used with [[ProductGroup]],"
     "this property can apply to any [[Product]] included in the group.",
    )
    successorOf: Optional[Union[List[Union[ProductModel, str]], ProductModel, str]] = Field(
        default=None,
        description="A pointer from a newer variant of a product to its previous, often discontinued predecessor.",
    )
    predecessorOf: Optional[Union[List[Union[ProductModel, str]], ProductModel, str]] = Field(
        default=None,
        description="A pointer from a previous, often discontinued variant of the product to its newer variant.",
    )
    



class MedicalTrialDesign(MedicalEnumeration):
    """Design models for medical trials. Enumerated type.

    See: https://schema.org/MedicalTrialDesign
    Model depth: 5
    """
    type_: str = Field(default="MedicalTrialDesign", alias='@type', const=True)
    



class PlaceboControlledTrial(MedicalTrialDesign):
    """A placebo-controlled trial design.

    See: https://schema.org/PlaceboControlledTrial
    Model depth: 6
    """
    type_: str = Field(default="PlaceboControlledTrial", alias='@type', const=True)
    



class Action(Thing):
    """An action performed by a direct agent and indirect participants upon a direct object."
     "Optionally happens at a location with the help of an inanimate instrument. The execution"
     "of the action may produce a result. Specific action sub-type documentation specifies"
     "the exact expectation of each argument/role. See also [blog post](http://blog.schema.org/2014/04/announcing-schemaorg-actions.html)"
     "and [Actions overview document](https://schema.org/docs/actions.html).

    See: https://schema.org/Action
    Model depth: 2
    """
    type_: str = Field(default="Action", alias='@type', const=True)
    endTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to end. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from January to *December*. For media, including"
     "audio and video, it's the time offset of the end of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    startTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to start. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from *January* to December. For media, including"
     "audio and video, it's the time offset of the start of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    result: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The result produced in the action. E.g. John wrote *a book*.",
    )
    actionStatus: Optional[Union[List[Union[ActionStatusType, str]], ActionStatusType, str]] = Field(
        default=None,
        description="Indicates the current disposition of the Action.",
    )
    agent: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The direct performer or driver of the action (animate or inanimate). E.g. *John* wrote"
     "a book.",
    )
    instrument: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The object that helped the agent perform the action. E.g. John wrote a book with *a pen*.",
    )
    object: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The object upon which the action is carried out, whose state is kept intact or changed."
     "Also known as the semantic roles patient, affected or undergoer (which change their"
     "state) or theme (which doesn't). E.g. John read *a book*.",
    )
    error: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="For failed actions, more information on the cause of the failure.",
    )
    target: Optional[Union[List[Union[AnyUrl, URL, EntryPoint, str]], AnyUrl, URL, EntryPoint, str]] = Field(
        default=None,
        description="Indicates a target EntryPoint, or url, for an Action.",
    )
    location: Optional[Union[List[Union[str, Text, Place, PostalAddress, VirtualLocation]], str, Text, Place, PostalAddress, VirtualLocation]] = Field(
        default=None,
        description="The location of, for example, where an event is happening, where an organization is located,"
     "or where an action takes place.",
    )
    participant: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Other co-agents that participated in the action indirectly. E.g. John wrote a book with"
     "*Steve*.",
    )
    



class CreateAction(Action):
    """The act of deliberately creating/producing/generating/building a result out of the"
     "agent.

    See: https://schema.org/CreateAction
    Model depth: 3
    """
    type_: str = Field(default="CreateAction", alias='@type', const=True)
    



class PhotographAction(CreateAction):
    """The act of capturing still images of objects using a camera.

    See: https://schema.org/PhotographAction
    Model depth: 4
    """
    type_: str = Field(default="PhotographAction", alias='@type', const=True)
    



class USNonprofitType(NonprofitType):
    """USNonprofitType: Non-profit organization type originating from the United States.

    See: https://schema.org/USNonprofitType
    Model depth: 5
    """
    type_: str = Field(default="USNonprofitType", alias='@type', const=True)
    



class Nonprofit501c4(USNonprofitType):
    """Nonprofit501c4: Non-profit type referring to Civic Leagues, Social Welfare Organizations,"
     "and Local Associations of Employees.

    See: https://schema.org/Nonprofit501c4
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c4", alias='@type', const=True)
    



class MeasurementTypeEnumeration(Enumeration):
    """Enumeration of common measurement types (or dimensions), for example \"chest\" for"
     "a person, \"inseam\" for pants, \"gauge\" for screws, or \"wheel\" for bicycles.

    See: https://schema.org/MeasurementTypeEnumeration
    Model depth: 4
    """
    type_: str = Field(default="MeasurementTypeEnumeration", alias='@type', const=True)
    



class BodyMeasurementTypeEnumeration(MeasurementTypeEnumeration):
    """Enumerates types (or dimensions) of a person's body measurements, for example for fitting"
     "of clothes.

    See: https://schema.org/BodyMeasurementTypeEnumeration
    Model depth: 5
    """
    type_: str = Field(default="BodyMeasurementTypeEnumeration", alias='@type', const=True)
    



class BodyMeasurementWeight(BodyMeasurementTypeEnumeration):
    """Body weight. Used, for example, to measure pantyhose.

    See: https://schema.org/BodyMeasurementWeight
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementWeight", alias='@type', const=True)
    



class Reservation(Intangible):
    """Describes a reservation for travel, dining or an event. Some reservations require tickets."
     "Note: This type is for information about actual reservations, e.g. in confirmation"
     "emails or HTML pages with individual confirmations of reservations. For offers of tickets,"
     "restaurant reservations, flights, or rental cars, use [[Offer]].

    See: https://schema.org/Reservation
    Model depth: 3
    """
    type_: str = Field(default="Reservation", alias='@type', const=True)
    broker: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity that arranges for an exchange between a buyer and a seller. In most cases a broker"
     "never acquires or releases ownership of a product or service involved in an exchange."
     "If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms"
     "are preferred.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    modifiedTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date and time the reservation was modified.",
    )
    programMembershipUsed: Optional[Union[List[Union[ProgramMembership, str]], ProgramMembership, str]] = Field(
        default=None,
        description="Any membership in a frequent flyer, hotel loyalty program, etc. being applied to the"
     "reservation.",
    )
    bookingAgent: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="'bookingAgent' is an out-dated term indicating a 'broker' that serves as a booking agent.",
    )
    totalPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, PriceSpecification]], StrictInt, StrictFloat, Number, str, Text, PriceSpecification]] = Field(
        default=None,
        description="The total price for the reservation or ticket, including applicable taxes, shipping,"
     "etc. Usage guidelines: * Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030)"
     "to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols. * Use"
     "'.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid"
     "using these symbols as a readability separator.",
    )
    reservedTicket: Optional[Union[List[Union[Ticket, str]], Ticket, str]] = Field(
        default=None,
        description="A ticket associated with the reservation.",
    )
    reservationId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A unique identifier for the reservation.",
    )
    reservationFor: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The thing -- flight, event, restaurant, etc. being reserved.",
    )
    underName: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization the reservation or ticket is for.",
    )
    bookingTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date and time the reservation was booked.",
    )
    reservationStatus: Optional[Union[List[Union[ReservationStatusType, str]], ReservationStatusType, str]] = Field(
        default=None,
        description="The current status of the reservation.",
    )
    priceCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the price, or a price component when attached to [[PriceSpecification]]"
     "and its subtypes. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    



class FlightReservation(Reservation):
    """A reservation for air travel. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations."
     "For offers of tickets, use [[Offer]].

    See: https://schema.org/FlightReservation
    Model depth: 4
    """
    type_: str = Field(default="FlightReservation", alias='@type', const=True)
    securityScreening: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of security screening the passenger is subject to.",
    )
    passengerSequenceNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The passenger's sequence number as assigned by the airline.",
    )
    passengerPriorityStatus: Optional[Union[List[Union[str, Text, QualitativeValue]], str, Text, QualitativeValue]] = Field(
        default=None,
        description="The priority status assigned to a passenger for security or boarding (e.g. FastTrack"
     "or Priority).",
    )
    boardingGroup: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The airline-specific indicator of boarding order / preference.",
    )
    



class Grant(Intangible):
    """A grant, typically financial or otherwise quantifiable, of resources. Typically a"
     "[[funder]] sponsors some [[MonetaryAmount]] to an [[Organization]] or [[Person]],"
     "sometimes not necessarily via a dedicated or long-lived [[Project]], resulting in"
     "one or more outputs, or [[fundedItem]]s. For financial sponsorship, indicate the [[funder]]"
     "of a [[MonetaryGrant]]. For non-financial support, indicate [[sponsor]] of [[Grant]]s"
     "of resources (e.g. office space). Grants support activities directed towards some"
     "agreed collective goals, often but not always organized as [[Project]]s. Long-lived"
     "projects are sometimes sponsored by a variety of grants over time, but it is also common"
     "for a project to be associated with a single grant. The amount of a [[Grant]] is represented"
     "using [[amount]] as a [[MonetaryAmount]].

    See: https://schema.org/Grant
    Model depth: 3
    """
    type_: str = Field(default="Grant", alias='@type', const=True)
    fundedItem: Optional[Union[List[Union[BioChemEntity, Event, Product, Organization, Person, CreativeWork, MedicalEntity, str]], BioChemEntity, Event, Product, Organization, Person, CreativeWork, MedicalEntity, str]] = Field(
        default=None,
        description="Indicates something directly or indirectly funded or sponsored through a [[Grant]]."
     "See also [[ownershipFundingInfo]].",
    )
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    



class MonetaryGrant(Grant):
    """A monetary grant.

    See: https://schema.org/MonetaryGrant
    Model depth: 4
    """
    type_: str = Field(default="MonetaryGrant", alias='@type', const=True)
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    amount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money.",
    )
    



class MedicalIndication(MedicalEntity):
    """A condition or factor that indicates use of a medical therapy, including signs, symptoms,"
     "risk factors, anatomical states, etc.

    See: https://schema.org/MedicalIndication
    Model depth: 3
    """
    type_: str = Field(default="MedicalIndication", alias='@type', const=True)
    



class TreatmentIndication(MedicalIndication):
    """An indication for treating an underlying condition, symptom, etc.

    See: https://schema.org/TreatmentIndication
    Model depth: 4
    """
    type_: str = Field(default="TreatmentIndication", alias='@type', const=True)
    



class Cemetery(CivicStructure):
    """A graveyard.

    See: https://schema.org/Cemetery
    Model depth: 4
    """
    type_: str = Field(default="Cemetery", alias='@type', const=True)
    



class EnergyEfficiencyEnumeration(Enumeration):
    """Enumerates energy efficiency levels (also known as \"classes\" or \"ratings\") and"
     "certifications that are part of several international energy efficiency standards.

    See: https://schema.org/EnergyEfficiencyEnumeration
    Model depth: 4
    """
    type_: str = Field(default="EnergyEfficiencyEnumeration", alias='@type', const=True)
    



class EUEnergyEfficiencyEnumeration(EnergyEfficiencyEnumeration):
    """Enumerates the EU energy efficiency classes A-G as well as A+, A++, and A+++ as defined"
     "in EU directive 2017/1369.

    See: https://schema.org/EUEnergyEfficiencyEnumeration
    Model depth: 5
    """
    type_: str = Field(default="EUEnergyEfficiencyEnumeration", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryA3Plus(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class A+++ as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryA3Plus
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryA3Plus", alias='@type', const=True)
    



class DigitalPlatformEnumeration(Enumeration):
    """Enumerates some common technology platforms, for use with properties such as [[actionPlatform]]."
     "It is not supposed to be comprehensive - when a suitable code is not enumerated here, textual"
     "or URL values can be used instead. These codes are at a fairly high level and do not deal"
     "with versioning and other nuance. Additional codes can be suggested [in github](https://github.com/schemaorg/schemaorg/issues/3057).

    See: https://schema.org/DigitalPlatformEnumeration
    Model depth: 4
    """
    type_: str = Field(default="DigitalPlatformEnumeration", alias='@type', const=True)
    



class MedicalBusiness(LocalBusiness):
    """A particular physical or virtual business of an organization for medical purposes."
     "Examples of MedicalBusiness include different businesses run by health professionals.

    See: https://schema.org/MedicalBusiness
    Model depth: 4
    """
    type_: str = Field(default="MedicalBusiness", alias='@type', const=True)
    



class Specialty(Enumeration):
    """Any branch of a field in which people typically develop specific expertise, usually"
     "after significant study, time, and effort.

    See: https://schema.org/Specialty
    Model depth: 4
    """
    type_: str = Field(default="Specialty", alias='@type', const=True)
    



class MedicalSpecialty(Specialty, MedicalEnumeration):
    """Any specific branch of medical science or practice. Medical specialities include clinical"
     "specialties that pertain to particular organ systems and their respective disease"
     "states, as well as allied health specialties. Enumerated type.

    See: https://schema.org/MedicalSpecialty
    Model depth: 5
    """
    type_: str = Field(default="MedicalSpecialty", alias='@type', const=True)
    



class PublicHealth(MedicalSpecialty, MedicalBusiness):
    """Branch of medicine that pertains to the health services to improve and protect community"
     "health, especially epidemiology, sanitation, immunization, and preventive medicine.

    See: https://schema.org/PublicHealth
    Model depth: 5
    """
    type_: str = Field(default="PublicHealth", alias='@type', const=True)
    



class WearableSizeSystemEN13402(WearableSizeSystemEnumeration):
    """EN 13402 (joint European standard for size labelling of clothes).

    See: https://schema.org/WearableSizeSystemEN13402
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemEN13402", alias='@type', const=True)
    



class InteractAction(Action):
    """The act of interacting with another person or organization.

    See: https://schema.org/InteractAction
    Model depth: 3
    """
    type_: str = Field(default="InteractAction", alias='@type', const=True)
    



class CommunicateAction(InteractAction):
    """The act of conveying information to another person via a communication medium (instrument)"
     "such as speech, email, or telephone conversation.

    See: https://schema.org/CommunicateAction
    Model depth: 4
    """
    type_: str = Field(default="CommunicateAction", alias='@type', const=True)
    about: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The subject matter of the content.",
    )
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    language: Optional[Union[List[Union[Language, str]], Language, str]] = Field(
        default=None,
        description="A sub property of instrument. The language used on this action.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    



class CheckInAction(CommunicateAction):
    """The act of an agent communicating (service provider, social media, etc) their arrival"
     "by registering/confirming for a previously reserved service (e.g. flight check-in)"
     "or at a place (e.g. hotel), possibly resulting in a result (boarding pass, etc). Related"
     "actions: * [[CheckOutAction]]: The antonym of CheckInAction. * [[ArriveAction]]:"
     "Unlike ArriveAction, CheckInAction implies that the agent is informing/confirming"
     "the start of a previously reserved service. * [[ConfirmAction]]: Unlike ConfirmAction,"
     "CheckInAction implies that the agent is informing/confirming the *start* of a previously"
     "reserved service rather than its validity/existence.

    See: https://schema.org/CheckInAction
    Model depth: 5
    """
    type_: str = Field(default="CheckInAction", alias='@type', const=True)
    



class PriceComponentTypeEnumeration(Enumeration):
    """Enumerates different price components that together make up the total price for an offered"
     "product.

    See: https://schema.org/PriceComponentTypeEnumeration
    Model depth: 4
    """
    type_: str = Field(default="PriceComponentTypeEnumeration", alias='@type', const=True)
    



class DistanceFee(PriceComponentTypeEnumeration):
    """Represents the distance fee (e.g., price per km or mile) part of the total price for an"
     "offered product, for example a car rental.

    See: https://schema.org/DistanceFee
    Model depth: 5
    """
    type_: str = Field(default="DistanceFee", alias='@type', const=True)
    



class WearableSizeGroupExtraShort(WearableSizeGroupEnumeration):
    """Size group \"Extra Short\" for wearables.

    See: https://schema.org/WearableSizeGroupExtraShort
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupExtraShort", alias='@type', const=True)
    



class EventAttendanceModeEnumeration(Enumeration):
    """An EventAttendanceModeEnumeration value is one of potentially several modes of organising"
     "an event, relating to whether it is online or offline.

    See: https://schema.org/EventAttendanceModeEnumeration
    Model depth: 4
    """
    type_: str = Field(default="EventAttendanceModeEnumeration", alias='@type', const=True)
    



class WearableSizeSystemJP(WearableSizeSystemEnumeration):
    """Japanese size system for wearables.

    See: https://schema.org/WearableSizeSystemJP
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemJP", alias='@type', const=True)
    



class StatusEnumeration(Enumeration):
    """Lists or enumerations dealing with status types.

    See: https://schema.org/StatusEnumeration
    Model depth: 4
    """
    type_: str = Field(default="StatusEnumeration", alias='@type', const=True)
    



class OrderStatus(StatusEnumeration):
    """Enumerated status values for Order.

    See: https://schema.org/OrderStatus
    Model depth: 5
    """
    type_: str = Field(default="OrderStatus", alias='@type', const=True)
    



class OrderCancelled(OrderStatus):
    """OrderStatus representing cancellation of an order.

    See: https://schema.org/OrderCancelled
    Model depth: 6
    """
    type_: str = Field(default="OrderCancelled", alias='@type', const=True)
    



class PhysicalActivityCategory(Enumeration):
    """Categories of physical activity, organized by physiologic classification.

    See: https://schema.org/PhysicalActivityCategory
    Model depth: 4
    """
    type_: str = Field(default="PhysicalActivityCategory", alias='@type', const=True)
    



class StrengthTraining(PhysicalActivityCategory):
    """Physical activity that is engaged in to improve muscle and bone strength. Also referred"
     "to as resistance training.

    See: https://schema.org/StrengthTraining
    Model depth: 5
    """
    type_: str = Field(default="StrengthTraining", alias='@type', const=True)
    



class FoodEstablishmentReservation(Reservation):
    """A reservation to dine at a food-related business. Note: This type is for information"
     "about actual reservations, e.g. in confirmation emails or HTML pages with individual"
     "confirmations of reservations.

    See: https://schema.org/FoodEstablishmentReservation
    Model depth: 4
    """
    type_: str = Field(default="FoodEstablishmentReservation", alias='@type', const=True)
    endTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to end. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from January to *December*. For media, including"
     "audio and video, it's the time offset of the end of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    startTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to start. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from *January* to December. For media, including"
     "audio and video, it's the time offset of the start of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    partySize: Optional[Union[List[Union[int, Integer, QuantitativeValue, str]], int, Integer, QuantitativeValue, str]] = Field(
        default=None,
        description="Number of people the reservation should accommodate.",
    )
    



class VisualArtwork(CreativeWork):
    """A work of art that is primarily visual in character.

    See: https://schema.org/VisualArtwork
    Model depth: 3
    """
    type_: str = Field(default="VisualArtwork", alias='@type', const=True)
    inker: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who traces over the pencil drawings in ink after pencils are complete.",
    )
    width: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The width of the item.",
    )
    letterer: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds lettering, including speech balloons and sound effects, to"
     "artwork.",
    )
    depth: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The depth of the item.",
    )
    penciler: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who draws the primary narrative artwork.",
    )
    artist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The primary artist for a work in a medium other than pencils or digital line art--for example,"
     "if the primary artwork is done in watercolors or digital paints.",
    )
    height: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The height of the item.",
    )
    colorist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds color to inked drawings.",
    )
    artMedium: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The material used. (E.g. Oil, Watercolour, Acrylic, Linoprint, Marble, Cyanotype,"
     "Digital, Lithograph, DryPoint, Intaglio, Pastel, Woodcut, Pencil, Mixed Media, etc.)",
    )
    surface: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A material used as a surface in some artwork, e.g. Canvas, Paper, Wood, Board, etc.",
    )
    artform: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="e.g. Painting, Drawing, Sculpture, Print, Photograph, Assemblage, Collage, etc.",
    )
    artEdition: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The number of copies when multiple copies of a piece of artwork are produced - e.g. for"
     "a limited edition of 20 prints, 'artEdition' refers to the total number of copies (in"
     "this example \"20\").",
    )
    artworkSurface: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The supporting materials for the artwork, e.g. Canvas, Paper, Wood, Board, etc.",
    )
    



class CoverArt(VisualArtwork):
    """The artwork on the outer surface of a CreativeWork.

    See: https://schema.org/CoverArt
    Model depth: 4
    """
    type_: str = Field(default="CoverArt", alias='@type', const=True)
    



class MedicineSystem(MedicalEnumeration):
    """Systems of medical practice.

    See: https://schema.org/MedicineSystem
    Model depth: 5
    """
    type_: str = Field(default="MedicineSystem", alias='@type', const=True)
    



class Osteopathic(MedicineSystem):
    """A system of medicine focused on promoting the body's innate ability to heal itself.

    See: https://schema.org/Osteopathic
    Model depth: 6
    """
    type_: str = Field(default="Osteopathic", alias='@type', const=True)
    



class MusicReleaseFormatType(Enumeration):
    """Format of this release (the type of recording media used, i.e. compact disc, digital"
     "media, LP, etc.).

    See: https://schema.org/MusicReleaseFormatType
    Model depth: 4
    """
    type_: str = Field(default="MusicReleaseFormatType", alias='@type', const=True)
    



class DigitalAudioTapeFormat(MusicReleaseFormatType):
    """DigitalAudioTapeFormat.

    See: https://schema.org/DigitalAudioTapeFormat
    Model depth: 5
    """
    type_: str = Field(default="DigitalAudioTapeFormat", alias='@type', const=True)
    



class HealthInsurancePlan(Intangible):
    """A US-style health insurance plan, including PPOs, EPOs, and HMOs.

    See: https://schema.org/HealthInsurancePlan
    Model depth: 3
    """
    type_: str = Field(default="HealthInsurancePlan", alias='@type', const=True)
    benefitsSummaryUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The URL that goes directly to the summary of benefits and coverage for the specific standard"
     "plan or plan variation.",
    )
    healthPlanId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The 14-character, HIOS-generated Plan ID number. (Plan IDs must be unique, even across"
     "different markets.)",
    )
    healthPlanMarketingUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The URL that goes directly to the plan brochure for the specific standard plan or plan"
     "variation.",
    )
    includesHealthPlanFormulary: Optional[Union[List[Union[HealthPlanFormulary, str]], HealthPlanFormulary, str]] = Field(
        default=None,
        description="Formularies covered by this plan.",
    )
    contactPoint: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="A contact point for a person or organization.",
    )
    healthPlanDrugTier: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The tier(s) of drugs offered by this formulary or insurance plan.",
    )
    healthPlanDrugOption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="TODO.",
    )
    includesHealthPlanNetwork: Optional[Union[List[Union[HealthPlanNetwork, str]], HealthPlanNetwork, str]] = Field(
        default=None,
        description="Networks covered by this plan.",
    )
    usesHealthPlanIdStandard: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The standard for interpreting the Plan ID. The preferred is \"HIOS\". See the Centers"
     "for Medicare & Medicaid Services for more details.",
    )
    



class SportsOrganization(Organization):
    """Represents the collection of all sports organizations, including sports teams, governing"
     "bodies, and sports associations.

    See: https://schema.org/SportsOrganization
    Model depth: 3
    """
    type_: str = Field(default="SportsOrganization", alias='@type', const=True)
    sport: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A type of sport (e.g. Baseball).",
    )
    



class AutomotiveBusiness(LocalBusiness):
    """Car repair, sales, or parts.

    See: https://schema.org/AutomotiveBusiness
    Model depth: 4
    """
    type_: str = Field(default="AutomotiveBusiness", alias='@type', const=True)
    



class AutoRepair(AutomotiveBusiness):
    """Car repair business.

    See: https://schema.org/AutoRepair
    Model depth: 5
    """
    type_: str = Field(default="AutoRepair", alias='@type', const=True)
    



class OnlineBusiness(Organization):
    """A particular online business, either standalone or the online part of a broader organization."
     "Examples include an eCommerce site, an online travel booking site, an online learning"
     "site, an online logistics and shipping provider, an online (virtual) doctor, etc.

    See: https://schema.org/OnlineBusiness
    Model depth: 3
    """
    type_: str = Field(default="OnlineBusiness", alias='@type', const=True)
    



class MedicalStudyStatus(MedicalEnumeration):
    """The status of a medical study. Enumerated type.

    See: https://schema.org/MedicalStudyStatus
    Model depth: 5
    """
    type_: str = Field(default="MedicalStudyStatus", alias='@type', const=True)
    



class ResultsAvailable(MedicalStudyStatus):
    """Results are available.

    See: https://schema.org/ResultsAvailable
    Model depth: 6
    """
    type_: str = Field(default="ResultsAvailable", alias='@type', const=True)
    



class Suite(Accommodation):
    """A suite in a hotel or other public accommodation, denotes a class of luxury accommodations,"
     "the key feature of which is multiple rooms (source: Wikipedia, the free encyclopedia,"
     "see <a href=\"http://en.wikipedia.org/wiki/Suite_(hotel)\">http://en.wikipedia.org/wiki/Suite_(hotel)</a>)."
     "<br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated document on the"
     "use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Suite
    Model depth: 4
    """
    type_: str = Field(default="Suite", alias='@type', const=True)
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    bed: Optional[Union[List[Union[str, Text, BedType, BedDetails]], str, Text, BedType, BedDetails]] = Field(
        default=None,
        description="The type of bed or beds included in the accommodation. For the single case of just one bed"
     "of a certain type, you use bed directly with a text. If you want to indicate the quantity"
     "of a certain kind of bed, use an instance of BedDetails. For more detailed information,"
     "use the amenityFeature property.",
    )
    occupancy: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The allowed total occupancy for the accommodation in persons (including infants etc)."
     "For individual accommodations, this is not necessarily the legal maximum but defines"
     "the permitted usage as per the contractual agreement (e.g. a double room used by a single"
     "person). Typical unit code(s): C62 for person",
    )
    



class EUEnergyEfficiencyCategoryG(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class G as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryG
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryG", alias='@type', const=True)
    



class DeliveryMethod(Enumeration):
    """A delivery method is a standardized procedure for transferring the product or service"
     "to the destination of fulfillment chosen by the customer. Delivery methods are characterized"
     "by the means of transportation used, and by the organization or group that is the contracting"
     "party for the sending organization or person. Commonly used values: * http://purl.org/goodrelations/v1#DeliveryModeDirectDownload"
     "* http://purl.org/goodrelations/v1#DeliveryModeFreight * http://purl.org/goodrelations/v1#DeliveryModeMail"
     "* http://purl.org/goodrelations/v1#DeliveryModeOwnFleet * http://purl.org/goodrelations/v1#DeliveryModePickUp"
     "* http://purl.org/goodrelations/v1#DHL * http://purl.org/goodrelations/v1#FederalExpress"
     "* http://purl.org/goodrelations/v1#UPS

    See: https://schema.org/DeliveryMethod
    Model depth: 4
    """
    type_: str = Field(default="DeliveryMethod", alias='@type', const=True)
    



class ParcelService(DeliveryMethod):
    """A private parcel service as the delivery mode available for a certain offer. Commonly"
     "used values: * http://purl.org/goodrelations/v1#DHL * http://purl.org/goodrelations/v1#FederalExpress"
     "* http://purl.org/goodrelations/v1#UPS

    See: https://schema.org/ParcelService
    Model depth: 5
    """
    type_: str = Field(default="ParcelService", alias='@type', const=True)
    



class TradeAction(Action):
    """The act of participating in an exchange of goods and services for monetary compensation."
     "An agent trades an object, product or service with a participant in exchange for a one"
     "time or periodic payment.

    See: https://schema.org/TradeAction
    Model depth: 3
    """
    type_: str = Field(default="TradeAction", alias='@type', const=True)
    price: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The offer price of a product, or of a price component when attached to PriceSpecification"
     "and its subtypes. Usage guidelines: * Use the [[priceCurrency]] property (with standard"
     "formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\") instead of including [ambiguous"
     "symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign)"
     "such as '$' in the value. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate"
     "a decimal point. Avoid using these symbols as a readability separator. * Note that both"
     "[RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute)"
     "and Microdata syntax allow the use of a \"content=\" attribute for publishing simple"
     "machine-readable values alongside more human-friendly formatting. * Use values from"
     "0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols.",
    )
    priceSpecification: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="One or more detailed price specifications, indicating the unit price and delivery or"
     "payment charges.",
    )
    priceCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the price, or a price component when attached to [[PriceSpecification]]"
     "and its subtypes. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    



class TipAction(TradeAction):
    """The act of giving money voluntarily to a beneficiary in recognition of services rendered.

    See: https://schema.org/TipAction
    Model depth: 4
    """
    type_: str = Field(default="TipAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class LearningResource(CreativeWork):
    """The LearningResource type can be used to indicate [[CreativeWork]]s (whether physical"
     "or digital) that have a particular and explicit orientation towards learning, education,"
     "skill acquisition, and other educational purposes. [[LearningResource]] is expected"
     "to be used as an addition to a primary type such as [[Book]], [[VideoObject]], [[Product]]"
     "etc. [[EducationEvent]] serves a similar purpose for event-like things (e.g. a [[Trip]])."
     "A [[LearningResource]] may be created as a result of an [[EducationEvent]], for example"
     "by recording one.

    See: https://schema.org/LearningResource
    Model depth: 3
    """
    type_: str = Field(default="LearningResource", alias='@type', const=True)
    educationalLevel: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="The level in terms of progression through an educational or training context. Examples"
     "of educational levels include 'beginner', 'intermediate' or 'advanced', and formal"
     "sets of level indicators.",
    )
    competencyRequired: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Knowledge, skill, ability or personal attribute that must be demonstrated by a person"
     "or other entity in order to do something such as earn an Educational Occupational Credential"
     "or understand a LearningResource.",
    )
    educationalUse: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The purpose of a work in the context of education; for example, 'assignment', 'group"
     "work'.",
    )
    educationalAlignment: Optional[Union[List[Union[AlignmentObject, str]], AlignmentObject, str]] = Field(
        default=None,
        description="An alignment to an established educational framework. This property should not be used"
     "where the nature of the alignment can be described using a simple property, for example"
     "to express that a resource [[teaches]] or [[assesses]] a competency.",
    )
    assesses: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to assess the competency or learning outcome defined"
     "by the referenced term.",
    )
    learningResourceType: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The predominant type or kind characterizing the learning resource. For example, 'presentation',"
     "'handout'.",
    )
    teaches: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The item being described is intended to help a person learn the competency or learning"
     "outcome defined by the referenced term.",
    )
    



class MedicalAudienceType(MedicalEnumeration):
    """Target audiences types for medical web pages. Enumerated type.

    See: https://schema.org/MedicalAudienceType
    Model depth: 5
    """
    type_: str = Field(default="MedicalAudienceType", alias='@type', const=True)
    



class LodgingBusiness(LocalBusiness):
    """A lodging business, such as a motel, hotel, or inn.

    See: https://schema.org/LodgingBusiness
    Model depth: 4
    """
    type_: str = Field(default="LodgingBusiness", alias='@type', const=True)
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    availableLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="A language someone may use with or at the item, service or place. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[inLanguage]].",
    )
    amenityFeature: Optional[Union[List[Union[LocationFeatureSpecification, str]], LocationFeatureSpecification, str]] = Field(
        default=None,
        description="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic"
     "property does not make a statement about whether the feature is included in an offer for"
     "the main accommodation or available at extra costs.",
    )
    checkoutTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The latest someone may check out of a lodging establishment.",
    )
    starRating: Optional[Union[List[Union[Rating, str]], Rating, str]] = Field(
        default=None,
        description="An official rating for a lodging business or food establishment, e.g. from national"
     "associations or standards bodies. Use the author property to indicate the rating organization,"
     "e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    petsAllowed: Optional[Union[List[Union[str, Text, StrictBool, Boolean]], str, Text, StrictBool, Boolean]] = Field(
        default=None,
        description="Indicates whether pets are allowed to enter the accommodation or lodging business."
     "More detailed information can be put in a text value.",
    )
    checkinTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The earliest someone may check into a lodging establishment.",
    )
    



class BedAndBreakfast(LodgingBusiness):
    """Bed and breakfast. <br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated"
     "document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/BedAndBreakfast
    Model depth: 5
    """
    type_: str = Field(default="BedAndBreakfast", alias='@type', const=True)
    



class EngineSpecification(StructuredValue):
    """Information about the engine of the vehicle. A vehicle can have multiple engines represented"
     "by multiple engine specification entities.

    See: https://schema.org/EngineSpecification
    Model depth: 4
    """
    type_: str = Field(default="EngineSpecification", alias='@type', const=True)
    enginePower: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The power of the vehicle's engine. Typical unit code(s): KWT for kilowatt, BHP for brake"
     "horsepower, N12 for metric horsepower (PS, with 1 PS = 735,49875 W) * Note 1: There are"
     "many different ways of measuring an engine's power. For an overview, see [http://en.wikipedia.org/wiki/Horsepower#Engine\_power\_test\_codes](http://en.wikipedia.org/wiki/Horsepower#Engine_power_test_codes)."
     "* Note 2: You can link to information about how the given value has been determined using"
     "the [[valueReference]] property. * Note 3: You can use [[minValue]] and [[maxValue]]"
     "to indicate ranges.",
    )
    torque: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The torque (turning force) of the vehicle's engine. Typical unit code(s): NU for newton"
     "metre (N m), F17 for pound-force per foot, or F48 for pound-force per inch * Note 1: You"
     "can link to information about how the given value has been determined (e.g. reference"
     "RPM) using the [[valueReference]] property. * Note 2: You can use [[minValue]] and [[maxValue]]"
     "to indicate ranges.",
    )
    engineType: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="The type of engine or engines powering the vehicle.",
    )
    fuelType: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only"
     "one engine, this property can be attached directly to the vehicle.",
    )
    engineDisplacement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The volume swept by all of the pistons inside the cylinders of an internal combustion"
     "engine in a single movement. Typical unit code(s): CMQ for cubic centimeter, LTR for"
     "liters, INQ for cubic inches * Note 1: You can link to information about how the given value"
     "has been determined using the [[valueReference]] property. * Note 2: You can use [[minValue]]"
     "and [[maxValue]] to indicate ranges.",
    )
    



class Bridge(CivicStructure):
    """A bridge.

    See: https://schema.org/Bridge
    Model depth: 4
    """
    type_: str = Field(default="Bridge", alias='@type', const=True)
    



class OnlineStore(OnlineBusiness):
    """An eCommerce site.

    See: https://schema.org/OnlineStore
    Model depth: 4
    """
    type_: str = Field(default="OnlineStore", alias='@type', const=True)
    



class ReservationStatusType(StatusEnumeration):
    """Enumerated status values for Reservation.

    See: https://schema.org/ReservationStatusType
    Model depth: 5
    """
    type_: str = Field(default="ReservationStatusType", alias='@type', const=True)
    



class ReservationCancelled(ReservationStatusType):
    """The status for a previously confirmed reservation that is now cancelled.

    See: https://schema.org/ReservationCancelled
    Model depth: 6
    """
    type_: str = Field(default="ReservationCancelled", alias='@type', const=True)
    



class Thesis(CreativeWork):
    """A thesis or dissertation document submitted in support of candidature for an academic"
     "degree or professional qualification.

    See: https://schema.org/Thesis
    Model depth: 3
    """
    type_: str = Field(default="Thesis", alias='@type', const=True)
    inSupportOf: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Qualification, candidature, degree, application that Thesis supports.",
    )
    



class BusinessAudience(Audience):
    """A set of characteristics belonging to businesses, e.g. who compose an item's target"
     "audience.

    See: https://schema.org/BusinessAudience
    Model depth: 4
    """
    type_: str = Field(default="BusinessAudience", alias='@type', const=True)
    yearlyRevenue: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The size of the business in annual revenue.",
    )
    numberOfEmployees: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The number of employees in an organization, e.g. business.",
    )
    yearsInOperation: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The age of the business.",
    )
    



class Service(Intangible):
    """A service provided by an organization, e.g. delivery service, print services, etc.

    See: https://schema.org/Service
    Model depth: 3
    """
    type_: str = Field(default="Service", alias='@type', const=True)
    serviceArea: Optional[Union[List[Union[GeoShape, Place, AdministrativeArea, str]], GeoShape, Place, AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area where the service is provided.",
    )
    broker: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity that arranges for an exchange between a buyer and a seller. In most cases a broker"
     "never acquires or releases ownership of a product or service involved in an exchange."
     "If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms"
     "are preferred.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    slogan: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    award: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An award won by or for this item.",
    )
    termsOfService: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Human-readable terms of service documentation.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    availableChannel: Optional[Union[List[Union[ServiceChannel, str]], ServiceChannel, str]] = Field(
        default=None,
        description="A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).",
    )
    isRelatedTo: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="A pointer to another, somehow related product (or multiple products).",
    )
    serviceAudience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="The audience eligible for this service.",
    )
    isSimilarTo: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="A pointer to another, functionally similar product (or multiple products).",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    logo: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An associated logo.",
    )
    providerMobility: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the mobility of a provided service (e.g. 'static', 'dynamic').",
    )
    hoursAvailable: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="The hours during which this service or contact is available.",
    )
    brand: Optional[Union[List[Union[Brand, Organization, str]], Brand, Organization, str]] = Field(
        default=None,
        description="The brand(s) associated with a product or service, or the brand(s) maintained by an organization"
     "or business person.",
    )
    serviceOutput: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The tangible thing generated by the service, e.g. a passport, permit, etc.",
    )
    produces: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The tangible thing generated by the service, e.g. a passport, permit, etc.",
    )
    hasOfferCatalog: Optional[Union[List[Union[OfferCatalog, str]], OfferCatalog, str]] = Field(
        default=None,
        description="Indicates an OfferCatalog listing for this Organization, Person, or Service.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    serviceType: Optional[Union[List[Union[str, Text, GovernmentBenefitsType]], str, Text, GovernmentBenefitsType]] = Field(
        default=None,
        description="The type of service being offered, e.g. veterans' benefits, emergency relief, etc.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    



class FinancialProduct(Service):
    """A product provided to consumers and businesses by financial institutions such as banks,"
     "insurance companies, brokerage firms, consumer finance companies, and investment"
     "companies which comprise the financial services industry.

    See: https://schema.org/FinancialProduct
    Model depth: 4
    """
    type_: str = Field(default="FinancialProduct", alias='@type', const=True)
    annualPercentageRate: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The annual rate that is charged for borrowing (or made by investing), expressed as a single"
     "percentage number that represents the actual yearly cost of funds over the term of a loan."
     "This includes any fees or additional costs associated with the transaction.",
    )
    interestRate: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The interest rate, charged or paid, applicable to the financial product. Note: This"
     "is different from the calculated annualPercentageRate.",
    )
    feesAndCommissionsSpecification: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Description of fees, commissions, and other terms applied either to a class of financial"
     "product, or by a financial service organization.",
    )
    



class InvestmentOrDeposit(FinancialProduct):
    """A type of financial product that typically requires the client to transfer funds to a"
     "financial service in return for potential beneficial financial return.

    See: https://schema.org/InvestmentOrDeposit
    Model depth: 5
    """
    type_: str = Field(default="InvestmentOrDeposit", alias='@type', const=True)
    amount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money.",
    )
    



class BrokerageAccount(InvestmentOrDeposit):
    """An account that allows an investor to deposit funds and place investment orders with"
     "a licensed broker or brokerage firm.

    See: https://schema.org/BrokerageAccount
    Model depth: 6
    """
    type_: str = Field(default="BrokerageAccount", alias='@type', const=True)
    



class FinancialService(LocalBusiness):
    """Financial services business.

    See: https://schema.org/FinancialService
    Model depth: 4
    """
    type_: str = Field(default="FinancialService", alias='@type', const=True)
    feesAndCommissionsSpecification: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Description of fees, commissions, and other terms applied either to a class of financial"
     "product, or by a financial service organization.",
    )
    



class AutomatedTeller(FinancialService):
    """ATM/cash machine.

    See: https://schema.org/AutomatedTeller
    Model depth: 5
    """
    type_: str = Field(default="AutomatedTeller", alias='@type', const=True)
    



class DayOfWeek(Enumeration):
    """The day of the week, e.g. used to specify to which day the opening hours of an OpeningHoursSpecification"
     "refer. Originally, URLs from [GoodRelations](http://purl.org/goodrelations/v1)"
     "were used (for [[Monday]], [[Tuesday]], [[Wednesday]], [[Thursday]], [[Friday]],"
     "[[Saturday]], [[Sunday]] plus a special entry for [[PublicHolidays]]); these have"
     "now been integrated directly into schema.org.

    See: https://schema.org/DayOfWeek
    Model depth: 4
    """
    type_: str = Field(default="DayOfWeek", alias='@type', const=True)
    



class Thursday(DayOfWeek):
    """The day of the week between Wednesday and Friday.

    See: https://schema.org/Thursday
    Model depth: 5
    """
    type_: str = Field(default="Thursday", alias='@type', const=True)
    



class Crematorium(CivicStructure):
    """A crematorium.

    See: https://schema.org/Crematorium
    Model depth: 4
    """
    type_: str = Field(default="Crematorium", alias='@type', const=True)
    



class MedicalConditionStage(MedicalIntangible):
    """A stage of a medical condition, such as 'Stage IIIa'.

    See: https://schema.org/MedicalConditionStage
    Model depth: 4
    """
    type_: str = Field(default="MedicalConditionStage", alias='@type', const=True)
    subStageSuffix: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The substage, e.g. 'a' for Stage IIIa.",
    )
    stageAsNumber: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The stage represented as a number, e.g. 3.",
    )
    



class DietNutrition(MedicalSpecialty, MedicalBusiness):
    """Dietetics and nutrition as a medical specialty.

    See: https://schema.org/DietNutrition
    Model depth: 5
    """
    type_: str = Field(default="DietNutrition", alias='@type', const=True)
    



class Rheumatologic(MedicalSpecialty):
    """A specific branch of medical science that deals with the study and treatment of rheumatic,"
     "autoimmune or joint diseases.

    See: https://schema.org/Rheumatologic
    Model depth: 6
    """
    type_: str = Field(default="Rheumatologic", alias='@type', const=True)
    



class AssessAction(Action):
    """The act of forming one's opinion, reaction or sentiment.

    See: https://schema.org/AssessAction
    Model depth: 3
    """
    type_: str = Field(default="AssessAction", alias='@type', const=True)
    



class EmergencyService(LocalBusiness):
    """An emergency service, such as a fire station or ER.

    See: https://schema.org/EmergencyService
    Model depth: 4
    """
    type_: str = Field(default="EmergencyService", alias='@type', const=True)
    



class FireStation(EmergencyService, CivicStructure):
    """A fire station. With firemen.

    See: https://schema.org/FireStation
    Model depth: 4
    """
    type_: str = Field(default="FireStation", alias='@type', const=True)
    



class Class(Intangible):
    """A class, also often called a 'Type'; equivalent to rdfs:Class.

    See: https://schema.org/Class
    Model depth: 3
    """
    type_: str = Field(default="Class", alias='@type', const=True)
    supersededBy: Optional[Union[List[Union[Enumeration, Class, Property, str]], Enumeration, Class, Property, str]] = Field(
        default=None,
        description="Relates a term (i.e. a property, class or enumeration) to one that supersedes it.",
    )
    



class DataType(Class):
    """The basic data types such as Integers, Strings, etc.

    See: https://schema.org/DataType
    Model depth: 4
    """
    type_: str = Field(default="DataType", alias='@type', const=True)
    



class Text(DataType):
    """Data type: Text.

    See: https://schema.org/Text
    Model depth: 5
    """
    type_: str = Field(default="Text", alias='@type', const=True)
    



class CssSelectorType(Text):
    """Text representing a CSS selector.

    See: https://schema.org/CssSelectorType
    Model depth: 6
    """
    type_: str = Field(default="CssSelectorType", alias='@type', const=True)
    



class LaserDiscFormat(MusicReleaseFormatType):
    """LaserDiscFormat.

    See: https://schema.org/LaserDiscFormat
    Model depth: 5
    """
    type_: str = Field(default="LaserDiscFormat", alias='@type', const=True)
    



class Ticket(Intangible):
    """Used to describe a ticket to an event, a flight, a bus ride, etc.

    See: https://schema.org/Ticket
    Model depth: 3
    """
    type_: str = Field(default="Ticket", alias='@type', const=True)
    ticketNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unique identifier for the ticket.",
    )
    issuedBy: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The organization issuing the ticket or permit.",
    )
    ticketToken: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Reference to an asset (e.g., Barcode, QR code image or PDF) usable for entrance.",
    )
    totalPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, PriceSpecification]], StrictInt, StrictFloat, Number, str, Text, PriceSpecification]] = Field(
        default=None,
        description="The total price for the reservation or ticket, including applicable taxes, shipping,"
     "etc. Usage guidelines: * Use values from 0123456789 (Unicode 'DIGIT ZERO' (U+0030)"
     "to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols. * Use"
     "'.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point. Avoid"
     "using these symbols as a readability separator.",
    )
    underName: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization the reservation or ticket is for.",
    )
    ticketedSeat: Optional[Union[List[Union[Seat, str]], Seat, str]] = Field(
        default=None,
        description="The seat associated with the ticket.",
    )
    priceCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the price, or a price component when attached to [[PriceSpecification]]"
     "and its subtypes. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    dateIssued: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date the ticket was issued.",
    )
    



class OfferItemCondition(Enumeration):
    """A list of possible conditions for the item.

    See: https://schema.org/OfferItemCondition
    Model depth: 4
    """
    type_: str = Field(default="OfferItemCondition", alias='@type', const=True)
    



class UsedCondition(OfferItemCondition):
    """Indicates that the item is used.

    See: https://schema.org/UsedCondition
    Model depth: 5
    """
    type_: str = Field(default="UsedCondition", alias='@type', const=True)
    



class WebPage(CreativeWork):
    """A web page. Every web page is implicitly assumed to be declared to be of type WebPage, so"
     "the various properties about that webpage, such as <code>breadcrumb</code> may be"
     "used. We recommend explicit declaration if these properties are specified, but if they"
     "are found outside of an itemscope, they will be assumed to be about the page.

    See: https://schema.org/WebPage
    Model depth: 3
    """
    type_: str = Field(default="WebPage", alias='@type', const=True)
    significantLink: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="One of the more significant URLs on the page. Typically, these are the non-navigation"
     "links that are clicked on the most.",
    )
    specialty: Optional[Union[List[Union[Specialty, str]], Specialty, str]] = Field(
        default=None,
        description="One of the domain specialities to which this web page's content applies.",
    )
    reviewedBy: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="People or organizations that have reviewed the content on this web page for accuracy"
     "and/or completeness.",
    )
    lastReviewed: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Date on which the content on this web page was last reviewed for accuracy and/or completeness.",
    )
    relatedLink: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A link related to this web page, for example to other related web pages.",
    )
    breadcrumb: Optional[Union[List[Union[str, Text, BreadcrumbList]], str, Text, BreadcrumbList]] = Field(
        default=None,
        description="A set of links that can help a user understand and navigate a website hierarchy.",
    )
    significantLinks: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The most significant URLs on the page. Typically, these are the non-navigation links"
     "that are clicked on the most.",
    )
    mainContentOfPage: Optional[Union[List[Union[WebPageElement, str]], WebPageElement, str]] = Field(
        default=None,
        description="Indicates if this web page element is the main subject of the page.",
    )
    speakable: Optional[Union[List[Union[AnyUrl, URL, SpeakableSpecification, str]], AnyUrl, URL, SpeakableSpecification, str]] = Field(
        default=None,
        description="Indicates sections of a Web page that are particularly 'speakable' in the sense of being"
     "highlighted as being especially appropriate for text-to-speech conversion. Other"
     "sections of a page may also be usefully spoken in particular circumstances; the 'speakable'"
     "property serves to indicate the parts most likely to be generally useful for speech."
     "The *speakable* property can be repeated an arbitrary number of times, with three kinds"
     "of possible 'content-locator' values: 1.) *id-value* URL references - uses *id-value*"
     "of an element in the page being annotated. The simplest use of *speakable* has (potentially"
     "relative) URL values, referencing identified sections of the document concerned."
     "2.) CSS Selectors - addresses content in the annotated page, e.g. via class attribute."
     "Use the [[cssSelector]] property. 3.) XPaths - addresses content via XPaths (assuming"
     "an XML view of the content). Use the [[xpath]] property. For more sophisticated markup"
     "of speakable sections beyond simple ID references, either CSS selectors or XPath expressions"
     "to pick out document section(s) as speakable. For this we define a supporting type, [[SpeakableSpecification]]"
     "which is defined to be a possible value of the *speakable* property.",
    )
    primaryImageOfPage: Optional[Union[List[Union[ImageObject, str]], ImageObject, str]] = Field(
        default=None,
        description="Indicates the main image on the page.",
    )
    



class CollectionPage(WebPage):
    """Web page type: Collection page.

    See: https://schema.org/CollectionPage
    Model depth: 4
    """
    type_: str = Field(default="CollectionPage", alias='@type', const=True)
    



class LifestyleModification(MedicalEntity):
    """A process of care involving exercise, changes to diet, fitness routines, and other lifestyle"
     "changes aimed at improving a health condition.

    See: https://schema.org/LifestyleModification
    Model depth: 3
    """
    type_: str = Field(default="LifestyleModification", alias='@type', const=True)
    



class PhysicalActivity(LifestyleModification):
    """Any bodily activity that enhances or maintains physical fitness and overall health"
     "and wellness. Includes activity that is part of daily living and routine, structured"
     "exercise, and exercise prescribed as part of a medical treatment or recovery plan.

    See: https://schema.org/PhysicalActivity
    Model depth: 4
    """
    type_: str = Field(default="PhysicalActivity", alias='@type', const=True)
    pathophysiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Changes in the normal mechanical, physical, and biochemical functions that are associated"
     "with this activity or condition.",
    )
    epidemiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The characteristics of associated patients, such as age, gender, race etc.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    associatedAnatomy: Optional[Union[List[Union[SuperficialAnatomy, AnatomicalStructure, AnatomicalSystem, str]], SuperficialAnatomy, AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="The anatomy of the underlying organ system or structures associated with this entity.",
    )
    



class LiquorStore(Store):
    """A shop that sells alcoholic drinks such as wine, beer, whisky and other spirits.

    See: https://schema.org/LiquorStore
    Model depth: 5
    """
    type_: str = Field(default="LiquorStore", alias='@type', const=True)
    



class DrugPregnancyCategory(MedicalEnumeration):
    """Categories that represent an assessment of the risk of fetal injury due to a drug or pharmaceutical"
     "used as directed by the mother during pregnancy.

    See: https://schema.org/DrugPregnancyCategory
    Model depth: 5
    """
    type_: str = Field(default="DrugPregnancyCategory", alias='@type', const=True)
    



class FDAcategoryX(DrugPregnancyCategory):
    """A designation by the US FDA signifying that studies in animals or humans have demonstrated"
     "fetal abnormalities and/or there is positive evidence of human fetal risk based on adverse"
     "reaction data from investigational or marketing experience, and the risks involved"
     "in use of the drug in pregnant women clearly outweigh potential benefits.

    See: https://schema.org/FDAcategoryX
    Model depth: 6
    """
    type_: str = Field(default="FDAcategoryX", alias='@type', const=True)
    



class EducationalOrganization(CivicStructure, Organization):
    """An educational organization.

    See: https://schema.org/EducationalOrganization
    Model depth: 3
    """
    type_: str = Field(default="EducationalOrganization", alias='@type', const=True)
    alumni: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="Alumni of an organization.",
    )
    



class Series(Intangible):
    """A Series in schema.org is a group of related items, typically but not necessarily of the"
     "same kind. See also [[CreativeWorkSeries]], [[EventSeries]].

    See: https://schema.org/Series
    Model depth: 3
    """
    type_: str = Field(default="Series", alias='@type', const=True)
    



class EventSeries(Series, Event):
    """A series of [[Event]]s. Included events can relate with the series using the [[superEvent]]"
     "property. An EventSeries is a collection of events that share some unifying characteristic."
     "For example, \"The Olympic Games\" is a series, which is repeated regularly. The \"2012"
     "London Olympics\" can be presented both as an [[Event]] in the series \"Olympic Games\","
     "and as an [[EventSeries]] that included a number of sporting competitions as Events."
     "The nature of the association between the events in an [[EventSeries]] can vary, but"
     "typical examples could include a thematic event series (e.g. topical meetups or classes),"
     "or a series of regular events that share a location, attendee group and/or organizers."
     "EventSeries has been defined as a kind of Event to make it easy for publishers to use it"
     "in an Event context without worrying about which kinds of series are really event-like"
     "enough to call an Event. In general an EventSeries may seem more Event-like when the period"
     "of time is compact and when aspects such as location are fixed, but it may also sometimes"
     "prove useful to describe a longer-term series as an Event.

    See: https://schema.org/EventSeries
    Model depth: 3
    """
    type_: str = Field(default="EventSeries", alias='@type', const=True)
    



class WearableSizeGroupPetite(WearableSizeGroupEnumeration):
    """Size group \"Petite\" for wearables.

    See: https://schema.org/WearableSizeGroupPetite
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupPetite", alias='@type', const=True)
    



class HealthAspectEnumeration(Enumeration):
    """HealthAspectEnumeration enumerates several aspects of health content online, each"
     "of which might be described using [[hasHealthAspect]] and [[HealthTopicContent]].

    See: https://schema.org/HealthAspectEnumeration
    Model depth: 4
    """
    type_: str = Field(default="HealthAspectEnumeration", alias='@type', const=True)
    



class PrognosisHealthAspect(HealthAspectEnumeration):
    """Typical progression and happenings of life course of the topic.

    See: https://schema.org/PrognosisHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="PrognosisHealthAspect", alias='@type', const=True)
    



class LegalForceStatus(StatusEnumeration):
    """A list of possible statuses for the legal force of a legislation.

    See: https://schema.org/LegalForceStatus
    Model depth: 5
    """
    type_: str = Field(default="LegalForceStatus", alias='@type', const=True)
    



class PartiallyInForce(LegalForceStatus):
    """Indicates that parts of the legislation are in force, and parts are not.

    See: https://schema.org/PartiallyInForce
    Model depth: 6
    """
    type_: str = Field(default="PartiallyInForce", alias='@type', const=True)
    



class RestockingFees(ReturnFeesEnumeration):
    """Specifies that the customer must pay a restocking fee when returning a product.

    See: https://schema.org/RestockingFees
    Model depth: 5
    """
    type_: str = Field(default="RestockingFees", alias='@type', const=True)
    



class WearableMeasurementTypeEnumeration(MeasurementTypeEnumeration):
    """Enumerates common types of measurement for wearables products.

    See: https://schema.org/WearableMeasurementTypeEnumeration
    Model depth: 5
    """
    type_: str = Field(default="WearableMeasurementTypeEnumeration", alias='@type', const=True)
    



class WearableMeasurementHips(WearableMeasurementTypeEnumeration):
    """Measurement of the hip section, for example of a skirt

    See: https://schema.org/WearableMeasurementHips
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementHips", alias='@type', const=True)
    



class UserInteraction(Event):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserInteraction
    Model depth: 3
    """
    type_: str = Field(default="UserInteraction", alias='@type', const=True)
    



class UserPageVisits(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserPageVisits
    Model depth: 4
    """
    type_: str = Field(default="UserPageVisits", alias='@type', const=True)
    



class DigitalDocumentPermissionType(Enumeration):
    """A type of permission which can be granted for accessing a digital document.

    See: https://schema.org/DigitalDocumentPermissionType
    Model depth: 4
    """
    type_: str = Field(default="DigitalDocumentPermissionType", alias='@type', const=True)
    



class CommentPermission(DigitalDocumentPermissionType):
    """Permission to add comments to the document.

    See: https://schema.org/CommentPermission
    Model depth: 5
    """
    type_: str = Field(default="CommentPermission", alias='@type', const=True)
    



class MediaManipulationRatingEnumeration(Enumeration):
    """Codes for use with the [[mediaAuthenticityCategory]] property, indicating the authenticity"
     "of a media object (in the context of how it was published or shared). In general these codes"
     "are not mutually exclusive, although some combinations (such as 'original' versus"
     "'transformed', 'edited' and 'staged') would be contradictory if applied in the same"
     "[[MediaReview]]. Note that the application of these codes is with regard to a piece of"
     "media shared or published in a particular context.

    See: https://schema.org/MediaManipulationRatingEnumeration
    Model depth: 4
    """
    type_: str = Field(default="MediaManipulationRatingEnumeration", alias='@type', const=True)
    



class OriginalMediaContent(MediaManipulationRatingEnumeration):
    """Content coded 'as original media content' in a [[MediaReview]], considered in the context"
     "of how it was published or shared. For a [[VideoObject]] to be 'original': No evidence"
     "the footage has been misleadingly altered or manipulated, though it may contain false"
     "or misleading claims. For an [[ImageObject]] to be 'original': No evidence the image"
     "has been misleadingly altered or manipulated, though it may still contain false or misleading"
     "claims. For an [[ImageObject]] with embedded text to be 'original': No evidence the"
     "image has been misleadingly altered or manipulated, though it may still contain false"
     "or misleading claims. For an [[AudioObject]] to be 'original': No evidence the audio"
     "has been misleadingly altered or manipulated, though it may contain false or misleading"
     "claims.

    See: https://schema.org/OriginalMediaContent
    Model depth: 5
    """
    type_: str = Field(default="OriginalMediaContent", alias='@type', const=True)
    



class DVDFormat(MusicReleaseFormatType):
    """DVDFormat.

    See: https://schema.org/DVDFormat
    Model depth: 5
    """
    type_: str = Field(default="DVDFormat", alias='@type', const=True)
    



class UserDownloads(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserDownloads
    Model depth: 4
    """
    type_: str = Field(default="UserDownloads", alias='@type', const=True)
    



class TrainReservation(Reservation):
    """A reservation for train travel. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations."
     "For offers of tickets, use [[Offer]].

    See: https://schema.org/TrainReservation
    Model depth: 4
    """
    type_: str = Field(default="TrainReservation", alias='@type', const=True)
    



class MusicPlaylist(CreativeWork):
    """A collection of music tracks in playlist form.

    See: https://schema.org/MusicPlaylist
    Model depth: 3
    """
    type_: str = Field(default="MusicPlaylist", alias='@type', const=True)
    tracks: Optional[Union[List[Union[MusicRecording, str]], MusicRecording, str]] = Field(
        default=None,
        description="A music recording (track)&#x2014;usually a single song.",
    )
    track: Optional[Union[List[Union[ItemList, MusicRecording, str]], ItemList, MusicRecording, str]] = Field(
        default=None,
        description="A music recording (track)&#x2014;usually a single song. If an ItemList is given, the"
     "list should contain items of type MusicRecording.",
    )
    numTracks: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of tracks in this album or playlist.",
    )
    



class VirtualLocation(Intangible):
    """An online or virtual location for attending events. For example, one may attend an online"
     "seminar or educational event. While a virtual location may be used as the location of"
     "an event, virtual locations should not be confused with physical locations in the real"
     "world.

    See: https://schema.org/VirtualLocation
    Model depth: 3
    """
    type_: str = Field(default="VirtualLocation", alias='@type', const=True)
    



class EntertainmentBusiness(LocalBusiness):
    """A business providing entertainment.

    See: https://schema.org/EntertainmentBusiness
    Model depth: 4
    """
    type_: str = Field(default="EntertainmentBusiness", alias='@type', const=True)
    



class AdultEntertainment(EntertainmentBusiness):
    """An adult entertainment establishment.

    See: https://schema.org/AdultEntertainment
    Model depth: 5
    """
    type_: str = Field(default="AdultEntertainment", alias='@type', const=True)
    



class Review(CreativeWork):
    """A review of an item - for example, of a restaurant, movie, or store.

    See: https://schema.org/Review
    Model depth: 3
    """
    type_: str = Field(default="Review", alias='@type', const=True)
    reviewBody: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The actual body of the review.",
    )
    associatedMediaReview: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="An associated [[MediaReview]], related by specific common content, topic or claim."
     "The expectation is that this property would be most typically used in cases where a single"
     "activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]]"
     "would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be"
     "used on [[MediaReview]].",
    )
    associatedReview: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="An associated [[Review]].",
    )
    positiveNotes: Optional[Union[List[Union[str, Text, ItemList, WebContent, ListItem]], str, Text, ItemList, WebContent, ListItem]] = Field(
        default=None,
        description="Provides positive considerations regarding something, for example product highlights"
     "or (alongside [[negativeNotes]]) pro/con lists for reviews. In the case of a [[Review]],"
     "the property describes the [[itemReviewed]] from the perspective of the review; in"
     "the case of a [[Product]], the product itself is being described. The property values"
     "can be expressed either as unstructured text (repeated as necessary), or if ordered,"
     "as a list (in which case the most positive is at the beginning of the list).",
    )
    reviewRating: Optional[Union[List[Union[Rating, str]], Rating, str]] = Field(
        default=None,
        description="The rating given in this review. Note that reviews can themselves be rated. The ```reviewRating```"
     "applies to rating given by the review. The [[aggregateRating]] property applies to"
     "the review itself, as a creative work.",
    )
    reviewAspect: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="This Review or Rating is relevant to this part or facet of the itemReviewed.",
    )
    itemReviewed: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The item that is being reviewed/rated.",
    )
    negativeNotes: Optional[Union[List[Union[str, Text, ItemList, WebContent, ListItem]], str, Text, ItemList, WebContent, ListItem]] = Field(
        default=None,
        description="Provides negative considerations regarding something, most typically in pro/con"
     "lists for reviews (alongside [[positiveNotes]]). For symmetry In the case of a [[Review]],"
     "the property describes the [[itemReviewed]] from the perspective of the review; in"
     "the case of a [[Product]], the product itself is being described. Since product descriptions"
     "tend to emphasise positive claims, it may be relatively unusual to find [[negativeNotes]]"
     "used in this way. Nevertheless for the sake of symmetry, [[negativeNotes]] can be used"
     "on [[Product]]. The property values can be expressed either as unstructured text (repeated"
     "as necessary), or if ordered, as a list (in which case the most negative is at the beginning"
     "of the list).",
    )
    associatedClaimReview: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="An associated [[ClaimReview]], related by specific common content, topic or claim."
     "The expectation is that this property would be most typically used in cases where a single"
     "activity is conducting both claim reviews and media reviews, in which case [[relatedMediaReview]]"
     "would commonly be used on a [[ClaimReview]], while [[relatedClaimReview]] would be"
     "used on [[MediaReview]].",
    )
    



class Recommendation(Review):
    """[[Recommendation]] is a type of [[Review]] that suggests or proposes something as the"
     "best option or best course of action. Recommendations may be for products or services,"
     "or other concrete things, as in the case of a ranked list or product guide. A [[Guide]]"
     "may list multiple recommendations for different categories. For example, in a [[Guide]]"
     "about which TVs to buy, the author may have several [[Recommendation]]s.

    See: https://schema.org/Recommendation
    Model depth: 4
    """
    type_: str = Field(default="Recommendation", alias='@type', const=True)
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    



class Book(CreativeWork):
    """A book.

    See: https://schema.org/Book
    Model depth: 3
    """
    type_: str = Field(default="Book", alias='@type', const=True)
    abridged: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether the book is an abridged edition.",
    )
    bookFormat: Optional[Union[List[Union[BookFormatType, str]], BookFormatType, str]] = Field(
        default=None,
        description="The format of the book.",
    )
    illustrator: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The illustrator of the book.",
    )
    bookEdition: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The edition of the book.",
    )
    numberOfPages: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of pages in the book.",
    )
    isbn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The ISBN of the book.",
    )
    



class MediaObject(CreativeWork):
    """A media object, such as an image, video, or audio object embedded in a web page or a downloadable"
     "dataset, i.e. DataDownload. Note that a creative work may have many media objects associated"
     "with it on the same web page. For example, a page about a single song (MusicRecording)"
     "may have a music video (VideoObject), and a high and low bandwidth audio stream (2 [[AudioObject]]s).

    See: https://schema.org/MediaObject
    Model depth: 3
    """
    type_: str = Field(default="MediaObject", alias='@type', const=True)
    embedUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A URL pointing to a player for a specific video. In general, this is the information in"
     "the ```src``` element of an ```embed``` tag and should not be the same as the content of"
     "the ```loc``` tag.",
    )
    bitrate: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The bitrate of the media object.",
    )
    width: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The width of the item.",
    )
    sha256: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [SHA-2](https://en.wikipedia.org/wiki/SHA-2) SHA256 hash of the content of"
     "the item. For example, a zero-length input has value 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'",
    )
    endTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to end. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from January to *December*. For media, including"
     "audio and video, it's the time offset of the end of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    startTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to start. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from *January* to December. For media, including"
     "audio and video, it's the time offset of the start of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    contentSize: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="File size in (mega/kilo)bytes.",
    )
    height: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The height of the item.",
    )
    playerType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Player type required&#x2014;for example, Flash or Silverlight.",
    )
    associatedArticle: Optional[Union[List[Union[NewsArticle, str]], NewsArticle, str]] = Field(
        default=None,
        description="A NewsArticle associated with the Media Object.",
    )
    interpretedAsClaim: Optional[Union[List[Union[Claim, str]], Claim, str]] = Field(
        default=None,
        description="Used to indicate a specific claim contained, implied, translated or refined from the"
     "content of a [[MediaObject]] or other [[CreativeWork]]. The interpreting party can"
     "be indicated using [[claimInterpreter]].",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    requiresSubscription: Optional[Union[List[Union[StrictBool, Boolean, MediaSubscription, str]], StrictBool, Boolean, MediaSubscription, str]] = Field(
        default=None,
        description="Indicates if use of the media require a subscription (either paid or free). Allowed values"
     "are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').",
    )
    regionsAllowed: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The regions where the media is allowed. If not specified, then it's assumed to be allowed"
     "everywhere. Specify the countries in [ISO 3166 format](http://en.wikipedia.org/wiki/ISO_3166).",
    )
    contentUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Actual bytes of the media object, for example the image file or video file.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    encodesCreativeWork: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="The CreativeWork encoded by this media object.",
    )
    uploadDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Date when this media object was uploaded to this site.",
    )
    ineligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "not valid, e.g. a region where the transaction is not allowed. See also [[eligibleRegion]].",
    )
    encodingFormat: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Media type typically expressed using a MIME format (see [IANA site](http://www.iana.org/assignments/media-types/media-types.xhtml)"
     "and [MDN reference](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)),"
     "e.g. application/zip for a SoftwareApplication binary, audio/mpeg for .mp3 etc. In"
     "cases where a [[CreativeWork]] has several media type representations, [[encoding]]"
     "can be used to indicate each [[MediaObject]] alongside particular [[encodingFormat]]"
     "information. Unregistered or niche encoding and file formats can be indicated instead"
     "via the most appropriate URL, e.g. defining Web page or a Wikipedia/Wikidata entry.",
    )
    



class AudioObject(MediaObject):
    """An audio file.

    See: https://schema.org/AudioObject
    Model depth: 4
    """
    type_: str = Field(default="AudioObject", alias='@type', const=True)
    caption: Optional[Union[List[Union[str, Text, MediaObject]], str, Text, MediaObject]] = Field(
        default=None,
        description="The caption for this object. For downloadable machine formats (closed caption, subtitles"
     "etc.) use MediaObject and indicate the [[encodingFormat]].",
    )
    embeddedTextCaption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.",
    )
    transcript: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If this MediaObject is an AudioObject or VideoObject, the transcript of that object.",
    )
    



class Audiobook(AudioObject, Book):
    """An audiobook.

    See: https://schema.org/Audiobook
    Model depth: 4
    """
    type_: str = Field(default="Audiobook", alias='@type', const=True)
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    readBy: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person who reads (performs) the audiobook.",
    )
    



class MedicalAudience(PeopleAudience, Audience):
    """Target audiences for medical web pages.

    See: https://schema.org/MedicalAudience
    Model depth: 4
    """
    type_: str = Field(default="MedicalAudience", alias='@type', const=True)
    



class Person(Thing):
    """A person (alive, dead, undead, or fictional).

    See: https://schema.org/Person
    Model depth: 2
    """
    type_: str = Field(default="Person", alias='@type', const=True)
    sibling: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sibling of the person.",
    )
    isicV4: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard of Industrial Classification of All Economic Activities"
     "(ISIC), Revision 4 code for a particular organization, business person, or place.",
    )
    hasPOS: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="Points-of-Sales operated by the organization or person.",
    )
    globalLocationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [Global Location Number](http://www.gs1.org/gln) (GLN, sometimes also referred"
     "to as International Location Number or ILN) of the respective organization, person,"
     "or place. The GLN is a 13-digit number used to identify parties and physical locations.",
    )
    spouse: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The person's spouse.",
    )
    knowsAbout: Optional[Union[List[Union[AnyUrl, URL, str, Text, Thing]], AnyUrl, URL, str, Text, Thing]] = Field(
        default=None,
        description="Of a [[Person]], and less typically of an [[Organization]], to indicate a topic that"
     "is known about - suggesting possible expertise but not implying it. We do not distinguish"
     "skill levels here, or relate this to educational content, events, objectives or [[JobPosting]]"
     "descriptions.",
    )
    makesOffer: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="A pointer to products or services offered by the organization or person.",
    )
    colleague: Optional[Union[List[Union[AnyUrl, URL, Person, str]], AnyUrl, URL, Person, str]] = Field(
        default=None,
        description="A colleague of the person.",
    )
    honorificSuffix: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An honorific suffix following a Person's name such as M.D./PhD/MSCSW.",
    )
    nationality: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="Nationality of the person.",
    )
    affiliation: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="An organization that this person is affiliated with. For example, a school/university,"
     "a club, or a team.",
    )
    memberOf: Optional[Union[List[Union[Organization, ProgramMembership, str]], Organization, ProgramMembership, str]] = Field(
        default=None,
        description="An Organization (or ProgramMembership) to which this Person or Organization belongs.",
    )
    publishingPrinciples: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="The publishingPrinciples property indicates (typically via [[URL]]) a document describing"
     "the editorial principles of an [[Organization]] (or individual, e.g. a [[Person]]"
     "writing a blog) that relate to their activities as a publisher, e.g. ethics or diversity"
     "policies. When applied to a [[CreativeWork]] (e.g. [[NewsArticle]]) the principles"
     "are those of the party primarily responsible for the creation of the [[CreativeWork]]."
     "While such policies are most typically expressed in natural language, sometimes related"
     "information (e.g. indicating a [[funder]]) can be expressed using schema.org terminology.",
    )
    height: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The height of the item.",
    )
    knows: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The most generic bi-directional social/work relation.",
    )
    relatedTo: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The most generic familial relation.",
    )
    worksFor: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="Organizations that the person works for.",
    )
    award: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An award won by or for this item.",
    )
    email: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Email address.",
    )
    givenName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Given name. In the U.S., the first name of a Person.",
    )
    workLocation: Optional[Union[List[Union[ContactPoint, Place, str]], ContactPoint, Place, str]] = Field(
        default=None,
        description="A contact location for a person's place of work.",
    )
    contactPoints: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="A contact point for a person or organization.",
    )
    jobTitle: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The job title of the person (for example, Financial Manager).",
    )
    owns: Optional[Union[List[Union[OwnershipInfo, Product, str]], OwnershipInfo, Product, str]] = Field(
        default=None,
        description="Products owned by the organization or person.",
    )
    awards: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Awards won by or for this item.",
    )
    children: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A child of the person.",
    )
    parent: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A parent of this person.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    interactionStatistic: Optional[Union[List[Union[InteractionCounter, str]], InteractionCounter, str]] = Field(
        default=None,
        description="The number of interactions for the CreativeWork using the WebSite or SoftwareApplication."
     "The most specific child type of InteractionCounter should be used.",
    )
    seeks: Optional[Union[List[Union[Demand, str]], Demand, str]] = Field(
        default=None,
        description="A pointer to products or services sought by the organization or person (demand).",
    )
    weight: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The weight of the product or person.",
    )
    funder: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports (sponsors) something through some kind of financial"
     "contribution.",
    )
    birthDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Date of birth.",
    )
    deathDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Date of death.",
    )
    additionalName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An additional name for a Person, can be used for a middle name.",
    )
    duns: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Dun & Bradstreet DUNS number for identifying an organization or business person.",
    )
    performerIn: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Event that this person is a performer or participant in.",
    )
    vatID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Value-added Tax ID of the organization or person.",
    )
    knowsLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Of a [[Person]], and less typically of an [[Organization]], to indicate a known language."
     "We do not distinguish skill levels or reading/writing/speaking/signing here. Use"
     "language codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47).",
    )
    honorificPrefix: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An honorific prefix preceding a Person's name such as Dr/Mrs/Mr.",
    )
    parents: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A parents of the person.",
    )
    familyName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Family name. In the U.S., the last name of a Person.",
    )
    siblings: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sibling of the person.",
    )
    hasCredential: Optional[Union[List[Union[EducationalOccupationalCredential, str]], EducationalOccupationalCredential, str]] = Field(
        default=None,
        description="A credential awarded to the Person or Organization.",
    )
    address: Optional[Union[List[Union[str, Text, PostalAddress]], str, Text, PostalAddress]] = Field(
        default=None,
        description="Physical address of the item.",
    )
    brand: Optional[Union[List[Union[Brand, Organization, str]], Brand, Organization, str]] = Field(
        default=None,
        description="The brand(s) associated with a product or service, or the brand(s) maintained by an organization"
     "or business person.",
    )
    hasOccupation: Optional[Union[List[Union[Occupation, str]], Occupation, str]] = Field(
        default=None,
        description="The Person's occupation. For past professions, use Role for expressing dates.",
    )
    netWorth: Optional[Union[List[Union[PriceSpecification, MonetaryAmount, str]], PriceSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="The total financial value of the person as calculated by subtracting assets from liabilities.",
    )
    contactPoint: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="A contact point for a person or organization.",
    )
    homeLocation: Optional[Union[List[Union[ContactPoint, Place, str]], ContactPoint, Place, str]] = Field(
        default=None,
        description="A contact location for a person's residence.",
    )
    gender: Optional[Union[List[Union[str, Text, GenderType]], str, Text, GenderType]] = Field(
        default=None,
        description="Gender of something, typically a [[Person]], but possibly also fictional characters,"
     "animals, etc. While https://schema.org/Male and https://schema.org/Female may"
     "be used, text strings are also acceptable for people who do not identify as a binary gender."
     "The [[gender]] property can also be used in an extended sense to cover e.g. the gender"
     "of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities."
     "A mixed-gender [[SportsTeam]] can be indicated with a text value of \"Mixed\".",
    )
    hasOfferCatalog: Optional[Union[List[Union[OfferCatalog, str]], OfferCatalog, str]] = Field(
        default=None,
        description="Indicates an OfferCatalog listing for this Organization, Person, or Service.",
    )
    follows: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The most generic uni-directional social relation.",
    )
    birthPlace: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The place where the person was born.",
    )
    faxNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The fax number.",
    )
    telephone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The telephone number.",
    )
    taxID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Tax / Fiscal ID of the organization or person, e.g. the TIN in the US or the CIF/NIF in"
     "Spain.",
    )
    callSign: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting"
     "and radio communications to identify people, radio and TV stations, or vehicles.",
    )
    naics: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The North American Industry Classification System (NAICS) code for a particular organization"
     "or business person.",
    )
    deathPlace: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The place where the person died.",
    )
    alumniOf: Optional[Union[List[Union[Organization, EducationalOrganization, str]], Organization, EducationalOrganization, str]] = Field(
        default=None,
        description="An organization that the person is an alumni of.",
    )
    colleagues: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A colleague of the person.",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    



class Patient(MedicalAudience, Person):
    """A patient is any person recipient of health care services.

    See: https://schema.org/Patient
    Model depth: 3
    """
    type_: str = Field(default="Patient", alias='@type', const=True)
    healthCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="Specifying the health condition(s) of a patient, medical study, or other target audience.",
    )
    diagnosis: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="One or more alternative conditions considered in the differential diagnosis process"
     "as output of a diagnosis process.",
    )
    drug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Specifying a drug or medicine used in a medication procedure.",
    )
    



class GovernmentBenefitsType(Enumeration):
    """GovernmentBenefitsType enumerates several kinds of government benefits to support"
     "the COVID-19 situation. Note that this structure may not capture all benefits offered.

    See: https://schema.org/GovernmentBenefitsType
    Model depth: 4
    """
    type_: str = Field(default="GovernmentBenefitsType", alias='@type', const=True)
    



class BusinessSupport(GovernmentBenefitsType):
    """BusinessSupport: this is a benefit for supporting businesses.

    See: https://schema.org/BusinessSupport
    Model depth: 5
    """
    type_: str = Field(default="BusinessSupport", alias='@type', const=True)
    



class SatireOrParodyContent(MediaManipulationRatingEnumeration):
    """Content coded 'satire or parody content' in a [[MediaReview]], considered in the context"
     "of how it was published or shared. For a [[VideoObject]] to be 'satire or parody content':"
     "A video that was created as political or humorous commentary and is presented in that"
     "context. (Reshares of satire/parody content that do not include relevant context are"
     "more likely to fall under the “missing context” rating.) For an [[ImageObject]] to be"
     "'satire or parody content': An image that was created as political or humorous commentary"
     "and is presented in that context. (Reshares of satire/parody content that do not include"
     "relevant context are more likely to fall under the “missing context” rating.) For an"
     "[[ImageObject]] with embedded text to be 'satire or parody content': An image that was"
     "created as political or humorous commentary and is presented in that context. (Reshares"
     "of satire/parody content that do not include relevant context are more likely to fall"
     "under the “missing context” rating.) For an [[AudioObject]] to be 'satire or parody"
     "content': Audio that was created as political or humorous commentary and is presented"
     "in that context. (Reshares of satire/parody content that do not include relevant context"
     "are more likely to fall under the “missing context” rating.)

    See: https://schema.org/SatireOrParodyContent
    Model depth: 5
    """
    type_: str = Field(default="SatireOrParodyContent", alias='@type', const=True)
    



class Genitourinary(PhysicalExam):
    """Genitourinary system function assessment with clinical examination.

    See: https://schema.org/Genitourinary
    Model depth: 5
    """
    type_: str = Field(default="Genitourinary", alias='@type', const=True)
    



class Collection(CreativeWork):
    """A collection of items, e.g. creative works or products.

    See: https://schema.org/Collection
    Model depth: 3
    """
    type_: str = Field(default="Collection", alias='@type', const=True)
    collectionSize: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of items in the [[Collection]].",
    )
    



class ProductCollection(Collection, Product):
    """A set of products (either [[ProductGroup]]s or specific variants) that are listed together"
     "e.g. in an [[Offer]].

    See: https://schema.org/ProductCollection
    Model depth: 3
    """
    type_: str = Field(default="ProductCollection", alias='@type', const=True)
    includesObject: Optional[Union[List[Union[TypeAndQuantityNode, str]], TypeAndQuantityNode, str]] = Field(
        default=None,
        description="This links to a node or nodes indicating the exact quantity of the products included in"
     "an [[Offer]] or [[ProductCollection]].",
    )
    



class Role(Intangible):
    """Represents additional information about a relationship or property. For example a"
     "Role can be used to say that a 'member' role linking some SportsTeam to a player occurred"
     "during a particular time period. Or that a Person's 'actor' role in a Movie was for some"
     "particular characterName. Such properties can be attached to a Role entity, which is"
     "then associated with the main entities using ordinary properties like 'member' or 'actor'."
     "See also [blog post](http://blog.schema.org/2014/06/introducing-role.html).

    See: https://schema.org/Role
    Model depth: 3
    """
    type_: str = Field(default="Role", alias='@type', const=True)
    roleName: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A role played, performed or filled by a person or organization. For example, the team"
     "of creators for a comic book might fill the roles named 'inker', 'penciller', and 'letterer';"
     "or an athlete in a SportsTeam might play in the position named 'Quarterback'.",
    )
    namedPosition: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A position played, performed or filled by a person or organization, as part of an organization."
     "For example, an athlete in a SportsTeam might play in the position named 'Quarterback'.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class OrganizationRole(Role):
    """A subclass of Role used to describe roles within organizations.

    See: https://schema.org/OrganizationRole
    Model depth: 4
    """
    type_: str = Field(default="OrganizationRole", alias='@type', const=True)
    numberedPosition: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="A number associated with a role in an organization, for example, the number on an athlete's"
     "jersey.",
    )
    



class FindAction(Action):
    """The act of finding an object. Related actions: * [[SearchAction]]: FindAction is generally"
     "lead by a SearchAction, but not necessarily.

    See: https://schema.org/FindAction
    Model depth: 3
    """
    type_: str = Field(default="FindAction", alias='@type', const=True)
    



class GeoCircle(GeoShape):
    """A GeoCircle is a GeoShape representing a circular geographic area. As it is a GeoShape"
     "it provides the simple textual property 'circle', but also allows the combination of"
     "postalCode alongside geoRadius. The center of the circle can be indicated via the 'geoMidpoint'"
     "property, or more approximately using 'address', 'postalCode'.

    See: https://schema.org/GeoCircle
    Model depth: 5
    """
    type_: str = Field(default="GeoCircle", alias='@type', const=True)
    geoMidpoint: Optional[Union[List[Union[GeoCoordinates, str]], GeoCoordinates, str]] = Field(
        default=None,
        description="Indicates the GeoCoordinates at the centre of a GeoShape, e.g. GeoCircle.",
    )
    geoRadius: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, Distance]], StrictInt, StrictFloat, Number, str, Text, Distance]] = Field(
        default=None,
        description="Indicates the approximate radius of a GeoCircle (metres unless indicated otherwise"
     "via Distance notation).",
    )
    



class SportsActivityLocation(LocalBusiness):
    """A sports location, such as a playing field.

    See: https://schema.org/SportsActivityLocation
    Model depth: 4
    """
    type_: str = Field(default="SportsActivityLocation", alias='@type', const=True)
    



class Room(Accommodation):
    """A room is a distinguishable space within a structure, usually separated from other spaces"
     "by interior walls (source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Room\">http://en.wikipedia.org/wiki/Room</a>)."
     "<br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated document on the"
     "use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Room
    Model depth: 4
    """
    type_: str = Field(default="Room", alias='@type', const=True)
    



class MeetingRoom(Room):
    """A meeting room, conference room, or conference hall is a room provided for singular events"
     "such as business conferences and meetings (source: Wikipedia, the free encyclopedia,"
     "see <a href=\"http://en.wikipedia.org/wiki/Conference_hall\">http://en.wikipedia.org/wiki/Conference_hall</a>)."
     "<br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated document on the"
     "use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/MeetingRoom
    Model depth: 5
    """
    type_: str = Field(default="MeetingRoom", alias='@type', const=True)
    



class UKNonprofitType(NonprofitType):
    """UKNonprofitType: Non-profit organization type originating from the United Kingdom.

    See: https://schema.org/UKNonprofitType
    Model depth: 5
    """
    type_: str = Field(default="UKNonprofitType", alias='@type', const=True)
    



class Trip(Intangible):
    """A trip or journey. An itinerary of visits to one or more places.

    See: https://schema.org/Trip
    Model depth: 3
    """
    type_: str = Field(default="Trip", alias='@type', const=True)
    departureTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The expected departure time.",
    )
    itinerary: Optional[Union[List[Union[Place, ItemList, str]], Place, ItemList, str]] = Field(
        default=None,
        description="Destination(s) ( [[Place]] ) that make up a trip. For a trip where destination order is"
     "important use [[ItemList]] to specify that order (see examples).",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    partOfTrip: Optional[Union[List[Union[Trip, str]], Trip, str]] = Field(
        default=None,
        description="Identifies that this [[Trip]] is a subTrip of another Trip. For example Day 1, Day 2, etc."
     "of a multi-day trip.",
    )
    arrivalTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The expected arrival time.",
    )
    subTrip: Optional[Union[List[Union[Trip, str]], Trip, str]] = Field(
        default=None,
        description="Identifies a [[Trip]] that is a subTrip of this Trip. For example Day 1, Day 2, etc. of a"
     "multi-day trip.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    



class BoatTrip(Trip):
    """A trip on a commercial ferry line.

    See: https://schema.org/BoatTrip
    Model depth: 4
    """
    type_: str = Field(default="BoatTrip", alias='@type', const=True)
    departureBoatTerminal: Optional[Union[List[Union[BoatTerminal, str]], BoatTerminal, str]] = Field(
        default=None,
        description="The terminal or port from which the boat departs.",
    )
    arrivalBoatTerminal: Optional[Union[List[Union[BoatTerminal, str]], BoatTerminal, str]] = Field(
        default=None,
        description="The terminal or port from which the boat arrives.",
    )
    



class EmployeeRole(OrganizationRole):
    """A subclass of OrganizationRole used to describe employee relationships.

    See: https://schema.org/EmployeeRole
    Model depth: 5
    """
    type_: str = Field(default="EmployeeRole", alias='@type', const=True)
    baseSalary: Optional[Union[List[Union[StrictInt, StrictFloat, Number, PriceSpecification, MonetaryAmount, str]], StrictInt, StrictFloat, Number, PriceSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="The base salary of the job or of an employee in an EmployeeRole.",
    )
    salaryCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217))"
     "used for the main salary information in this job posting or for this employee.",
    )
    



class BookStore(Store):
    """A bookstore.

    See: https://schema.org/BookStore
    Model depth: 5
    """
    type_: str = Field(default="BookStore", alias='@type', const=True)
    



class Gastroenterologic(MedicalSpecialty):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of digestive system.

    See: https://schema.org/Gastroenterologic
    Model depth: 6
    """
    type_: str = Field(default="Gastroenterologic", alias='@type', const=True)
    



class UpdateAction(Action):
    """The act of managing by changing/editing the state of the object.

    See: https://schema.org/UpdateAction
    Model depth: 3
    """
    type_: str = Field(default="UpdateAction", alias='@type', const=True)
    collection: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A sub property of object. The collection target of the action.",
    )
    targetCollection: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A sub property of object. The collection target of the action.",
    )
    



class SoftwareApplication(CreativeWork):
    """A software application.

    See: https://schema.org/SoftwareApplication
    Model depth: 3
    """
    type_: str = Field(default="SoftwareApplication", alias='@type', const=True)
    screenshot: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="A link to a screenshot image of the app.",
    )
    permissions: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Permission(s) required to run the app (for example, a mobile app may require full internet"
     "access or may run only on wifi).",
    )
    requirements: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Component dependency requirements for application. This includes runtime environments"
     "and shared libraries that are not included in the application distribution package,"
     "but required to run the application (examples: DirectX, Java or .NET runtime).",
    )
    storageRequirements: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Storage requirements (free space required).",
    )
    softwareRequirements: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Component dependency requirements for application. This includes runtime environments"
     "and shared libraries that are not included in the application distribution package,"
     "but required to run the application (examples: DirectX, Java or .NET runtime).",
    )
    applicationCategory: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Type of software application, e.g. 'Game, Multimedia'.",
    )
    device: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Device required to run the application. Used in cases where a specific make/model is"
     "required to run the application.",
    )
    fileSize: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Size of the application / package (e.g. 18MB). In the absence of a unit (MB, KB etc.), KB"
     "will be assumed.",
    )
    countriesNotSupported: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Countries for which the application is not supported. You can also provide the two-letter"
     "ISO 3166-1 alpha-2 country code.",
    )
    operatingSystem: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Operating systems supported (Windows 7, OS X 10.6, Android 1.6).",
    )
    featureList: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Features or modules provided by this application (and possibly required by other applications).",
    )
    applicationSuite: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of the application suite to which the application belongs (e.g. Excel belongs"
     "to Office).",
    )
    applicationSubCategory: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Subcategory of the application, e.g. 'Arcade Game'.",
    )
    releaseNotes: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Description of what changed in this version.",
    )
    softwareHelp: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Software application help.",
    )
    supportingData: Optional[Union[List[Union[DataFeed, str]], DataFeed, str]] = Field(
        default=None,
        description="Supporting data for a SoftwareApplication.",
    )
    countriesSupported: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Countries for which the application is supported. You can also provide the two-letter"
     "ISO 3166-1 alpha-2 country code.",
    )
    availableOnDevice: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Device required to run the application. Used in cases where a specific make/model is"
     "required to run the application.",
    )
    softwareVersion: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Version of the software instance.",
    )
    installUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="URL at which the app may be installed, if different from the URL of the item.",
    )
    memoryRequirements: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Minimum memory requirements.",
    )
    processorRequirements: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Processor architecture required to run the application (e.g. IA64).",
    )
    softwareAddOn: Optional[Union[List[Union[SoftwareApplication, str]], SoftwareApplication, str]] = Field(
        default=None,
        description="Additional content for a software application.",
    )
    downloadUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="If the file can be downloaded, URL to download the binary.",
    )
    



class MobileApplication(SoftwareApplication):
    """A software application designed specifically to work well on a mobile device such as"
     "a telephone.

    See: https://schema.org/MobileApplication
    Model depth: 4
    """
    type_: str = Field(default="MobileApplication", alias='@type', const=True)
    carrierRequirements: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Specifies specific carrier(s) requirements for the application (e.g. an application"
     "may only work on a specific carrier network).",
    )
    



class DiagnosticProcedure(MedicalProcedure):
    """A medical procedure intended primarily for diagnostic, as opposed to therapeutic,"
     "purposes.

    See: https://schema.org/DiagnosticProcedure
    Model depth: 4
    """
    type_: str = Field(default="DiagnosticProcedure", alias='@type', const=True)
    



class LegalService(LocalBusiness):
    """A LegalService is a business that provides legally-oriented services, advice and representation,"
     "e.g. law firms. As a [[LocalBusiness]] it can be described as a [[provider]] of one or"
     "more [[Service]]\(s).

    See: https://schema.org/LegalService
    Model depth: 4
    """
    type_: str = Field(default="LegalService", alias='@type', const=True)
    



class Attorney(LegalService):
    """Professional service: Attorney. This type is deprecated - [[LegalService]] is more"
     "inclusive and less ambiguous.

    See: https://schema.org/Attorney
    Model depth: 5
    """
    type_: str = Field(default="Attorney", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryA(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class A as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryA
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryA", alias='@type', const=True)
    



class BloodTest(MedicalTest):
    """A medical test performed on a sample of a patient's blood.

    See: https://schema.org/BloodTest
    Model depth: 4
    """
    type_: str = Field(default="BloodTest", alias='@type', const=True)
    



class RadioStation(LocalBusiness):
    """A radio station.

    See: https://schema.org/RadioStation
    Model depth: 4
    """
    type_: str = Field(default="RadioStation", alias='@type', const=True)
    



class ComputerStore(Store):
    """A computer store.

    See: https://schema.org/ComputerStore
    Model depth: 5
    """
    type_: str = Field(default="ComputerStore", alias='@type', const=True)
    



class RentalCarReservation(Reservation):
    """A reservation for a rental car. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations.

    See: https://schema.org/RentalCarReservation
    Model depth: 4
    """
    type_: str = Field(default="RentalCarReservation", alias='@type', const=True)
    pickupTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="When a taxi will pick up a passenger or a rental car can be picked up.",
    )
    pickupLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="Where a taxi will pick up a passenger or a rental car can be picked up.",
    )
    dropoffLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="Where a rental car can be dropped off.",
    )
    dropoffTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="When a rental car can be dropped off.",
    )
    



class ItemList(Intangible):
    """A list of items of any sort&#x2014;for example, Top 10 Movies About Weathermen, or Top"
     "100 Party Songs. Not to be confused with HTML lists, which are often used only for formatting.

    See: https://schema.org/ItemList
    Model depth: 3
    """
    type_: str = Field(default="ItemList", alias='@type', const=True)
    itemListOrder: Optional[Union[List[Union[str, Text, ItemListOrderType]], str, Text, ItemListOrderType]] = Field(
        default=None,
        description="Type of ordering (e.g. Ascending, Descending, Unordered).",
    )
    numberOfItems: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of items in an ItemList. Note that some descriptions might not fully describe"
     "all items in a list (e.g., multi-page pagination); in such cases, the numberOfItems"
     "would be for the entire list.",
    )
    itemListElement: Optional[Union[List[Union[str, Text, Thing, ListItem]], str, Text, Thing, ListItem]] = Field(
        default=None,
        description="For itemListElement values, you can use simple strings (e.g. \"Peter\", \"Paul\","
     "\"Mary\"), existing entities, or use ListItem. Text values are best if the elements"
     "in the list are plain strings. Existing entities are best for a simple, unordered list"
     "of existing things in your data. ListItem is used with ordered lists when you want to provide"
     "additional context about the element in that list or when the same item might be in different"
     "places in different lists. Note: The order of elements in your mark-up is not sufficient"
     "for indicating the order or elements. Use ListItem with a 'position' property in such"
     "cases.",
    )
    



class CausesHealthAspect(HealthAspectEnumeration):
    """Information about the causes and main actions that gave rise to the topic.

    See: https://schema.org/CausesHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="CausesHealthAspect", alias='@type', const=True)
    



class RestrictedDiet(Enumeration):
    """A diet restricted to certain foods or preparations for cultural, religious, health"
     "or lifestyle reasons.

    See: https://schema.org/RestrictedDiet
    Model depth: 4
    """
    type_: str = Field(default="RestrictedDiet", alias='@type', const=True)
    



class VegetarianDiet(RestrictedDiet):
    """A diet exclusive of animal meat.

    See: https://schema.org/VegetarianDiet
    Model depth: 5
    """
    type_: str = Field(default="VegetarianDiet", alias='@type', const=True)
    



class MerchantReturnPolicySeasonalOverride(Intangible):
    """A seasonal override of a return policy, for example used for holidays.

    See: https://schema.org/MerchantReturnPolicySeasonalOverride
    Model depth: 3
    """
    type_: str = Field(default="MerchantReturnPolicySeasonalOverride", alias='@type', const=True)
    returnPolicyCategory: Optional[Union[List[Union[MerchantReturnEnumeration, str]], MerchantReturnEnumeration, str]] = Field(
        default=None,
        description="Specifies an applicable return policy (from an enumeration).",
    )
    merchantReturnDays: Optional[Union[List[Union[int, Integer, datetime, DateTime, date, Date, str]], int, Integer, datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Specifies either a fixed return date or the number of days (from the delivery date) that"
     "a product can be returned. Used when the [[returnPolicyCategory]] property is specified"
     "as [[MerchantReturnFiniteReturnWindow]].",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class RearWheelDriveConfiguration(DriveWheelConfigurationValue):
    """Real-wheel drive is a transmission layout where the engine drives the rear wheels.

    See: https://schema.org/RearWheelDriveConfiguration
    Model depth: 6
    """
    type_: str = Field(default="RearWheelDriveConfiguration", alias='@type', const=True)
    



class ContactPointOption(Enumeration):
    """Enumerated options related to a ContactPoint.

    See: https://schema.org/ContactPointOption
    Model depth: 4
    """
    type_: str = Field(default="ContactPointOption", alias='@type', const=True)
    



class IgnoreAction(AssessAction):
    """The act of intentionally disregarding the object. An agent ignores an object.

    See: https://schema.org/IgnoreAction
    Model depth: 4
    """
    type_: str = Field(default="IgnoreAction", alias='@type', const=True)
    



class UserCheckins(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserCheckins
    Model depth: 4
    """
    type_: str = Field(default="UserCheckins", alias='@type', const=True)
    



class MoveAction(Action):
    """The act of an agent relocating to a place. Related actions: * [[TransferAction]]: Unlike"
     "TransferAction, the subject of the move is a living Person or Organization rather than"
     "an inanimate object.

    See: https://schema.org/MoveAction
    Model depth: 3
    """
    type_: str = Field(default="MoveAction", alias='@type', const=True)
    toLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The final location of the object or the agent after the action.",
    )
    fromLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The original location of the object or the agent before the"
     "action.",
    )
    



class ArriveAction(MoveAction):
    """The act of arriving at a place. An agent arrives at a destination from a fromLocation,"
     "optionally with participants.

    See: https://schema.org/ArriveAction
    Model depth: 4
    """
    type_: str = Field(default="ArriveAction", alias='@type', const=True)
    



class RecyclingCenter(LocalBusiness):
    """A recycling center.

    See: https://schema.org/RecyclingCenter
    Model depth: 4
    """
    type_: str = Field(default="RecyclingCenter", alias='@type', const=True)
    



class HomeAndConstructionBusiness(LocalBusiness):
    """A construction business. A HomeAndConstructionBusiness is a [[LocalBusiness]] that"
     "provides services around homes and buildings. As a [[LocalBusiness]] it can be described"
     "as a [[provider]] of one or more [[Service]]\(s).

    See: https://schema.org/HomeAndConstructionBusiness
    Model depth: 4
    """
    type_: str = Field(default="HomeAndConstructionBusiness", alias='@type', const=True)
    



class RoofingContractor(HomeAndConstructionBusiness):
    """A roofing contractor.

    See: https://schema.org/RoofingContractor
    Model depth: 5
    """
    type_: str = Field(default="RoofingContractor", alias='@type', const=True)
    



class WearableMeasurementLength(WearableMeasurementTypeEnumeration):
    """Represents the length, for example of a dress

    See: https://schema.org/WearableMeasurementLength
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementLength", alias='@type', const=True)
    



class ReservationConfirmed(ReservationStatusType):
    """The status of a confirmed reservation.

    See: https://schema.org/ReservationConfirmed
    Model depth: 6
    """
    type_: str = Field(default="ReservationConfirmed", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryC(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class C as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryC
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryC", alias='@type', const=True)
    



class GeoCoordinates(StructuredValue):
    """The geographic coordinates of a place or event.

    See: https://schema.org/GeoCoordinates
    Model depth: 4
    """
    type_: str = Field(default="GeoCoordinates", alias='@type', const=True)
    longitude: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The longitude of a location. For example ```-122.08585``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
    )
    elevation: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The elevation of a location ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System))."
     "Values may be of the form 'NUMBER UNIT\_OF\_MEASUREMENT' (e.g., '1,000 m', '3,200 ft')"
     "while numbers alone should be assumed to be a value in meters.",
    )
    addressCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2"
     "country code](http://en.wikipedia.org/wiki/ISO_3166-1).",
    )
    postalCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The postal code. For example, 94043.",
    )
    address: Optional[Union[List[Union[str, Text, PostalAddress]], str, Text, PostalAddress]] = Field(
        default=None,
        description="Physical address of the item.",
    )
    latitude: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The latitude of a location. For example ```37.42242``` ([WGS 84](https://en.wikipedia.org/wiki/World_Geodetic_System)).",
    )
    



class PriceTypeEnumeration(Enumeration):
    """Enumerates different price types, for example list price, invoice price, and sale price.

    See: https://schema.org/PriceTypeEnumeration
    Model depth: 4
    """
    type_: str = Field(default="PriceTypeEnumeration", alias='@type', const=True)
    



class SRP(PriceTypeEnumeration):
    """Represents the suggested retail price (\"SRP\") of an offered product.

    See: https://schema.org/SRP
    Model depth: 5
    """
    type_: str = Field(default="SRP", alias='@type', const=True)
    



class TaxiStand(CivicStructure):
    """A taxi stand.

    See: https://schema.org/TaxiStand
    Model depth: 4
    """
    type_: str = Field(default="TaxiStand", alias='@type', const=True)
    



class Nonprofit501c2(USNonprofitType):
    """Nonprofit501c2: Non-profit type referring to Title-holding Corporations for Exempt"
     "Organizations.

    See: https://schema.org/Nonprofit501c2
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c2", alias='@type', const=True)
    



class ClothingStore(Store):
    """A clothing store.

    See: https://schema.org/ClothingStore
    Model depth: 5
    """
    type_: str = Field(default="ClothingStore", alias='@type', const=True)
    



class VideoObject(MediaObject):
    """A video file.

    See: https://schema.org/VideoObject
    Model depth: 4
    """
    type_: str = Field(default="VideoObject", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    caption: Optional[Union[List[Union[str, Text, MediaObject]], str, Text, MediaObject]] = Field(
        default=None,
        description="The caption for this object. For downloadable machine formats (closed caption, subtitles"
     "etc.) use MediaObject and indicate the [[encodingFormat]].",
    )
    thumbnail: Optional[Union[List[Union[ImageObject, str]], ImageObject, str]] = Field(
        default=None,
        description="Thumbnail image for an image or video.",
    )
    embeddedTextCaption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    videoFrameSize: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The frame size of the video.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    transcript: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If this MediaObject is an AudioObject or VideoObject, the transcript of that object.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    videoQuality: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The quality of the video.",
    )
    



class VideoObjectSnapshot(VideoObject):
    """A specific and exact (byte-for-byte) version of a [[VideoObject]]. Two byte-for-byte"
     "identical files, for the purposes of this type, considered identical. If they have different"
     "embedded metadata the files will differ. Different external facts about the files,"
     "e.g. creator or dateCreated that aren't represented in their actual content, do not"
     "affect this notion of identity.

    See: https://schema.org/VideoObjectSnapshot
    Model depth: 5
    """
    type_: str = Field(default="VideoObjectSnapshot", alias='@type', const=True)
    



class OverviewHealthAspect(HealthAspectEnumeration):
    """Overview of the content. Contains a summarized view of the topic with the most relevant"
     "information for an introduction.

    See: https://schema.org/OverviewHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="OverviewHealthAspect", alias='@type', const=True)
    



class Guide(CreativeWork):
    """[[Guide]] is a page or article that recommends specific products or services, or aspects"
     "of a thing for a user to consider. A [[Guide]] may represent a Buying Guide and detail aspects"
     "of products or services for a user to consider. A [[Guide]] may represent a Product Guide"
     "and recommend specific products or services. A [[Guide]] may represent a Ranked List"
     "and recommend specific products or services with ranking.

    See: https://schema.org/Guide
    Model depth: 3
    """
    type_: str = Field(default="Guide", alias='@type', const=True)
    reviewAspect: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="This Review or Rating is relevant to this part or facet of the itemReviewed.",
    )
    



class TransferAction(Action):
    """The act of transferring/moving (abstract or concrete) animate or inanimate objects"
     "from one place to another.

    See: https://schema.org/TransferAction
    Model depth: 3
    """
    type_: str = Field(default="TransferAction", alias='@type', const=True)
    toLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The final location of the object or the agent after the action.",
    )
    fromLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The original location of the object or the agent before the"
     "action.",
    )
    



class MoneyTransfer(TransferAction):
    """The act of transferring money from one place to another place. This may occur electronically"
     "or physically.

    See: https://schema.org/MoneyTransfer
    Model depth: 4
    """
    type_: str = Field(default="MoneyTransfer", alias='@type', const=True)
    amount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money.",
    )
    beneficiaryBank: Optional[Union[List[Union[str, Text, BankOrCreditUnion]], str, Text, BankOrCreditUnion]] = Field(
        default=None,
        description="A bank or bank’s branch, financial institution or international financial institution"
     "operating the beneficiary’s bank account or releasing funds for the beneficiary.",
    )
    



class Festival(Event):
    """Event type: Festival.

    See: https://schema.org/Festival
    Model depth: 3
    """
    type_: str = Field(default="Festival", alias='@type', const=True)
    



class Endocrine(MedicalSpecialty):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of endocrine glands and their secretions.

    See: https://schema.org/Endocrine
    Model depth: 6
    """
    type_: str = Field(default="Endocrine", alias='@type', const=True)
    



class WearableMeasurementOutsideLeg(WearableMeasurementTypeEnumeration):
    """Measurement of the outside leg, for example of pants

    See: https://schema.org/WearableMeasurementOutsideLeg
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementOutsideLeg", alias='@type', const=True)
    



class MusicAlbum(MusicPlaylist):
    """A collection of music tracks.

    See: https://schema.org/MusicAlbum
    Model depth: 4
    """
    type_: str = Field(default="MusicAlbum", alias='@type', const=True)
    albumReleaseType: Optional[Union[List[Union[MusicAlbumReleaseType, str]], MusicAlbumReleaseType, str]] = Field(
        default=None,
        description="The kind of release which this album is: single, EP or album.",
    )
    albumRelease: Optional[Union[List[Union[MusicRelease, str]], MusicRelease, str]] = Field(
        default=None,
        description="A release of this album.",
    )
    byArtist: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The artist that performed this album or recording.",
    )
    albumProductionType: Optional[Union[List[Union[MusicAlbumProductionType, str]], MusicAlbumProductionType, str]] = Field(
        default=None,
        description="Classification of the album by its type of content: soundtrack, live album, studio album,"
     "etc.",
    )
    



class Article(CreativeWork):
    """An article, such as a news article or piece of investigative report. Newspapers and magazines"
     "have articles of many different types and this is intended to cover them all. See also"
     "[blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).

    See: https://schema.org/Article
    Model depth: 3
    """
    type_: str = Field(default="Article", alias='@type', const=True)
    pageEnd: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work ends; for example \"138\" or \"xvi\".",
    )
    wordCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of words in the text of the Article.",
    )
    articleSection: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Articles may belong to one or more 'sections' in a magazine or newspaper, such as Sports,"
     "Lifestyle, etc.",
    )
    articleBody: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The actual body of the article.",
    )
    speakable: Optional[Union[List[Union[AnyUrl, URL, SpeakableSpecification, str]], AnyUrl, URL, SpeakableSpecification, str]] = Field(
        default=None,
        description="Indicates sections of a Web page that are particularly 'speakable' in the sense of being"
     "highlighted as being especially appropriate for text-to-speech conversion. Other"
     "sections of a page may also be usefully spoken in particular circumstances; the 'speakable'"
     "property serves to indicate the parts most likely to be generally useful for speech."
     "The *speakable* property can be repeated an arbitrary number of times, with three kinds"
     "of possible 'content-locator' values: 1.) *id-value* URL references - uses *id-value*"
     "of an element in the page being annotated. The simplest use of *speakable* has (potentially"
     "relative) URL values, referencing identified sections of the document concerned."
     "2.) CSS Selectors - addresses content in the annotated page, e.g. via class attribute."
     "Use the [[cssSelector]] property. 3.) XPaths - addresses content via XPaths (assuming"
     "an XML view of the content). Use the [[xpath]] property. For more sophisticated markup"
     "of speakable sections beyond simple ID references, either CSS selectors or XPath expressions"
     "to pick out document section(s) as speakable. For this we define a supporting type, [[SpeakableSpecification]]"
     "which is defined to be a possible value of the *speakable* property.",
    )
    backstory: Optional[Union[List[Union[str, Text, CreativeWork]], str, Text, CreativeWork]] = Field(
        default=None,
        description="For an [[Article]], typically a [[NewsArticle]], the backstory property provides"
     "a textual summary giving a brief explanation of why and how an article was created. In"
     "a journalistic setting this could include information about reporting process, methods,"
     "interviews, data sources, etc.",
    )
    pagination: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any description of pages that is not separated into pageStart and pageEnd; for example,"
     "\"1-6, 9, 55\" or \"10-12, 46-49\".",
    )
    pageStart: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work starts; for example \"135\" or \"xiii\".",
    )
    



class NewsArticle(Article):
    """A NewsArticle is an article whose content reports news, or provides background context"
     "and supporting materials for understanding the news. A more detailed overview of [schema.org"
     "News markup](/docs/news.html) is also available.

    See: https://schema.org/NewsArticle
    Model depth: 4
    """
    type_: str = Field(default="NewsArticle", alias='@type', const=True)
    printColumn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The number of the column in which the NewsArticle appears in the print edition.",
    )
    printEdition: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The edition of the print product in which the NewsArticle appears.",
    )
    printSection: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If this NewsArticle appears in print, this field indicates the print section in which"
     "the article appeared.",
    )
    printPage: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If this NewsArticle appears in print, this field indicates the name of the page on which"
     "the article is found. Please note that this field is intended for the exact page name (e.g."
     "A5, B18).",
    )
    dateline: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A [dateline](https://en.wikipedia.org/wiki/Dateline) is a brief piece of text included"
     "in news articles that describes where and when the story was written or filed though the"
     "date is often omitted. Sometimes only a placename is provided. Structured representations"
     "of dateline-related information can also be expressed more explicitly using [[locationCreated]]"
     "(which represents where a work was created, e.g. where a news report was written). For"
     "location depicted or described in the content, use [[contentLocation]]. Dateline"
     "summaries are oriented more towards human readers than towards automated processing,"
     "and can vary substantially. Some examples: \"BEIRUT, Lebanon, June 2.\", \"Paris,"
     "France\", \"December 19, 2017 11:43AM Reporting from Washington\", \"Beijing/Moscow\","
     "\"QUEZON CITY, Philippines\".",
    )
    



class AskPublicNewsArticle(NewsArticle):
    """A [[NewsArticle]] expressing an open call by a [[NewsMediaOrganization]] asking the"
     "public for input, insights, clarifications, anecdotes, documentation, etc., on an"
     "issue, for reporting purposes.

    See: https://schema.org/AskPublicNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="AskPublicNewsArticle", alias='@type', const=True)
    



class ServiceChannel(Intangible):
    """A means for accessing a service, e.g. a government office location, web site, or phone"
     "number.

    See: https://schema.org/ServiceChannel
    Model depth: 3
    """
    type_: str = Field(default="ServiceChannel", alias='@type', const=True)
    servicePhone: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="The phone number to use to access the service.",
    )
    availableLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="A language someone may use with or at the item, service or place. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[inLanguage]].",
    )
    serviceUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The website to access the service.",
    )
    processingTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="Estimated processing time for the service using this channel.",
    )
    servicePostalAddress: Optional[Union[List[Union[PostalAddress, str]], PostalAddress, str]] = Field(
        default=None,
        description="The address for accessing the service by mail.",
    )
    providesService: Optional[Union[List[Union[Service, str]], Service, str]] = Field(
        default=None,
        description="The service provided by this channel.",
    )
    serviceSmsNumber: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="The number to access the service by text message.",
    )
    serviceLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The location (e.g. civic structure, local business, etc.) where a person can go to access"
     "the service.",
    )
    



class Saturday(DayOfWeek):
    """The day of the week between Friday and Sunday.

    See: https://schema.org/Saturday
    Model depth: 5
    """
    type_: str = Field(default="Saturday", alias='@type', const=True)
    



class OccupationalExperienceRequirements(Intangible):
    """Indicates employment-related experience requirements, e.g. [[monthsOfExperience]].

    See: https://schema.org/OccupationalExperienceRequirements
    Model depth: 3
    """
    type_: str = Field(default="OccupationalExperienceRequirements", alias='@type', const=True)
    monthsOfExperience: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Indicates the minimal number of months of experience required for a position.",
    )
    



class HealthPlanNetwork(Intangible):
    """A US-style health insurance plan network.

    See: https://schema.org/HealthPlanNetwork
    Model depth: 3
    """
    type_: str = Field(default="HealthPlanNetwork", alias='@type', const=True)
    healthPlanNetworkTier: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The tier(s) for this network.",
    )
    healthPlanNetworkId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Name or unique ID of network. (Networks are often reused across different insurance"
     "plans.)",
    )
    healthPlanCostSharing: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="The costs to the patient for services under this network or formulary.",
    )
    



class TouristTrip(Trip):
    """A tourist trip. A created itinerary of visits to one or more places of interest ([[TouristAttraction]]/[[TouristDestination]])"
     "often linked by a similar theme, geographic area, or interest to a particular [[touristType]]."
     "The [UNWTO](http://www2.unwto.org/) defines tourism trip as the Trip taken by visitors."
     "(See examples below.)

    See: https://schema.org/TouristTrip
    Model depth: 4
    """
    type_: str = Field(default="TouristTrip", alias='@type', const=True)
    touristType: Optional[Union[List[Union[str, Text, Audience]], str, Text, Audience]] = Field(
        default=None,
        description="Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular"
     "country, etc.",
    )
    



class SymptomsHealthAspect(HealthAspectEnumeration):
    """Symptoms or related symptoms of a Topic.

    See: https://schema.org/SymptomsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="SymptomsHealthAspect", alias='@type', const=True)
    



class Neuro(PhysicalExam):
    """Neurological system clinical examination.

    See: https://schema.org/Neuro
    Model depth: 5
    """
    type_: str = Field(default="Neuro", alias='@type', const=True)
    



class HobbyShop(Store):
    """A store that sells materials useful or necessary for various hobbies.

    See: https://schema.org/HobbyShop
    Model depth: 5
    """
    type_: str = Field(default="HobbyShop", alias='@type', const=True)
    



class BodyMeasurementFoot(BodyMeasurementTypeEnumeration):
    """Foot length (measured between end of the most prominent toe and the most prominent part"
     "of the heel). Used, for example, to measure socks.

    See: https://schema.org/BodyMeasurementFoot
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementFoot", alias='@type', const=True)
    



class Casino(EntertainmentBusiness):
    """A casino.

    See: https://schema.org/Casino
    Model depth: 5
    """
    type_: str = Field(default="Casino", alias='@type', const=True)
    



class SoftwareSourceCode(CreativeWork):
    """Computer programming source code. Example: Full (compile ready) solutions, code snippet"
     "samples, scripts, templates.

    See: https://schema.org/SoftwareSourceCode
    Model depth: 3
    """
    type_: str = Field(default="SoftwareSourceCode", alias='@type', const=True)
    targetProduct: Optional[Union[List[Union[SoftwareApplication, str]], SoftwareApplication, str]] = Field(
        default=None,
        description="Target Operating System / Product to which the code applies. If applies to several versions,"
     "just the product name can be used.",
    )
    runtimePlatform: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3,"
     ".NET Framework 3.0).",
    )
    codeSampleType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="What type of code sample: full (compile ready) solution, code snippet, inline code,"
     "scripts, template.",
    )
    runtime: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Runtime platform or script interpreter dependencies (example: Java v1, Python 2.3,"
     ".NET Framework 3.0).",
    )
    programmingLanguage: Optional[Union[List[Union[str, Text, ComputerLanguage]], str, Text, ComputerLanguage]] = Field(
        default=None,
        description="The computer programming language.",
    )
    sampleType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="What type of code sample: full (compile ready) solution, code snippet, inline code,"
     "scripts, template.",
    )
    codeRepository: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Link to the repository where the un-compiled, human readable code and related code is"
     "located (SVN, GitHub, CodePlex).",
    )
    



class MultiCenterTrial(MedicalTrialDesign):
    """A trial that takes place at multiple centers.

    See: https://schema.org/MultiCenterTrial
    Model depth: 6
    """
    type_: str = Field(default="MultiCenterTrial", alias='@type', const=True)
    



class ItemAvailability(Enumeration):
    """A list of possible product availability options.

    See: https://schema.org/ItemAvailability
    Model depth: 4
    """
    type_: str = Field(default="ItemAvailability", alias='@type', const=True)
    



class BackOrder(ItemAvailability):
    """Indicates that the item is available on back order.

    See: https://schema.org/BackOrder
    Model depth: 5
    """
    type_: str = Field(default="BackOrder", alias='@type', const=True)
    



class CreativeWorkSeason(CreativeWork):
    """A media season, e.g. TV, radio, video game etc.

    See: https://schema.org/CreativeWorkSeason
    Model depth: 3
    """
    type_: str = Field(default="CreativeWorkSeason", alias='@type', const=True)
    seasonNumber: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="Position of the season within an ordered group of seasons.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    episodes: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV/radio series or season.",
    )
    partOfSeries: Optional[Union[List[Union[CreativeWorkSeries, str]], CreativeWorkSeries, str]] = Field(
        default=None,
        description="The series to which this episode or season belongs.",
    )
    episode: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV, radio or game media within a series or season.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    numberOfEpisodes: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of episodes in this season or series.",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class PodcastSeason(CreativeWorkSeason):
    """A single season of a podcast. Many podcasts do not break down into separate seasons. In"
     "that case, PodcastSeries should be used.

    See: https://schema.org/PodcastSeason
    Model depth: 4
    """
    type_: str = Field(default="PodcastSeason", alias='@type', const=True)
    



class EventReservation(Reservation):
    """A reservation for an event like a concert, sporting event, or lecture. Note: This type"
     "is for information about actual reservations, e.g. in confirmation emails or HTML pages"
     "with individual confirmations of reservations. For offers of tickets, use [[Offer]].

    See: https://schema.org/EventReservation
    Model depth: 4
    """
    type_: str = Field(default="EventReservation", alias='@type', const=True)
    



class MedicalProcedureType(MedicalEnumeration):
    """An enumeration that describes different types of medical procedures.

    See: https://schema.org/MedicalProcedureType
    Model depth: 5
    """
    type_: str = Field(default="MedicalProcedureType", alias='@type', const=True)
    



class Rating(Intangible):
    """A rating is an evaluation on a numeric scale, such as 1 to 5 stars.

    See: https://schema.org/Rating
    Model depth: 3
    """
    type_: str = Field(default="Rating", alias='@type', const=True)
    reviewAspect: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="This Review or Rating is relevant to this part or facet of the itemReviewed.",
    )
    author: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The author of this content or rating. Please note that author is special in that HTML 5"
     "provides a special mechanism for indicating authorship via the rel tag. That is equivalent"
     "to this and may be used interchangeably.",
    )
    ratingExplanation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short explanation (e.g. one to two sentences) providing background context and other"
     "information that led to the conclusion expressed in the rating. This is particularly"
     "applicable to ratings associated with \"fact check\" markup using [[ClaimReview]].",
    )
    bestRating: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The highest value allowed in this rating system. If bestRating is omitted, 5 is assumed.",
    )
    ratingValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The rating for the content. Usage guidelines: * Use values from 0123456789 (Unicode"
     "'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar"
     "Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate"
     "a decimal point. Avoid using these symbols as a readability separator.",
    )
    worstRating: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The lowest value allowed in this rating system. If worstRating is omitted, 1 is assumed.",
    )
    



class AggregateRating(Rating):
    """The average rating based on multiple ratings or reviews.

    See: https://schema.org/AggregateRating
    Model depth: 4
    """
    type_: str = Field(default="AggregateRating", alias='@type', const=True)
    itemReviewed: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The item that is being reviewed/rated.",
    )
    ratingCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The count of total number of ratings.",
    )
    reviewCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The count of total number of reviews.",
    )
    



class DataDownload(MediaObject):
    """All or part of a [[Dataset]] in downloadable form.

    See: https://schema.org/DataDownload
    Model depth: 4
    """
    type_: str = Field(default="DataDownload", alias='@type', const=True)
    measurementTechnique: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),"
     "corresponding to the method used for measuring the corresponding variable(s) (described"
     "using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset"
     "publication but may have broader applicability; it is not intended as a full representation"
     "of measurement, but rather as a high level summary for dataset discovery. For example,"
     "if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]]"
     "could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\"."
     "If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]]"
     "could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are"
     "several [[variableMeasured]] properties recorded for some given data object, use"
     "a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].",
    )
    



class MerchantReturnEnumeration(Enumeration):
    """Enumerates several kinds of product return policies.

    See: https://schema.org/MerchantReturnEnumeration
    Model depth: 4
    """
    type_: str = Field(default="MerchantReturnEnumeration", alias='@type', const=True)
    



class MerchantReturnUnlimitedWindow(MerchantReturnEnumeration):
    """Specifies that there is an unlimited window for product returns.

    See: https://schema.org/MerchantReturnUnlimitedWindow
    Model depth: 5
    """
    type_: str = Field(default="MerchantReturnUnlimitedWindow", alias='@type', const=True)
    



class CreativeWorkSeries(Series, CreativeWork):
    """A CreativeWorkSeries in schema.org is a group of related items, typically but not necessarily"
     "of the same kind. CreativeWorkSeries are usually organized into some order, often chronological."
     "Unlike [[ItemList]] which is a general purpose data structure for lists of things, the"
     "emphasis with CreativeWorkSeries is on published materials (written e.g. books and"
     "periodicals, or media such as TV, radio and games). Specific subtypes are available"
     "for describing [[TVSeries]], [[RadioSeries]], [[MovieSeries]], [[BookSeries]],"
     "[[Periodical]] and [[VideoGameSeries]]. In each case, the [[hasPart]] / [[isPartOf]]"
     "properties can be used to relate the CreativeWorkSeries to its parts. The general CreativeWorkSeries"
     "type serves largely just to organize these more specific and practical subtypes. It"
     "is common for properties applicable to an item from the series to be usefully applied"
     "to the containing group. Schema.org attempts to anticipate some of these cases, but"
     "publishers should be free to apply properties of the series parts to the series as a whole"
     "wherever they seem appropriate.

    See: https://schema.org/CreativeWorkSeries
    Model depth: 3
    """
    type_: str = Field(default="CreativeWorkSeries", alias='@type', const=True)
    issn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Serial Number (ISSN) that identifies this serial publication."
     "You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L)"
     "for, this serial publication.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class Periodical(CreativeWorkSeries):
    """A publication in any medium issued in successive parts bearing numerical or chronological"
     "designations and intended to continue indefinitely, such as a magazine, scholarly"
     "journal, or newspaper. See also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).

    See: https://schema.org/Periodical
    Model depth: 4
    """
    type_: str = Field(default="Periodical", alias='@type', const=True)
    



class ComicSeries(Periodical):
    """A sequential publication of comic stories under a unifying title, for example \"The"
     "Amazing Spider-Man\" or \"Groo the Wanderer\".

    See: https://schema.org/ComicSeries
    Model depth: 5
    """
    type_: str = Field(default="ComicSeries", alias='@type', const=True)
    



class AdultOrientedEnumeration(Enumeration):
    """Enumeration of considerations that make a product relevant or potentially restricted"
     "for adults only.

    See: https://schema.org/AdultOrientedEnumeration
    Model depth: 4
    """
    type_: str = Field(default="AdultOrientedEnumeration", alias='@type', const=True)
    



class SexualContentConsideration(AdultOrientedEnumeration):
    """The item contains sexually oriented content such as nudity, suggestive or explicit"
     "material, or related online services, or is intended to enhance sexual activity. Examples:"
     "Erotic videos or magazine, sexual enhancement devices, sex toys.

    See: https://schema.org/SexualContentConsideration
    Model depth: 5
    """
    type_: str = Field(default="SexualContentConsideration", alias='@type', const=True)
    



class GovernmentService(Service):
    """A service provided by a government organization, e.g. food stamps, veterans benefits,"
     "etc.

    See: https://schema.org/GovernmentService
    Model depth: 4
    """
    type_: str = Field(default="GovernmentService", alias='@type', const=True)
    serviceOperator: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The operating organization, if different from the provider. This enables the representation"
     "of services that are provided by an organization, but operated by another organization"
     "like a subcontractor.",
    )
    jurisdiction: Optional[Union[List[Union[str, Text, AdministrativeArea]], str, Text, AdministrativeArea]] = Field(
        default=None,
        description="Indicates a legal jurisdiction, e.g. of some legislation, or where some government"
     "service is based.",
    )
    



class Landform(Place):
    """A landform or physical feature. Landform elements include mountains, plains, lakes,"
     "rivers, seascape and oceanic waterbody interface features such as bays, peninsulas,"
     "seas and so forth, including sub-aqueous terrain features such as submersed mountain"
     "ranges, volcanoes, and the great ocean basins.

    See: https://schema.org/Landform
    Model depth: 3
    """
    type_: str = Field(default="Landform", alias='@type', const=True)
    



class Continent(Landform):
    """One of the continents (for example, Europe or Africa).

    See: https://schema.org/Continent
    Model depth: 4
    """
    type_: str = Field(default="Continent", alias='@type', const=True)
    



class EducationalOccupationalCredential(CreativeWork):
    """An educational or occupational credential. A diploma, academic degree, certification,"
     "qualification, badge, etc., that may be awarded to a person or other entity that meets"
     "the requirements defined by the credentialer.

    See: https://schema.org/EducationalOccupationalCredential
    Model depth: 3
    """
    type_: str = Field(default="EducationalOccupationalCredential", alias='@type', const=True)
    educationalLevel: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="The level in terms of progression through an educational or training context. Examples"
     "of educational levels include 'beginner', 'intermediate' or 'advanced', and formal"
     "sets of level indicators.",
    )
    competencyRequired: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="Knowledge, skill, ability or personal attribute that must be demonstrated by a person"
     "or other entity in order to do something such as earn an Educational Occupational Credential"
     "or understand a LearningResource.",
    )
    recognizedBy: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="An organization that acknowledges the validity, value or utility of a credential. Note:"
     "recognition may include a process of quality assurance or accreditation.",
    )
    validFor: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of validity of a permit or similar thing.",
    )
    validIn: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area where a permit or similar thing is valid.",
    )
    credentialCategory: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="The category or type of credential being described, for example \"degree”, “certificate”,"
     "“badge”, or more specific term.",
    )
    



class MedicalCondition(MedicalEntity):
    """Any condition of the human body that affects the normal functioning of a person, whether"
     "physically or mentally. Includes diseases, injuries, disabilities, disorders, syndromes,"
     "etc.

    See: https://schema.org/MedicalCondition
    Model depth: 3
    """
    type_: str = Field(default="MedicalCondition", alias='@type', const=True)
    riskFactor: Optional[Union[List[Union[MedicalRiskFactor, str]], MedicalRiskFactor, str]] = Field(
        default=None,
        description="A modifiable or non-modifiable factor that increases the risk of a patient contracting"
     "this condition, e.g. age, coexisting condition.",
    )
    primaryPrevention: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A preventative therapy used to prevent an initial occurrence of the medical condition,"
     "such as vaccination.",
    )
    expectedPrognosis: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The likely outcome in either the short term or long term of the medical condition.",
    )
    typicalTest: Optional[Union[List[Union[MedicalTest, str]], MedicalTest, str]] = Field(
        default=None,
        description="A medical test typically performed given this condition.",
    )
    differentialDiagnosis: Optional[Union[List[Union[DDxElement, str]], DDxElement, str]] = Field(
        default=None,
        description="One of a set of differential diagnoses for the condition. Specifically, a closely-related"
     "or competing diagnosis typically considered later in the cognitive process whereby"
     "this medical condition is distinguished from others most likely responsible for a similar"
     "collection of signs and symptoms to reach the most parsimonious diagnosis or diagnoses"
     "in a patient.",
    )
    pathophysiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Changes in the normal mechanical, physical, and biochemical functions that are associated"
     "with this activity or condition.",
    )
    status: Optional[Union[List[Union[str, Text, EventStatusType, MedicalStudyStatus]], str, Text, EventStatusType, MedicalStudyStatus]] = Field(
        default=None,
        description="The status of the study (enumerated).",
    )
    naturalProgression: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The expected progression of the condition if it is not treated and allowed to progress"
     "naturally.",
    )
    drug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Specifying a drug or medicine used in a medication procedure.",
    )
    secondaryPrevention: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A preventative therapy used to prevent reoccurrence of the medical condition after"
     "an initial episode of the condition.",
    )
    signOrSymptom: Optional[Union[List[Union[MedicalSignOrSymptom, str]], MedicalSignOrSymptom, str]] = Field(
        default=None,
        description="A sign or symptom of this condition. Signs are objective or physically observable manifestations"
     "of the medical condition while symptoms are the subjective experience of the medical"
     "condition.",
    )
    possibleTreatment: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A possible treatment to address this condition, sign or symptom.",
    )
    epidemiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The characteristics of associated patients, such as age, gender, race etc.",
    )
    associatedAnatomy: Optional[Union[List[Union[SuperficialAnatomy, AnatomicalStructure, AnatomicalSystem, str]], SuperficialAnatomy, AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="The anatomy of the underlying organ system or structures associated with this entity.",
    )
    possibleComplication: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A possible unexpected and unfavorable evolution of a medical condition. Complications"
     "may include worsening of the signs or symptoms of the disease, extension of the condition"
     "to other organ systems, etc.",
    )
    stage: Optional[Union[List[Union[MedicalConditionStage, str]], MedicalConditionStage, str]] = Field(
        default=None,
        description="The stage of the condition, if applicable.",
    )
    



class InfectiousDisease(MedicalCondition):
    """An infectious disease is a clinically evident human disease resulting from the presence"
     "of pathogenic microbial agents, like pathogenic viruses, pathogenic bacteria, fungi,"
     "protozoa, multicellular parasites, and prions. To be considered an infectious disease,"
     "such pathogens are known to be able to cause this disease.

    See: https://schema.org/InfectiousDisease
    Model depth: 4
    """
    type_: str = Field(default="InfectiousDisease", alias='@type', const=True)
    infectiousAgent: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The actual infectious agent, such as a specific bacterium.",
    )
    infectiousAgentClass: Optional[Union[List[Union[InfectiousAgentClass, str]], InfectiousAgentClass, str]] = Field(
        default=None,
        description="The class of infectious agent (bacteria, prion, etc.) that causes the disease.",
    )
    transmissionMethod: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="How the disease spreads, either as a route or vector, for example 'direct contact', 'Aedes"
     "aegypti', etc.",
    )
    



class ReturnMethodEnumeration(Enumeration):
    """Enumerates several types of product return methods.

    See: https://schema.org/ReturnMethodEnumeration
    Model depth: 4
    """
    type_: str = Field(default="ReturnMethodEnumeration", alias='@type', const=True)
    



class ReturnByMail(ReturnMethodEnumeration):
    """Specifies that product returns must be done by mail.

    See: https://schema.org/ReturnByMail
    Model depth: 5
    """
    type_: str = Field(default="ReturnByMail", alias='@type', const=True)
    



class InfectiousAgentClass(MedicalEnumeration):
    """Classes of agents or pathogens that transmit infectious diseases. Enumerated type.

    See: https://schema.org/InfectiousAgentClass
    Model depth: 5
    """
    type_: str = Field(default="InfectiousAgentClass", alias='@type', const=True)
    



class Prion(InfectiousAgentClass):
    """A prion is an infectious agent composed of protein in a misfolded form.

    See: https://schema.org/Prion
    Model depth: 6
    """
    type_: str = Field(default="Prion", alias='@type', const=True)
    



class PerformingGroup(Organization):
    """A performance group, such as a band, an orchestra, or a circus.

    See: https://schema.org/PerformingGroup
    Model depth: 3
    """
    type_: str = Field(default="PerformingGroup", alias='@type', const=True)
    



class MusicGroup(PerformingGroup):
    """A musical group, such as a band, an orchestra, or a choir. Can also be a solo musician.

    See: https://schema.org/MusicGroup
    Model depth: 4
    """
    type_: str = Field(default="MusicGroup", alias='@type', const=True)
    album: Optional[Union[List[Union[MusicAlbum, str]], MusicAlbum, str]] = Field(
        default=None,
        description="A music album.",
    )
    tracks: Optional[Union[List[Union[MusicRecording, str]], MusicRecording, str]] = Field(
        default=None,
        description="A music recording (track)&#x2014;usually a single song.",
    )
    track: Optional[Union[List[Union[ItemList, MusicRecording, str]], ItemList, MusicRecording, str]] = Field(
        default=None,
        description="A music recording (track)&#x2014;usually a single song. If an ItemList is given, the"
     "list should contain items of type MusicRecording.",
    )
    albums: Optional[Union[List[Union[MusicAlbum, str]], MusicAlbum, str]] = Field(
        default=None,
        description="A collection of music albums.",
    )
    genre: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Genre of the creative work, broadcast channel or group.",
    )
    musicGroupMember: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A member of a music group&#x2014;for example, John, Paul, George, or Ringo.",
    )
    



class SingleCenterTrial(MedicalTrialDesign):
    """A trial that takes place at a single center.

    See: https://schema.org/SingleCenterTrial
    Model depth: 6
    """
    type_: str = Field(default="SingleCenterTrial", alias='@type', const=True)
    



class Nonprofit501c10(USNonprofitType):
    """Nonprofit501c10: Non-profit type referring to Domestic Fraternal Societies and Associations.

    See: https://schema.org/Nonprofit501c10
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c10", alias='@type', const=True)
    



class MedicalTestPanel(MedicalTest):
    """Any collection of tests commonly ordered together.

    See: https://schema.org/MedicalTestPanel
    Model depth: 4
    """
    type_: str = Field(default="MedicalTestPanel", alias='@type', const=True)
    subTest: Optional[Union[List[Union[MedicalTest, str]], MedicalTest, str]] = Field(
        default=None,
        description="A component test of the panel.",
    )
    



class DrugStrength(MedicalIntangible):
    """A specific strength in which a medical drug is available in a specific country.

    See: https://schema.org/DrugStrength
    Model depth: 4
    """
    type_: str = Field(default="DrugStrength", alias='@type', const=True)
    activeIngredient: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An active ingredient, typically chemical compounds and/or biologic substances.",
    )
    availableIn: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The location in which the strength is available.",
    )
    strengthValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The value of an active ingredient's strength, e.g. 325.",
    )
    strengthUnit: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The units of an active ingredient's strength, e.g. mg.",
    )
    maximumIntake: Optional[Union[List[Union[MaximumDoseSchedule, str]], MaximumDoseSchedule, str]] = Field(
        default=None,
        description="Recommended intake of this supplement for a given population as defined by a specific"
     "recommending authority.",
    )
    



class TypeAndQuantityNode(StructuredValue):
    """A structured value indicating the quantity, unit of measurement, and business function"
     "of goods included in a bundle offer.

    See: https://schema.org/TypeAndQuantityNode
    Model depth: 4
    """
    type_: str = Field(default="TypeAndQuantityNode", alias='@type', const=True)
    amountOfThisGood: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The quantity of the goods included in the offer.",
    )
    businessFunction: Optional[Union[List[Union[BusinessFunction, str]], BusinessFunction, str]] = Field(
        default=None,
        description="The business function (e.g. sell, lease, repair, dispose) of the offer or component"
     "of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.",
    )
    unitCode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL."
     "Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.",
    )
    unitText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A string or text indicating the unit of measurement. Useful if you cannot provide a standard"
     "unit code for <a href='unitCode'>unitCode</a>.",
    )
    typeOfGood: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="The product that this structured value is referring to.",
    )
    



class MediaSubscription(Intangible):
    """A subscription which allows a user to access media including audio, video, books, etc.

    See: https://schema.org/MediaSubscription
    Model depth: 3
    """
    type_: str = Field(default="MediaSubscription", alias='@type', const=True)
    expectsAcceptanceOf: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="An Offer which must be accepted before the user can perform the Action. For example, the"
     "user may need to buy a movie before being able to watch it.",
    )
    authenticator: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The Organization responsible for authenticating the user's subscription. For example,"
     "many media apps require a cable/satellite provider to authenticate your subscription"
     "before playing media.",
    )
    



class DrugCostCategory(MedicalEnumeration):
    """Enumerated categories of medical drug costs.

    See: https://schema.org/DrugCostCategory
    Model depth: 5
    """
    type_: str = Field(default="DrugCostCategory", alias='@type', const=True)
    



class Retail(DrugCostCategory):
    """The drug's cost represents the retail cost of the drug.

    See: https://schema.org/Retail
    Model depth: 6
    """
    type_: str = Field(default="Retail", alias='@type', const=True)
    



class WearableSizeGroupHusky(WearableSizeGroupEnumeration):
    """Size group \"Husky\" (or \"Stocky\") for wearables.

    See: https://schema.org/WearableSizeGroupHusky
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupHusky", alias='@type', const=True)
    



class DiabeticDiet(RestrictedDiet):
    """A diet appropriate for people with diabetes.

    See: https://schema.org/DiabeticDiet
    Model depth: 5
    """
    type_: str = Field(default="DiabeticDiet", alias='@type', const=True)
    



class MedicalImagingTechnique(MedicalEnumeration):
    """Any medical imaging modality typically used for diagnostic purposes. Enumerated type.

    See: https://schema.org/MedicalImagingTechnique
    Model depth: 5
    """
    type_: str = Field(default="MedicalImagingTechnique", alias='@type', const=True)
    



class XRay(MedicalImagingTechnique):
    """X-ray imaging.

    See: https://schema.org/XRay
    Model depth: 6
    """
    type_: str = Field(default="XRay", alias='@type', const=True)
    



class WearableMeasurementInseam(WearableMeasurementTypeEnumeration):
    """Measurement of the inseam, for example of pants

    See: https://schema.org/WearableMeasurementInseam
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementInseam", alias='@type', const=True)
    



class SeeDoctorHealthAspect(HealthAspectEnumeration):
    """Information about questions that may be asked, when to see a professional, measures"
     "before seeing a doctor or content about the first consultation.

    See: https://schema.org/SeeDoctorHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="SeeDoctorHealthAspect", alias='@type', const=True)
    



class MusicEvent(Event):
    """Event type: Music event.

    See: https://schema.org/MusicEvent
    Model depth: 3
    """
    type_: str = Field(default="MusicEvent", alias='@type', const=True)
    



class MixedEventAttendanceMode(EventAttendanceModeEnumeration):
    """MixedEventAttendanceMode - an event that is conducted as a combination of both offline"
     "and online modes.

    See: https://schema.org/MixedEventAttendanceMode
    Model depth: 5
    """
    type_: str = Field(default="MixedEventAttendanceMode", alias='@type', const=True)
    



class Dermatology(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of skin.

    See: https://schema.org/Dermatology
    Model depth: 5
    """
    type_: str = Field(default="Dermatology", alias='@type', const=True)
    



class TherapeuticProcedure(MedicalProcedure):
    """A medical procedure intended primarily for therapeutic purposes, aimed at improving"
     "a health condition.

    See: https://schema.org/TherapeuticProcedure
    Model depth: 4
    """
    type_: str = Field(default="TherapeuticProcedure", alias='@type', const=True)
    doseSchedule: Optional[Union[List[Union[DoseSchedule, str]], DoseSchedule, str]] = Field(
        default=None,
        description="A dosing schedule for the drug for a given population, either observed, recommended,"
     "or maximum dose based on the type used.",
    )
    drug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Specifying a drug or medicine used in a medication procedure.",
    )
    adverseOutcome: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="A possible complication and/or side effect of this therapy. If it is known that an adverse"
     "outcome is serious (resulting in death, disability, or permanent damage; requiring"
     "hospitalization; or otherwise life-threatening or requiring immediate medical attention),"
     "tag it as a seriousAdverseOutcome instead.",
    )
    



class MedicalTherapy(TherapeuticProcedure):
    """Any medical intervention designed to prevent, treat, and cure human diseases and medical"
     "conditions, including both curative and palliative therapies. Medical therapies"
     "are typically processes of care relying upon pharmacotherapy, behavioral therapy,"
     "supportive therapy (with fluid or nutrition for example), or detoxification (e.g."
     "hemodialysis) aimed at improving or preventing a health condition.

    See: https://schema.org/MedicalTherapy
    Model depth: 5
    """
    type_: str = Field(default="MedicalTherapy", alias='@type', const=True)
    seriousAdverseOutcome: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="A possible serious complication and/or serious side effect of this therapy. Serious"
     "adverse outcomes include those that are life-threatening; result in death, disability,"
     "or permanent damage; require hospitalization or prolong existing hospitalization;"
     "cause congenital anomalies or birth defects; or jeopardize the patient and may require"
     "medical or surgical intervention to prevent one of the outcomes in this definition.",
    )
    duplicateTherapy: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A therapy that duplicates or overlaps this one.",
    )
    contraindication: Optional[Union[List[Union[str, Text, MedicalContraindication]], str, Text, MedicalContraindication]] = Field(
        default=None,
        description="A contraindication for this therapy.",
    )
    



class Episode(CreativeWork):
    """A media episode (e.g. TV, radio, video game) which can be part of a series or season.

    See: https://schema.org/Episode
    Model depth: 3
    """
    type_: str = Field(default="Episode", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    partOfSeason: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="The season to which this episode belongs.",
    )
    partOfSeries: Optional[Union[List[Union[CreativeWorkSeries, str]], CreativeWorkSeries, str]] = Field(
        default=None,
        description="The series to which this episode or season belongs.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    episodeNumber: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="Position of the episode within an ordered group of episodes.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class RadioEpisode(Episode):
    """A radio episode which can be part of a series or season.

    See: https://schema.org/RadioEpisode
    Model depth: 4
    """
    type_: str = Field(default="RadioEpisode", alias='@type', const=True)
    



class MedicalSignOrSymptom(MedicalCondition):
    """Any feature associated or not with a medical condition. In medicine a symptom is generally"
     "subjective while a sign is objective.

    See: https://schema.org/MedicalSignOrSymptom
    Model depth: 4
    """
    type_: str = Field(default="MedicalSignOrSymptom", alias='@type', const=True)
    possibleTreatment: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A possible treatment to address this condition, sign or symptom.",
    )
    



class BodyMeasurementArm(BodyMeasurementTypeEnumeration):
    """Arm length (measured between arms/shoulder line intersection and the prominent wrist"
     "bone). Used, for example, to fit shirts.

    See: https://schema.org/BodyMeasurementArm
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementArm", alias='@type', const=True)
    



class ChooseAction(AssessAction):
    """The act of expressing a preference from a set of options or a large or unbounded set of choices/options.

    See: https://schema.org/ChooseAction
    Model depth: 4
    """
    type_: str = Field(default="ChooseAction", alias='@type', const=True)
    option: Optional[Union[List[Union[str, Text, Thing]], str, Text, Thing]] = Field(
        default=None,
        description="A sub property of object. The options subject to this action.",
    )
    actionOption: Optional[Union[List[Union[str, Text, Thing]], str, Text, Thing]] = Field(
        default=None,
        description="A sub property of object. The options subject to this action.",
    )
    



class VoteAction(ChooseAction):
    """The act of expressing a preference from a fixed/finite/structured set of choices/options.

    See: https://schema.org/VoteAction
    Model depth: 5
    """
    type_: str = Field(default="VoteAction", alias='@type', const=True)
    candidate: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sub property of object. The candidate subject of this action.",
    )
    



class WPSideBar(WebPageElement):
    """A sidebar section of the page.

    See: https://schema.org/WPSideBar
    Model depth: 4
    """
    type_: str = Field(default="WPSideBar", alias='@type', const=True)
    



class Residence(Place):
    """The place where a person lives.

    See: https://schema.org/Residence
    Model depth: 3
    """
    type_: str = Field(default="Residence", alias='@type', const=True)
    accommodationFloorPlan: Optional[Union[List[Union[FloorPlan, str]], FloorPlan, str]] = Field(
        default=None,
        description="A floorplan of some [[Accommodation]].",
    )
    



class ApartmentComplex(Residence):
    """Residence type: Apartment complex.

    See: https://schema.org/ApartmentComplex
    Model depth: 4
    """
    type_: str = Field(default="ApartmentComplex", alias='@type', const=True)
    tourBookingPage: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="A page providing information on how to book a tour of some [[Place]], such as an [[Accommodation]]"
     "or [[ApartmentComplex]] in a real estate setting, as well as other kinds of tours as appropriate.",
    )
    numberOfBedrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]]"
     "or [[FloorPlan]].",
    )
    numberOfAvailableAccommodationUnits: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicates the number of available accommodation units in an [[ApartmentComplex]],"
     "or the number of accommodation units for a specific [[FloorPlan]] (within its specific"
     "[[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].",
    )
    numberOfAccommodationUnits: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicates the total (available plus unavailable) number of accommodation units in"
     "an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]]"
     "(within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].",
    )
    petsAllowed: Optional[Union[List[Union[str, Text, StrictBool, Boolean]], str, Text, StrictBool, Boolean]] = Field(
        default=None,
        description="Indicates whether pets are allowed to enter the accommodation or lodging business."
     "More detailed information can be put in a text value.",
    )
    



class Sculpture(CreativeWork):
    """A piece of sculpture.

    See: https://schema.org/Sculpture
    Model depth: 3
    """
    type_: str = Field(default="Sculpture", alias='@type', const=True)
    



class Surgical(MedicalSpecialty):
    """A specific branch of medical science that pertains to treating diseases, injuries and"
     "deformities by manual and instrumental means.

    See: https://schema.org/Surgical
    Model depth: 6
    """
    type_: str = Field(default="Surgical", alias='@type', const=True)
    



class Terminated(MedicalStudyStatus):
    """Terminated.

    See: https://schema.org/Terminated
    Model depth: 6
    """
    type_: str = Field(default="Terminated", alias='@type', const=True)
    



class EnergyStarEnergyEfficiencyEnumeration(EnergyEfficiencyEnumeration):
    """Used to indicate whether a product is EnergyStar certified.

    See: https://schema.org/EnergyStarEnergyEfficiencyEnumeration
    Model depth: 5
    """
    type_: str = Field(default="EnergyStarEnergyEfficiencyEnumeration", alias='@type', const=True)
    



class BankAccount(FinancialProduct):
    """A product or service offered by a bank whereby one may deposit, withdraw or transfer money"
     "and in some cases be paid interest.

    See: https://schema.org/BankAccount
    Model depth: 5
    """
    type_: str = Field(default="BankAccount", alias='@type', const=True)
    accountMinimumInflow: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="A minimum amount that has to be paid in every month.",
    )
    accountOverdraftLimit: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="An overdraft is an extension of credit from a lending institution when an account reaches"
     "zero. An overdraft allows the individual to continue withdrawing money even if the account"
     "has no funds in it. Basically the bank allows people to borrow a set amount of money.",
    )
    bankAccountType: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The type of a bank account.",
    )
    



class DepositAccount(BankAccount, InvestmentOrDeposit):
    """A type of Bank Account with a main purpose of depositing funds to gain interest or other"
     "benefits.

    See: https://schema.org/DepositAccount
    Model depth: 6
    """
    type_: str = Field(default="DepositAccount", alias='@type', const=True)
    



class MovingCompany(HomeAndConstructionBusiness):
    """A moving company.

    See: https://schema.org/MovingCompany
    Model depth: 5
    """
    type_: str = Field(default="MovingCompany", alias='@type', const=True)
    



class Offer(Intangible):
    """An offer to transfer some rights to an item or to provide a service — for example, an offer"
     "to sell tickets to an event, to rent the DVD of a movie, to stream a TV show over the internet,"
     "to repair a motorcycle, or to loan a book. Note: As the [[businessFunction]] property,"
     "which identifies the form of offer (e.g. sell, lease, repair, dispose), defaults to"
     "http://purl.org/goodrelations/v1#Sell; an Offer without a defined businessFunction"
     "value can be assumed to be an offer to sell. For [GTIN](http://www.gs1.org/barcodes/technical/idkeys/gtin)-related"
     "fields, see [Check Digit calculator](http://www.gs1.org/barcodes/support/check_digit_calculator)"
     "and [validation guide](http://www.gs1us.org/resources/standards/gtin-validation-guide)"
     "from [GS1](http://www.gs1.org/).

    See: https://schema.org/Offer
    Model depth: 3
    """
    type_: str = Field(default="Offer", alias='@type', const=True)
    hasMeasurement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A product measurement, for example the inseam of pants, the wheel size of a bicycle, or"
     "the gauge of a screw. Usually an exact measurement, but can also be a range of measurements"
     "for adjustable products, for example belts and ski bindings.",
    )
    eligibleQuantity: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The interval and unit of measurement of ordering quantities for which the offer or price"
     "specification is valid. This allows e.g. specifying that a certain freight charge is"
     "valid only for a certain quantity.",
    )
    deliveryLeadTime: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The typical delay between the receipt of the order and the goods either leaving the warehouse"
     "or being prepared for pickup, in case the delivery method is on site pickup.",
    )
    availabilityEnds: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The end of the availability of the product or service included in the offer.",
    )
    seller: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity which offers (sells / leases / lends / loans) the services / goods. A seller may"
     "also be a provider.",
    )
    availabilityStarts: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The beginning of the availability of the product or service included in the offer.",
    )
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    advanceBookingRequirement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The amount of time that is required between accepting the offer and the actual usage of"
     "the resource or service.",
    )
    priceValidUntil: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date after which the price is no longer available.",
    )
    gtin14: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN"
     "Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
    )
    reviews: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="Review of the item.",
    )
    warranty: Optional[Union[List[Union[WarrantyPromise, str]], WarrantyPromise, str]] = Field(
        default=None,
        description="The warranty promise(s) included in the offer.",
    )
    inventoryLevel: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The current approximate inventory level for the item or items.",
    )
    eligibleDuration: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The duration for which the given offer is valid.",
    )
    availability: Optional[Union[List[Union[ItemAvailability, str]], ItemAvailability, str]] = Field(
        default=None,
        description="The availability of this item&#x2014;for example In stock, Out of stock, Pre-order,"
     "etc.",
    )
    itemCondition: Optional[Union[List[Union[OfferItemCondition, str]], OfferItemCondition, str]] = Field(
        default=None,
        description="A predefined value from OfferItemCondition specifying the condition of the product"
     "or service, or the products or services included in the offer. Also used for product return"
     "policies to specify the condition of products accepted for returns.",
    )
    checkoutPageURLTemplate: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A URL template (RFC 6570) for a checkout page for an offer. This approach allows merchants"
     "to specify a URL for online checkout of the offered product, by interpolating parameters"
     "such as the logged in user ID, product ID, quantity, discount code etc. Parameter naming"
     "and standardization are not specified here.",
    )
    price: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The offer price of a product, or of a price component when attached to PriceSpecification"
     "and its subtypes. Usage guidelines: * Use the [[priceCurrency]] property (with standard"
     "formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\") instead of including [ambiguous"
     "symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign)"
     "such as '$' in the value. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate"
     "a decimal point. Avoid using these symbols as a readability separator. * Note that both"
     "[RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute)"
     "and Microdata syntax allow the use of a \"content=\" attribute for publishing simple"
     "machine-readable values alongside more human-friendly formatting. * Use values from"
     "0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    gtin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin))."
     "GTINs identify trade items, including products and services, using numeric identification"
     "codes. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/)"
     "express GTINs as URLs (URIs, IRIs, etc.). Details including regular expression examples"
     "can be found in, Section 6 of the GS1 URI Syntax specification; see also [schema.org tracking"
     "issue](https://github.com/schemaorg/schemaorg/issues/3156#issuecomment-1209522809)"
     "for schema.org-specific discussion. A correct [[gtin]] value should be a valid GTIN,"
     "which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or"
     "a \"GS1 Digital Link\" URL based on such a string. The numeric component should also have"
     "a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator)"
     "and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for"
     "more details. Left-padding of the gtin values is not required or encouraged. The [[gtin]]"
     "property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]]"
     "properties. Note also that this is a definition for how to include GTINs in Schema.org"
     "data, and not a definition of GTINs in general - see the GS1 documentation for authoritative"
     "details.",
    )
    itemOffered: Optional[Union[List[Union[MenuItem, Event, Product, Trip, Service, AggregateOffer, CreativeWork, str]], MenuItem, Event, Product, Trip, Service, AggregateOffer, CreativeWork, str]] = Field(
        default=None,
        description="An item being offered (or demanded). The transactional nature of the offer or demand"
     "is documented using [[businessFunction]], e.g. sell, lease etc. While several common"
     "expected types are listed explicitly in this definition, others can be used. Using a"
     "second type, such as Product or a subtype of Product, can clarify the nature of the offer.",
    )
    mobileUrl: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The [[mobileUrl]] property is provided for specific situations in which data consumers"
     "need to determine whether one of several provided URLs is a dedicated 'mobile site'."
     "To discourage over-use, and reflecting intial usecases, the property is expected only"
     "on [[Product]] and [[Offer]], rather than [[Thing]]. The general trend in web technology"
     "is towards [responsive design](https://en.wikipedia.org/wiki/Responsive_web_design)"
     "in which content can be flexibly adapted to a wide range of browsing environments. Pages"
     "and sites referenced with the long-established [[url]] property should ideally also"
     "be usable on a wide variety of devices, including mobile phones. In most cases, it would"
     "be pointless and counter productive to attempt to update all [[url]] markup to use [[mobileUrl]]"
     "for more mobile-oriented pages. The property is intended for the case when items (primarily"
     "[[Product]] and [[Offer]]) have extra URLs hosted on an additional \"mobile site\""
     "alongside the main one. It should not be taken as an endorsement of this publication style.",
    )
    shippingDetails: Optional[Union[List[Union[OfferShippingDetails, str]], OfferShippingDetails, str]] = Field(
        default=None,
        description="Indicates information about the shipping policies and options associated with an [[Offer]].",
    )
    hasMerchantReturnPolicy: Optional[Union[List[Union[MerchantReturnPolicy, str]], MerchantReturnPolicy, str]] = Field(
        default=None,
        description="Specifies a MerchantReturnPolicy that may be applicable.",
    )
    businessFunction: Optional[Union[List[Union[BusinessFunction, str]], BusinessFunction, str]] = Field(
        default=None,
        description="The business function (e.g. sell, lease, repair, dispose) of the offer or component"
     "of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.",
    )
    isFamilyFriendly: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether this content is family friendly.",
    )
    leaseLength: Optional[Union[List[Union[Duration, QuantitativeValue, str]], Duration, QuantitativeValue, str]] = Field(
        default=None,
        description="Length of the lease for some [[Accommodation]], either particular to some [[Offer]]"
     "or in some cases intrinsic to the property.",
    )
    gtin12: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12"
     "is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference,"
     "and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    hasAdultConsideration: Optional[Union[List[Union[AdultOrientedEnumeration, str]], AdultOrientedEnumeration, str]] = Field(
        default=None,
        description="Used to tag an item to be intended or suitable for consumption or use by adults only.",
    )
    includesObject: Optional[Union[List[Union[TypeAndQuantityNode, str]], TypeAndQuantityNode, str]] = Field(
        default=None,
        description="This links to a node or nodes indicating the exact quantity of the products included in"
     "an [[Offer]] or [[ProductCollection]].",
    )
    eligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "valid. See also [[ineligibleRegion]].",
    )
    asin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique"
     "identifier assigned by Amazon.com and its partners for product identification within"
     "the Amazon organization (summary from [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s"
     "article). Note also that this is a definition for how to include ASINs in Schema.org data,"
     "and not a definition of ASINs in general - see documentation from Amazon for authoritative"
     "details. ASINs are most commonly encoded as text strings, but the [asin] property supports"
     "URL/URI as potential values too.",
    )
    gtin8: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-8 code of the product, or the product to which the offer refers. This code is also"
     "known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    ineligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "not valid, e.g. a region where the transaction is not allowed. See also [[eligibleRegion]].",
    )
    priceSpecification: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="One or more detailed price specifications, indicating the unit price and delivery or"
     "payment charges.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    eligibleTransactionVolume: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="The transaction volume, in a monetary unit, for which the offer or price specification"
     "is valid, e.g. for indicating a minimal purchasing volume, to express free shipping"
     "above a certain order volume, or to limit the acceptance of credit cards to purchases"
     "to a certain minimal amount.",
    )
    mpn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    offeredBy: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A pointer to the organization or person making the offer.",
    )
    addOn: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="An additional offer that can only be obtained in combination with the first base offer"
     "(e.g. supplements and extensions that are available for a surcharge).",
    )
    availableAtOrFrom: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The place(s) from which the offer can be obtained (e.g. store locations).",
    )
    priceCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the price, or a price component when attached to [[PriceSpecification]]"
     "and its subtypes. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    eligibleCustomerType: Optional[Union[List[Union[BusinessEntityType, str]], BusinessEntityType, str]] = Field(
        default=None,
        description="The type(s) of customers for which the given offer is valid.",
    )
    gtin13: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent"
     "to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into"
     "a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    serialNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The serial number or any alphanumeric identifier of a particular product. When attached"
     "to an offer, it is a shortcut for the serial number of the product included in the offer.",
    )
    sku: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service,"
     "or the product to which the offer refers.",
    )
    acceptedPaymentMethod: Optional[Union[List[Union[LoanOrCredit, PaymentMethod, str]], LoanOrCredit, PaymentMethod, str]] = Field(
        default=None,
        description="The payment method(s) accepted by seller for this offer.",
    )
    availableDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="The delivery method(s) available for this offer.",
    )
    



class AggregateOffer(Offer):
    """When a single product is associated with multiple offers (for example, the same pair"
     "of shoes is offered by different merchants), then AggregateOffer can be used. Note:"
     "AggregateOffers are normally expected to associate multiple offers that all share"
     "the same defined [[businessFunction]] value, or default to http://purl.org/goodrelations/v1#Sell"
     "if businessFunction is not explicitly defined.

    See: https://schema.org/AggregateOffer
    Model depth: 4
    """
    type_: str = Field(default="AggregateOffer", alias='@type', const=True)
    highPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The highest price of all offers available. Usage guidelines: * Use values from 0123456789"
     "(Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to"
     "indicate a decimal point. Avoid using these symbols as a readability separator.",
    )
    offerCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of offers for the product.",
    )
    lowPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The lowest price of all offers available. Usage guidelines: * Use values from 0123456789"
     "(Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to"
     "indicate a decimal point. Avoid using these symbols as a readability separator.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    



class WearableSizeSystemGS1(WearableSizeSystemEnumeration):
    """GS1 (formerly NRF) size system for wearables.

    See: https://schema.org/WearableSizeSystemGS1
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemGS1", alias='@type', const=True)
    



class EmploymentAgency(LocalBusiness):
    """An employment agency.

    See: https://schema.org/EmploymentAgency
    Model depth: 4
    """
    type_: str = Field(default="EmploymentAgency", alias='@type', const=True)
    



class Ligament(AnatomicalStructure):
    """A short band of tough, flexible, fibrous connective tissue that functions to connect"
     "multiple bones, cartilages, and structurally support joints.

    See: https://schema.org/Ligament
    Model depth: 4
    """
    type_: str = Field(default="Ligament", alias='@type', const=True)
    



class FDAcategoryC(DrugPregnancyCategory):
    """A designation by the US FDA signifying that animal reproduction studies have shown an"
     "adverse effect on the fetus and there are no adequate and well-controlled studies in"
     "humans, but potential benefits may warrant use of the drug in pregnant women despite"
     "potential risks.

    See: https://schema.org/FDAcategoryC
    Model depth: 6
    """
    type_: str = Field(default="FDAcategoryC", alias='@type', const=True)
    



class Optometric(MedicalSpecialty, MedicalBusiness):
    """The science or practice of testing visual acuity and prescribing corrective lenses.

    See: https://schema.org/Optometric
    Model depth: 5
    """
    type_: str = Field(default="Optometric", alias='@type', const=True)
    



class OutletStore(Store):
    """An outlet store.

    See: https://schema.org/OutletStore
    Model depth: 5
    """
    type_: str = Field(default="OutletStore", alias='@type', const=True)
    



class RefundTypeEnumeration(Enumeration):
    """Enumerates several kinds of product return refund types.

    See: https://schema.org/RefundTypeEnumeration
    Model depth: 4
    """
    type_: str = Field(default="RefundTypeEnumeration", alias='@type', const=True)
    



class StoreCreditRefund(RefundTypeEnumeration):
    """Specifies that the customer receives a store credit as refund when returning a product.

    See: https://schema.org/StoreCreditRefund
    Model depth: 5
    """
    type_: str = Field(default="StoreCreditRefund", alias='@type', const=True)
    



class InternetCafe(LocalBusiness):
    """An internet cafe.

    See: https://schema.org/InternetCafe
    Model depth: 4
    """
    type_: str = Field(default="InternetCafe", alias='@type', const=True)
    



class AdministrativeArea(Place):
    """A geographical region, typically under the jurisdiction of a particular government.

    See: https://schema.org/AdministrativeArea
    Model depth: 3
    """
    type_: str = Field(default="AdministrativeArea", alias='@type', const=True)
    



class GameServerStatus(StatusEnumeration):
    """Status of a game server.

    See: https://schema.org/GameServerStatus
    Model depth: 5
    """
    type_: str = Field(default="GameServerStatus", alias='@type', const=True)
    



class OnlineFull(GameServerStatus):
    """Game server status: OnlineFull. Server is online but unavailable. The maximum number"
     "of players has reached.

    See: https://schema.org/OnlineFull
    Model depth: 6
    """
    type_: str = Field(default="OnlineFull", alias='@type', const=True)
    



class ConsumeAction(Action):
    """The act of ingesting information/resources/food.

    See: https://schema.org/ConsumeAction
    Model depth: 3
    """
    type_: str = Field(default="ConsumeAction", alias='@type', const=True)
    actionAccessibilityRequirement: Optional[Union[List[Union[ActionAccessSpecification, str]], ActionAccessSpecification, str]] = Field(
        default=None,
        description="A set of requirements that must be fulfilled in order to perform an Action. If more than"
     "one value is specified, fulfilling one set of requirements will allow the Action to be"
     "performed.",
    )
    expectsAcceptanceOf: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="An Offer which must be accepted before the user can perform the Action. For example, the"
     "user may need to buy a movie before being able to watch it.",
    )
    



class ListenAction(ConsumeAction):
    """The act of consuming audio content.

    See: https://schema.org/ListenAction
    Model depth: 4
    """
    type_: str = Field(default="ListenAction", alias='@type', const=True)
    



class SocialMediaPosting(Article):
    """A post to a social media platform, including blog posts, tweets, Facebook posts, etc.

    See: https://schema.org/SocialMediaPosting
    Model depth: 4
    """
    type_: str = Field(default="SocialMediaPosting", alias='@type', const=True)
    sharedContent: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A CreativeWork such as an image, video, or audio clip shared as part of this posting.",
    )
    



class MusicVenue(CivicStructure):
    """A music venue.

    See: https://schema.org/MusicVenue
    Model depth: 4
    """
    type_: str = Field(default="MusicVenue", alias='@type', const=True)
    



class Genetic(MedicalSpecialty):
    """A specific branch of medical science that pertains to hereditary transmission and the"
     "variation of inherited characteristics and disorders.

    See: https://schema.org/Genetic
    Model depth: 6
    """
    type_: str = Field(default="Genetic", alias='@type', const=True)
    



class Head(PhysicalExam):
    """Head assessment with clinical examination.

    See: https://schema.org/Head
    Model depth: 5
    """
    type_: str = Field(default="Head", alias='@type', const=True)
    



class MSRP(PriceTypeEnumeration):
    """Represents the manufacturer suggested retail price (\"MSRP\") of an offered product.

    See: https://schema.org/MSRP
    Model depth: 5
    """
    type_: str = Field(default="MSRP", alias='@type', const=True)
    



class PoliceStation(EmergencyService, CivicStructure):
    """A police station.

    See: https://schema.org/PoliceStation
    Model depth: 4
    """
    type_: str = Field(default="PoliceStation", alias='@type', const=True)
    



class Friday(DayOfWeek):
    """The day of the week between Thursday and Saturday.

    See: https://schema.org/Friday
    Model depth: 5
    """
    type_: str = Field(default="Friday", alias='@type', const=True)
    



class PaymentStatusType(StatusEnumeration):
    """A specific payment status. For example, PaymentDue, PaymentComplete, etc.

    See: https://schema.org/PaymentStatusType
    Model depth: 5
    """
    type_: str = Field(default="PaymentStatusType", alias='@type', const=True)
    



class PaymentComplete(PaymentStatusType):
    """The payment has been received and processed.

    See: https://schema.org/PaymentComplete
    Model depth: 6
    """
    type_: str = Field(default="PaymentComplete", alias='@type', const=True)
    



class CableOrSatelliteService(Service):
    """A service which provides access to media programming like TV or radio. Access may be via"
     "cable or satellite.

    See: https://schema.org/CableOrSatelliteService
    Model depth: 4
    """
    type_: str = Field(default="CableOrSatelliteService", alias='@type', const=True)
    



class PayAction(TradeAction):
    """An agent pays a price to a participant.

    See: https://schema.org/PayAction
    Model depth: 4
    """
    type_: str = Field(default="PayAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class DeliveryTimeSettings(StructuredValue):
    """A DeliveryTimeSettings represents re-usable pieces of shipping information, relating"
     "to timing. It is designed for publication on an URL that may be referenced via the [[shippingSettingsLink]]"
     "property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished"
     "(and identified/referenced) by their different values for [[transitTimeLabel]].

    See: https://schema.org/DeliveryTimeSettings
    Model depth: 4
    """
    type_: str = Field(default="DeliveryTimeSettings", alias='@type', const=True)
    shippingDestination: Optional[Union[List[Union[DefinedRegion, str]], DefinedRegion, str]] = Field(
        default=None,
        description="indicates (possibly multiple) shipping destinations. These can be defined in several"
     "ways, e.g. postalCode ranges.",
    )
    deliveryTime: Optional[Union[List[Union[ShippingDeliveryTime, str]], ShippingDeliveryTime, str]] = Field(
        default=None,
        description="The total delay between the receipt of the order and the goods reaching the final customer.",
    )
    transitTimeLabel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within"
     "the context of a [[shippingSettingsLink]] cross-reference).",
    )
    isUnlabelledFallback: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]]"
     "or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]]"
     "published by the same merchant, when referenced by a [[shippingSettingsLink]] in those"
     "settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel"
     "(for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]),"
     "since this property is for use with unlabelled settings.",
    )
    



class WarrantyPromise(StructuredValue):
    """A structured value representing the duration and scope of services that will be provided"
     "to a customer free of charge in case of a defect or malfunction of a product.

    See: https://schema.org/WarrantyPromise
    Model depth: 4
    """
    type_: str = Field(default="WarrantyPromise", alias='@type', const=True)
    warrantyScope: Optional[Union[List[Union[WarrantyScope, str]], WarrantyScope, str]] = Field(
        default=None,
        description="The scope of the warranty promise.",
    )
    durationOfWarranty: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The duration of the warranty promise. Common unitCode values are ANN for year, MON for"
     "months, or DAY for days.",
    )
    



class MobilePhoneStore(Store):
    """A store that sells mobile phones and related accessories.

    See: https://schema.org/MobilePhoneStore
    Model depth: 5
    """
    type_: str = Field(default="MobilePhoneStore", alias='@type', const=True)
    



class Nonprofit501q(USNonprofitType):
    """Nonprofit501q: Non-profit type referring to Credit Counseling Organizations.

    See: https://schema.org/Nonprofit501q
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501q", alias='@type', const=True)
    



class DrugCost(MedicalEntity):
    """The cost per unit of a medical drug. Note that this type is not meant to represent the price"
     "in an offer of a drug for sale; see the Offer type for that. This type will typically be used"
     "to tag wholesale or average retail cost of a drug, or maximum reimbursable cost. Costs"
     "of medical drugs vary widely depending on how and where they are paid for, so while this"
     "type captures some of the variables, costs should be used with caution by consumers of"
     "this schema's markup.

    See: https://schema.org/DrugCost
    Model depth: 3
    """
    type_: str = Field(default="DrugCost", alias='@type', const=True)
    costPerUnit: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, QualitativeValue]], StrictInt, StrictFloat, Number, str, Text, QualitativeValue]] = Field(
        default=None,
        description="The cost per unit of the drug.",
    )
    applicableLocation: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The location in which the status applies.",
    )
    drugUnit: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unit in which the drug is measured, e.g. '5 mg tablet'.",
    )
    costOrigin: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Additional details to capture the origin of the cost data. For example, 'Medicare Part"
     "B'.",
    )
    costCategory: Optional[Union[List[Union[DrugCostCategory, str]], DrugCostCategory, str]] = Field(
        default=None,
        description="The category of cost, such as wholesale, retail, reimbursement cap, etc.",
    )
    costCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency (in 3-letter) of the drug cost. See: http://en.wikipedia.org/wiki/ISO_4217.",
    )
    



class ReadPermission(DigitalDocumentPermissionType):
    """Permission to read or view the document.

    See: https://schema.org/ReadPermission
    Model depth: 5
    """
    type_: str = Field(default="ReadPermission", alias='@type', const=True)
    



class WearableSizeSystemContinental(WearableSizeSystemEnumeration):
    """Continental size system for wearables.

    See: https://schema.org/WearableSizeSystemContinental
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemContinental", alias='@type', const=True)
    



class RentAction(TradeAction):
    """The act of giving money in return for temporary use, but not ownership, of an object such"
     "as a vehicle or property. For example, an agent rents a property from a landlord in exchange"
     "for a periodic payment.

    See: https://schema.org/RentAction
    Model depth: 4
    """
    type_: str = Field(default="RentAction", alias='@type', const=True)
    realEstateAgent: Optional[Union[List[Union[RealEstateAgent, str]], RealEstateAgent, str]] = Field(
        default=None,
        description="A sub property of participant. The real estate agent involved in the action.",
    )
    landlord: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The owner of the real estate property.",
    )
    



class ShortStory(CreativeWork):
    """Short story or tale. A brief work of literature, usually written in narrative prose.

    See: https://schema.org/ShortStory
    Model depth: 3
    """
    type_: str = Field(default="ShortStory", alias='@type', const=True)
    



class BreadcrumbList(ItemList):
    """A BreadcrumbList is an ItemList consisting of a chain of linked Web pages, typically"
     "described using at least their URL and their name, and typically ending with the current"
     "page. The [[position]] property is used to reconstruct the order of the items in a BreadcrumbList."
     "The convention is that a breadcrumb list has an [[itemListOrder]] of [[ItemListOrderAscending]]"
     "(lower values listed first), and that the first items in this list correspond to the \"top\""
     "or beginning of the breadcrumb trail, e.g. with a site or section homepage. The specific"
     "values of 'position' are not assigned meaning for a BreadcrumbList, but they should"
     "be integers, e.g. beginning with '1' for the first item in the list.

    See: https://schema.org/BreadcrumbList
    Model depth: 4
    """
    type_: str = Field(default="BreadcrumbList", alias='@type', const=True)
    



class MedicalObservationalStudyDesign(MedicalEnumeration):
    """Design models for observational medical studies. Enumerated type.

    See: https://schema.org/MedicalObservationalStudyDesign
    Model depth: 5
    """
    type_: str = Field(default="MedicalObservationalStudyDesign", alias='@type', const=True)
    



class Observational(MedicalObservationalStudyDesign):
    """An observational study design.

    See: https://schema.org/Observational
    Model depth: 6
    """
    type_: str = Field(default="Observational", alias='@type', const=True)
    



class LandmarksOrHistoricalBuildings(Place):
    """An historical landmark or building.

    See: https://schema.org/LandmarksOrHistoricalBuildings
    Model depth: 3
    """
    type_: str = Field(default="LandmarksOrHistoricalBuildings", alias='@type', const=True)
    



class Seat(Intangible):
    """Used to describe a seat, such as a reserved seat in an event reservation.

    See: https://schema.org/Seat
    Model depth: 3
    """
    type_: str = Field(default="Seat", alias='@type', const=True)
    seatSection: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The section location of the reserved seat (e.g. Orchestra).",
    )
    seatNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The location of the reserved seat (e.g., 27).",
    )
    seatingType: Optional[Union[List[Union[str, Text, QualitativeValue]], str, Text, QualitativeValue]] = Field(
        default=None,
        description="The type/class of the seat.",
    )
    seatRow: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The row location of the reserved seat (e.g., B).",
    )
    



class PaymentService(FinancialProduct):
    """A Service to transfer funds from a person or organization to a beneficiary person or organization.

    See: https://schema.org/PaymentService
    Model depth: 5
    """
    type_: str = Field(default="PaymentService", alias='@type', const=True)
    



class PercutaneousProcedure(MedicalProcedureType):
    """A type of medical procedure that involves percutaneous techniques, where access to"
     "organs or tissue is achieved via needle-puncture of the skin. For example, catheter-based"
     "procedures like stent delivery.

    See: https://schema.org/PercutaneousProcedure
    Model depth: 6
    """
    type_: str = Field(default="PercutaneousProcedure", alias='@type', const=True)
    



class OpenTrial(MedicalTrialDesign):
    """A trial design in which the researcher knows the full details of the treatment, and so"
     "does the patient.

    See: https://schema.org/OpenTrial
    Model depth: 6
    """
    type_: str = Field(default="OpenTrial", alias='@type', const=True)
    



class PaymentDeclined(PaymentStatusType):
    """The payee received the payment, but it was declined for some reason.

    See: https://schema.org/PaymentDeclined
    Model depth: 6
    """
    type_: str = Field(default="PaymentDeclined", alias='@type', const=True)
    



class MusicAlbumProductionType(Enumeration):
    """Classification of the album by its type of content: soundtrack, live album, studio album,"
     "etc.

    See: https://schema.org/MusicAlbumProductionType
    Model depth: 4
    """
    type_: str = Field(default="MusicAlbumProductionType", alias='@type', const=True)
    



class Museum(CivicStructure):
    """A museum.

    See: https://schema.org/Museum
    Model depth: 4
    """
    type_: str = Field(default="Museum", alias='@type', const=True)
    



class Taxi(Service):
    """A taxi.

    See: https://schema.org/Taxi
    Model depth: 4
    """
    type_: str = Field(default="Taxi", alias='@type', const=True)
    



class TrainTrip(Trip):
    """A trip on a commercial train line.

    See: https://schema.org/TrainTrip
    Model depth: 4
    """
    type_: str = Field(default="TrainTrip", alias='@type', const=True)
    arrivalPlatform: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The platform where the train arrives.",
    )
    departurePlatform: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The platform from which the train departs.",
    )
    arrivalStation: Optional[Union[List[Union[TrainStation, str]], TrainStation, str]] = Field(
        default=None,
        description="The station where the train trip ends.",
    )
    trainName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of the train (e.g. The Orient Express).",
    )
    trainNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unique identifier for the train.",
    )
    departureStation: Optional[Union[List[Union[TrainStation, str]], TrainStation, str]] = Field(
        default=None,
        description="The station from which the train departs.",
    )
    



class GeospatialGeometry(Intangible):
    """(Eventually to be defined as) a supertype of GeoShape designed to accommodate definitions"
     "from Geo-Spatial best practices.

    See: https://schema.org/GeospatialGeometry
    Model depth: 3
    """
    type_: str = Field(default="GeospatialGeometry", alias='@type', const=True)
    geoCovers: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a covering geometry to a covered geometry. \"Every point of b is a point of (the interior"
     "or boundary of) a\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoWithin: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to one that contains it, i.e. it is inside (i.e. within) its interior. As defined"
     "in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoOverlaps: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that geospatially overlaps it, i.e. they have some but not all points"
     "in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoEquals: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "are topologically equal, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM)."
     "\"Two geometries are topologically equal if their interiors intersect and no part of"
     "the interior or boundary of one geometry intersects the exterior of the other\" (a symmetric"
     "relationship).",
    )
    geoCrosses: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that crosses it: \"a crosses b: they have some but not all interior"
     "points in common, and the dimension of the intersection is less than that of at least one"
     "of them\". As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoDisjoint: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "are topologically disjoint: \"they have no point in common. They form a set of disconnected"
     "geometries.\" (A symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)",
    )
    geoIntersects: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "have at least one point in common. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoTouches: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents spatial relations in which two geometries (or the places they represent)"
     "touch: \"they have at least one boundary point in common, but no interior points.\" (A"
     "symmetric relationship, as defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).)",
    )
    geoCoveredBy: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a geometry to another that covers it. As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    geoContains: Optional[Union[List[Union[GeospatialGeometry, Place, str]], GeospatialGeometry, Place, str]] = Field(
        default=None,
        description="Represents a relationship between two geometries (or the places they represent), relating"
     "a containing geometry to a contained geometry. \"a contains b iff no points of b lie in"
     "the exterior of a, and at least one point of the interior of b lies in the interior of a\"."
     "As defined in [DE-9IM](https://en.wikipedia.org/wiki/DE-9IM).",
    )
    



class HealthAndBeautyBusiness(LocalBusiness):
    """Health and beauty.

    See: https://schema.org/HealthAndBeautyBusiness
    Model depth: 4
    """
    type_: str = Field(default="HealthAndBeautyBusiness", alias='@type', const=True)
    



class Nonprofit501c24(USNonprofitType):
    """Nonprofit501c24: Non-profit type referring to Section 4049 ERISA Trusts.

    See: https://schema.org/Nonprofit501c24
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c24", alias='@type', const=True)
    



class Vessel(AnatomicalStructure):
    """A component of the human body circulatory system comprised of an intricate network of"
     "hollow tubes that transport blood throughout the entire body.

    See: https://schema.org/Vessel
    Model depth: 4
    """
    type_: str = Field(default="Vessel", alias='@type', const=True)
    



class Vein(Vessel):
    """A type of blood vessel that specifically carries blood to the heart.

    See: https://schema.org/Vein
    Model depth: 5
    """
    type_: str = Field(default="Vein", alias='@type', const=True)
    tributary: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="The anatomical or organ system that the vein flows into; a larger structure that the vein"
     "connects to.",
    )
    regionDrained: Optional[Union[List[Union[AnatomicalStructure, AnatomicalSystem, str]], AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="The anatomical or organ system drained by this vessel; generally refers to a specific"
     "part of an organ.",
    )
    drainsTo: Optional[Union[List[Union[Vessel, str]], Vessel, str]] = Field(
        default=None,
        description="The vasculature that the vein drains into.",
    )
    



class ItemListOrderType(Enumeration):
    """Enumerated for values for itemListOrder for indicating how an ordered ItemList is organized.

    See: https://schema.org/ItemListOrderType
    Model depth: 4
    """
    type_: str = Field(default="ItemListOrderType", alias='@type', const=True)
    



class ItemListOrderDescending(ItemListOrderType):
    """An ItemList ordered with higher values listed first.

    See: https://schema.org/ItemListOrderDescending
    Model depth: 5
    """
    type_: str = Field(default="ItemListOrderDescending", alias='@type', const=True)
    



class MedicalEvidenceLevel(MedicalEnumeration):
    """Level of evidence for a medical guideline. Enumerated type.

    See: https://schema.org/MedicalEvidenceLevel
    Model depth: 5
    """
    type_: str = Field(default="MedicalEvidenceLevel", alias='@type', const=True)
    



class EvidenceLevelC(MedicalEvidenceLevel):
    """Only consensus opinion of experts, case studies, or standard-of-care.

    See: https://schema.org/EvidenceLevelC
    Model depth: 6
    """
    type_: str = Field(default="EvidenceLevelC", alias='@type', const=True)
    



class Artery(Vessel):
    """A type of blood vessel that specifically carries blood away from the heart.

    See: https://schema.org/Artery
    Model depth: 5
    """
    type_: str = Field(default="Artery", alias='@type', const=True)
    arterialBranch: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="The branches that comprise the arterial structure.",
    )
    supplyTo: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="The area to which the artery supplies blood.",
    )
    



class NoninvasiveProcedure(MedicalProcedureType):
    """A type of medical procedure that involves noninvasive techniques.

    See: https://schema.org/NoninvasiveProcedure
    Model depth: 6
    """
    type_: str = Field(default="NoninvasiveProcedure", alias='@type', const=True)
    



class SiteNavigationElement(WebPageElement):
    """A navigation element of the page.

    See: https://schema.org/SiteNavigationElement
    Model depth: 4
    """
    type_: str = Field(default="SiteNavigationElement", alias='@type', const=True)
    



class Neck(PhysicalExam):
    """Neck assessment with clinical examination.

    See: https://schema.org/Neck
    Model depth: 5
    """
    type_: str = Field(default="Neck", alias='@type', const=True)
    



class DoseSchedule(MedicalIntangible):
    """A specific dosing schedule for a drug or supplement.

    See: https://schema.org/DoseSchedule
    Model depth: 4
    """
    type_: str = Field(default="DoseSchedule", alias='@type', const=True)
    targetPopulation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Characteristics of the population for which this is intended, or which typically uses"
     "it, e.g. 'adults'.",
    )
    doseValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QualitativeValue, str]], StrictInt, StrictFloat, Number, QualitativeValue, str]] = Field(
        default=None,
        description="The value of the dose, e.g. 500.",
    )
    doseUnit: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unit of the dose, e.g. 'mg'.",
    )
    frequency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="How often the dose is taken, e.g. 'daily'.",
    )
    



class ReturnLabelSourceEnumeration(Enumeration):
    """Enumerates several types of return labels for product returns.

    See: https://schema.org/ReturnLabelSourceEnumeration
    Model depth: 4
    """
    type_: str = Field(default="ReturnLabelSourceEnumeration", alias='@type', const=True)
    



class ReturnLabelInBox(ReturnLabelSourceEnumeration):
    """Specifies that a return label will be provided by the seller in the shipping box.

    See: https://schema.org/ReturnLabelInBox
    Model depth: 5
    """
    type_: str = Field(default="ReturnLabelInBox", alias='@type', const=True)
    



class HealthcareConsideration(AdultOrientedEnumeration):
    """Item is a pharmaceutical (e.g., a prescription or OTC drug) or a restricted medical device.

    See: https://schema.org/HealthcareConsideration
    Model depth: 5
    """
    type_: str = Field(default="HealthcareConsideration", alias='@type', const=True)
    



class InformAction(CommunicateAction):
    """The act of notifying someone of information pertinent to them, with no expectation of"
     "a response.

    See: https://schema.org/InformAction
    Model depth: 5
    """
    type_: str = Field(default="InformAction", alias='@type', const=True)
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    



class ConfirmAction(InformAction):
    """The act of notifying someone that a future event/action is going to happen as expected."
     "Related actions: * [[CancelAction]]: The antonym of ConfirmAction.

    See: https://schema.org/ConfirmAction
    Model depth: 6
    """
    type_: str = Field(default="ConfirmAction", alias='@type', const=True)
    



class FoodService(Service):
    """A food service, like breakfast, lunch, or dinner.

    See: https://schema.org/FoodService
    Model depth: 4
    """
    type_: str = Field(default="FoodService", alias='@type', const=True)
    



class ControlAction(Action):
    """An agent controls a device or application.

    See: https://schema.org/ControlAction
    Model depth: 3
    """
    type_: str = Field(default="ControlAction", alias='@type', const=True)
    



class DeactivateAction(ControlAction):
    """The act of stopping or deactivating a device or application (e.g. stopping a timer or"
     "turning off a flashlight).

    See: https://schema.org/DeactivateAction
    Model depth: 4
    """
    type_: str = Field(default="DeactivateAction", alias='@type', const=True)
    



class TheaterGroup(PerformingGroup):
    """A theater group or company, for example, the Royal Shakespeare Company or Druid Theatre.

    See: https://schema.org/TheaterGroup
    Model depth: 4
    """
    type_: str = Field(default="TheaterGroup", alias='@type', const=True)
    



class OrderPaymentDue(OrderStatus):
    """OrderStatus representing that payment is due on an order.

    See: https://schema.org/OrderPaymentDue
    Model depth: 6
    """
    type_: str = Field(default="OrderPaymentDue", alias='@type', const=True)
    



class AutoRental(AutomotiveBusiness):
    """A car rental business.

    See: https://schema.org/AutoRental
    Model depth: 5
    """
    type_: str = Field(default="AutoRental", alias='@type', const=True)
    



class DigitalFormat(MusicReleaseFormatType):
    """DigitalFormat.

    See: https://schema.org/DigitalFormat
    Model depth: 5
    """
    type_: str = Field(default="DigitalFormat", alias='@type', const=True)
    



class InviteAction(CommunicateAction):
    """The act of asking someone to attend an event. Reciprocal of RsvpAction.

    See: https://schema.org/InviteAction
    Model depth: 5
    """
    type_: str = Field(default="InviteAction", alias='@type', const=True)
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    



class PodcastSeries(CreativeWorkSeries):
    """A podcast is an episodic series of digital audio or video files which a user can download"
     "and listen to.

    See: https://schema.org/PodcastSeries
    Model depth: 4
    """
    type_: str = Field(default="PodcastSeries", alias='@type', const=True)
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    webFeed: Optional[Union[List[Union[AnyUrl, URL, DataFeed, str]], AnyUrl, URL, DataFeed, str]] = Field(
        default=None,
        description="The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped"
     "updates. This is usually RSS or Atom.",
    )
    



class SizeSpecification(QualitativeValue):
    """Size related properties of a product, typically a size code ([[name]]) and optionally"
     "a [[sizeSystem]], [[sizeGroup]], and product measurements ([[hasMeasurement]])."
     "In addition, the intended audience can be defined through [[suggestedAge]], [[suggestedGender]],"
     "and suggested body measurements ([[suggestedMeasurement]]).

    See: https://schema.org/SizeSpecification
    Model depth: 5
    """
    type_: str = Field(default="SizeSpecification", alias='@type', const=True)
    hasMeasurement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A product measurement, for example the inseam of pants, the wheel size of a bicycle, or"
     "the gauge of a screw. Usually an exact measurement, but can also be a range of measurements"
     "for adjustable products, for example belts and ski bindings.",
    )
    suggestedMeasurement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A suggested range of body measurements for the intended audience or person, for example"
     "inseam between 32 and 34 inches or height between 170 and 190 cm. Typically found on a size"
     "chart for wearable products.",
    )
    sizeSystem: Optional[Union[List[Union[str, Text, SizeSystemEnumeration]], str, Text, SizeSystemEnumeration]] = Field(
        default=None,
        description="The size system used to identify a product's size. Typically either a standard (for example,"
     "\"GS1\" or \"ISO-EN13402\"), country code (for example \"US\" or \"JP\"), or a measuring"
     "system (for example \"Metric\" or \"Imperial\").",
    )
    sizeGroup: Optional[Union[List[Union[str, Text, SizeGroupEnumeration]], str, Text, SizeGroupEnumeration]] = Field(
        default=None,
        description="The size group (also known as \"size type\") for a product's size. Size groups are common"
     "in the fashion industry to define size segments and suggested audiences for wearable"
     "products. Multiple values can be combined, for example \"men's big and tall\", \"petite"
     "maternity\" or \"regular\"",
    )
    suggestedGender: Optional[Union[List[Union[str, Text, GenderType]], str, Text, GenderType]] = Field(
        default=None,
        description="The suggested gender of the intended person or audience, for example \"male\", \"female\","
     "or \"unisex\".",
    )
    suggestedAge: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The age or age range for the intended audience or person, for example 3-12 months for infants,"
     "1-5 years for toddlers.",
    )
    



class WebContent(CreativeWork):
    """WebContent is a type representing all [[WebPage]], [[WebSite]] and [[WebPageElement]]"
     "content. It is sometimes the case that detailed distinctions between Web pages, sites"
     "and their parts are not always important or obvious. The [[WebContent]] type makes it"
     "easier to describe Web-addressable content without requiring such distinctions to"
     "always be stated. (The intent is that the existing types [[WebPage]], [[WebSite]] and"
     "[[WebPageElement]] will eventually be declared as subtypes of [[WebContent]].)

    See: https://schema.org/WebContent
    Model depth: 3
    """
    type_: str = Field(default="WebContent", alias='@type', const=True)
    



class HealthTopicContent(WebContent):
    """[[HealthTopicContent]] is [[WebContent]] that is about some aspect of a health topic,"
     "e.g. a condition, its symptoms or treatments. Such content may be comprised of several"
     "parts or sections and use different types of media. Multiple instances of [[WebContent]]"
     "(and hence [[HealthTopicContent]]) can be related using [[hasPart]] / [[isPartOf]]"
     "where there is some kind of content hierarchy, and their content described with [[about]]"
     "and [[mentions]] e.g. building upon the existing [[MedicalCondition]] vocabulary.

    See: https://schema.org/HealthTopicContent
    Model depth: 4
    """
    type_: str = Field(default="HealthTopicContent", alias='@type', const=True)
    hasHealthAspect: Optional[Union[List[Union[HealthAspectEnumeration, str]], HealthAspectEnumeration, str]] = Field(
        default=None,
        description="Indicates the aspect or aspects specifically addressed in some [[HealthTopicContent]]."
     "For example, that the content is an overview, or that it talks about treatment, self-care,"
     "treatments or their side-effects.",
    )
    



class CriticReview(Review):
    """A [[CriticReview]] is a more specialized form of Review written or published by a source"
     "that is recognized for its reviewing activities. These can include online columns,"
     "travel and food guides, TV and radio shows, blogs and other independent Web sites. [[CriticReview]]s"
     "are typically more in-depth and professionally written. For simpler, casually written"
     "user/visitor/viewer/customer reviews, it is more appropriate to use the [[UserReview]]"
     "type. Review aggregator sites such as Metacritic already separate out the site's user"
     "reviews from selected critic reviews that originate from third-party sources.

    See: https://schema.org/CriticReview
    Model depth: 4
    """
    type_: str = Field(default="CriticReview", alias='@type', const=True)
    



class CleaningFee(PriceComponentTypeEnumeration):
    """Represents the cleaning fee part of the total price for an offered product, for example"
     "a vacation rental.

    See: https://schema.org/CleaningFee
    Model depth: 5
    """
    type_: str = Field(default="CleaningFee", alias='@type', const=True)
    



class Aquarium(CivicStructure):
    """Aquarium.

    See: https://schema.org/Aquarium
    Model depth: 4
    """
    type_: str = Field(default="Aquarium", alias='@type', const=True)
    



class WearableSizeSystemIT(WearableSizeSystemEnumeration):
    """Italian size system for wearables.

    See: https://schema.org/WearableSizeSystemIT
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemIT", alias='@type', const=True)
    



class PublicSwimmingPool(SportsActivityLocation):
    """A public swimming pool.

    See: https://schema.org/PublicSwimmingPool
    Model depth: 5
    """
    type_: str = Field(default="PublicSwimmingPool", alias='@type', const=True)
    



class WearableSizeGroupPlus(WearableSizeGroupEnumeration):
    """Size group \"Plus\" for wearables.

    See: https://schema.org/WearableSizeGroupPlus
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupPlus", alias='@type', const=True)
    



class PodcastEpisode(Episode):
    """A single episode of a podcast series.

    See: https://schema.org/PodcastEpisode
    Model depth: 4
    """
    type_: str = Field(default="PodcastEpisode", alias='@type', const=True)
    



class Dataset(CreativeWork):
    """A body of structured information describing some topic(s) of interest.

    See: https://schema.org/Dataset
    Model depth: 3
    """
    type_: str = Field(default="Dataset", alias='@type', const=True)
    catalog: Optional[Union[List[Union[DataCatalog, str]], DataCatalog, str]] = Field(
        default=None,
        description="A data catalog which contains this dataset.",
    )
    datasetTimeInterval: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The range of temporal applicability of a dataset, e.g. for a 2011 census dataset, the"
     "year 2011 (in ISO 8601 time interval format).",
    )
    variableMeasured: Optional[Union[List[Union[str, Text, PropertyValue]], str, Text, PropertyValue]] = Field(
        default=None,
        description="The variableMeasured property can indicate (repeated as necessary) the variables"
     "that are measured in some dataset, either described as text or as pairs of identifier"
     "and description using PropertyValue.",
    )
    includedDataCatalog: Optional[Union[List[Union[DataCatalog, str]], DataCatalog, str]] = Field(
        default=None,
        description="A data catalog which contains this dataset (this property was previously 'catalog',"
     "preferred name is now 'includedInDataCatalog').",
    )
    measurementTechnique: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),"
     "corresponding to the method used for measuring the corresponding variable(s) (described"
     "using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset"
     "publication but may have broader applicability; it is not intended as a full representation"
     "of measurement, but rather as a high level summary for dataset discovery. For example,"
     "if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]]"
     "could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\"."
     "If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]]"
     "could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are"
     "several [[variableMeasured]] properties recorded for some given data object, use"
     "a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].",
    )
    distribution: Optional[Union[List[Union[DataDownload, str]], DataDownload, str]] = Field(
        default=None,
        description="A downloadable form of this dataset, at a specific location, in a specific format. This"
     "property can be repeated if different variations are available. There is no expectation"
     "that different downloadable distributions must contain exactly equivalent information"
     "(see also [DCAT](https://www.w3.org/TR/vocab-dcat-3/#Class:Distribution) on"
     "this point). Different distributions might include or exclude different subsets of"
     "the entire dataset, for example.",
    )
    includedInDataCatalog: Optional[Union[List[Union[DataCatalog, str]], DataCatalog, str]] = Field(
        default=None,
        description="A data catalog which contains this dataset.",
    )
    issn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Serial Number (ISSN) that identifies this serial publication."
     "You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L)"
     "for, this serial publication.",
    )
    



class Conversation(CreativeWork):
    """One or more messages between organizations or people on a particular topic. Individual"
     "messages can be linked to the conversation with isPartOf or hasPart properties.

    See: https://schema.org/Conversation
    Model depth: 3
    """
    type_: str = Field(default="Conversation", alias='@type', const=True)
    



class MedicalOrganization(Organization):
    """A medical organization (physical or not), such as hospital, institution or clinic.

    See: https://schema.org/MedicalOrganization
    Model depth: 3
    """
    type_: str = Field(default="MedicalOrganization", alias='@type', const=True)
    healthPlanNetworkId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Name or unique ID of network. (Networks are often reused across different insurance"
     "plans.)",
    )
    medicalSpecialty: Optional[Union[List[Union[MedicalSpecialty, str]], MedicalSpecialty, str]] = Field(
        default=None,
        description="A medical specialty of the provider.",
    )
    isAcceptingNewPatients: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether the provider is accepting new patients.",
    )
    



class MedicalClinic(MedicalBusiness, MedicalOrganization):
    """A facility, often associated with a hospital or medical school, that is devoted to the"
     "specific diagnosis and/or healthcare. Previously limited to outpatients but with"
     "evolution it may be open to inpatients as well.

    See: https://schema.org/MedicalClinic
    Model depth: 4
    """
    type_: str = Field(default="MedicalClinic", alias='@type', const=True)
    medicalSpecialty: Optional[Union[List[Union[MedicalSpecialty, str]], MedicalSpecialty, str]] = Field(
        default=None,
        description="A medical specialty of the provider.",
    )
    availableService: Optional[Union[List[Union[MedicalTest, MedicalTherapy, MedicalProcedure, str]], MedicalTest, MedicalTherapy, MedicalProcedure, str]] = Field(
        default=None,
        description="A medical service available from this provider.",
    )
    



class CovidTestingFacility(MedicalClinic):
    """A CovidTestingFacility is a [[MedicalClinic]] where testing for the COVID-19 Coronavirus"
     "disease is available. If the facility is being made available from an established [[Pharmacy]],"
     "[[Hotel]], or other non-medical organization, multiple types can be listed. This makes"
     "it easier to re-use existing schema.org information about that place, e.g. contact"
     "info, address, opening hours. Note that in an emergency, such information may not always"
     "be reliable.

    See: https://schema.org/CovidTestingFacility
    Model depth: 5
    """
    type_: str = Field(default="CovidTestingFacility", alias='@type', const=True)
    



class OutOfStock(ItemAvailability):
    """Indicates that the item is out of stock.

    See: https://schema.org/OutOfStock
    Model depth: 5
    """
    type_: str = Field(default="OutOfStock", alias='@type', const=True)
    



class PostalCodeRangeSpecification(StructuredValue):
    """Indicates a range of postal codes, usually defined as the set of valid codes between [[postalCodeBegin]]"
     "and [[postalCodeEnd]], inclusively.

    See: https://schema.org/PostalCodeRangeSpecification
    Model depth: 4
    """
    type_: str = Field(default="PostalCodeRangeSpecification", alias='@type', const=True)
    postalCodeBegin: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="First postal code in a range (included).",
    )
    postalCodeEnd: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Last postal code in the range (included). Needs to be after [[postalCodeBegin]].",
    )
    



class Nonprofit501c18(USNonprofitType):
    """Nonprofit501c18: Non-profit type referring to Employee Funded Pension Trust (created"
     "before 25 June 1959).

    See: https://schema.org/Nonprofit501c18
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c18", alias='@type', const=True)
    



class ReactAction(AssessAction):
    """The act of responding instinctively and emotionally to an object, expressing a sentiment.

    See: https://schema.org/ReactAction
    Model depth: 4
    """
    type_: str = Field(default="ReactAction", alias='@type', const=True)
    



class WantAction(ReactAction):
    """The act of expressing a desire about the object. An agent wants an object.

    See: https://schema.org/WantAction
    Model depth: 5
    """
    type_: str = Field(default="WantAction", alias='@type', const=True)
    



class MixtapeAlbum(MusicAlbumProductionType):
    """MixtapeAlbum.

    See: https://schema.org/MixtapeAlbum
    Model depth: 5
    """
    type_: str = Field(default="MixtapeAlbum", alias='@type', const=True)
    



class Nonprofit501c20(USNonprofitType):
    """Nonprofit501c20: Non-profit type referring to Group Legal Services Plan Organizations.

    See: https://schema.org/Nonprofit501c20
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c20", alias='@type', const=True)
    



class Nonprofit501c15(USNonprofitType):
    """Nonprofit501c15: Non-profit type referring to Mutual Insurance Companies or Associations.

    See: https://schema.org/Nonprofit501c15
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c15", alias='@type', const=True)
    



class BookFormatType(Enumeration):
    """The publication format of the book.

    See: https://schema.org/BookFormatType
    Model depth: 4
    """
    type_: str = Field(default="BookFormatType", alias='@type', const=True)
    



class GraphicNovel(BookFormatType):
    """Book format: GraphicNovel. May represent a bound collection of ComicIssue instances.

    See: https://schema.org/GraphicNovel
    Model depth: 5
    """
    type_: str = Field(default="GraphicNovel", alias='@type', const=True)
    



class TaxiReservation(Reservation):
    """A reservation for a taxi. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations."
     "For offers of tickets, use [[Offer]].

    See: https://schema.org/TaxiReservation
    Model depth: 4
    """
    type_: str = Field(default="TaxiReservation", alias='@type', const=True)
    pickupTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="When a taxi will pick up a passenger or a rental car can be picked up.",
    )
    pickupLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="Where a taxi will pick up a passenger or a rental car can be picked up.",
    )
    partySize: Optional[Union[List[Union[int, Integer, QuantitativeValue, str]], int, Integer, QuantitativeValue, str]] = Field(
        default=None,
        description="Number of people the reservation should accommodate.",
    )
    



class Bacteria(InfectiousAgentClass):
    """Pathogenic bacteria that cause bacterial infection.

    See: https://schema.org/Bacteria
    Model depth: 6
    """
    type_: str = Field(default="Bacteria", alias='@type', const=True)
    



class NightClub(EntertainmentBusiness):
    """A nightclub or discotheque.

    See: https://schema.org/NightClub
    Model depth: 5
    """
    type_: str = Field(default="NightClub", alias='@type', const=True)
    



class OrganizeAction(Action):
    """The act of manipulating/administering/supervising/controlling one or more objects.

    See: https://schema.org/OrganizeAction
    Model depth: 3
    """
    type_: str = Field(default="OrganizeAction", alias='@type', const=True)
    



class PlanAction(OrganizeAction):
    """The act of planning the execution of an event/task/action/reservation/plan to a future"
     "date.

    See: https://schema.org/PlanAction
    Model depth: 4
    """
    type_: str = Field(default="PlanAction", alias='@type', const=True)
    scheduledTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The time the object is scheduled to.",
    )
    



class ScheduleAction(PlanAction):
    """Scheduling future actions, events, or tasks. Related actions: * [[ReserveAction]]:"
     "Unlike ReserveAction, ScheduleAction allocates future actions (e.g. an event, a task,"
     "etc) towards a time slot / spatial allocation.

    See: https://schema.org/ScheduleAction
    Model depth: 5
    """
    type_: str = Field(default="ScheduleAction", alias='@type', const=True)
    



class ScholarlyArticle(Article):
    """A scholarly article.

    See: https://schema.org/ScholarlyArticle
    Model depth: 4
    """
    type_: str = Field(default="ScholarlyArticle", alias='@type', const=True)
    



class PlaceOfWorship(CivicStructure):
    """Place of worship, such as a church, synagogue, or mosque.

    See: https://schema.org/PlaceOfWorship
    Model depth: 4
    """
    type_: str = Field(default="PlaceOfWorship", alias='@type', const=True)
    



class BuddhistTemple(PlaceOfWorship):
    """A Buddhist temple.

    See: https://schema.org/BuddhistTemple
    Model depth: 5
    """
    type_: str = Field(default="BuddhistTemple", alias='@type', const=True)
    



class SatiricalArticle(Article):
    """An [[Article]] whose content is primarily [[satirical]](https://en.wikipedia.org/wiki/Satire)"
     "in nature, i.e. unlikely to be literally true. A satirical article is sometimes but not"
     "necessarily also a [[NewsArticle]]. [[ScholarlyArticle]]s are also sometimes satirized.

    See: https://schema.org/SatiricalArticle
    Model depth: 4
    """
    type_: str = Field(default="SatiricalArticle", alias='@type', const=True)
    



class FoodEstablishment(LocalBusiness):
    """A food-related business.

    See: https://schema.org/FoodEstablishment
    Model depth: 4
    """
    type_: str = Field(default="FoodEstablishment", alias='@type', const=True)
    starRating: Optional[Union[List[Union[Rating, str]], Rating, str]] = Field(
        default=None,
        description="An official rating for a lodging business or food establishment, e.g. from national"
     "associations or standards bodies. Use the author property to indicate the rating organization,"
     "e.g. as an Organization with name such as (e.g. HOTREC, DEHOGA, WHR, or Hotelstars).",
    )
    servesCuisine: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The cuisine of the restaurant.",
    )
    acceptsReservations: Optional[Union[List[Union[AnyUrl, URL, str, Text, StrictBool, Boolean]], AnyUrl, URL, str, Text, StrictBool, Boolean]] = Field(
        default=None,
        description="Indicates whether a FoodEstablishment accepts reservations. Values can be Boolean,"
     "an URL at which reservations can be made or (for backwards compatibility) the strings"
     "```Yes``` or ```No```.",
    )
    menu: Optional[Union[List[Union[AnyUrl, URL, str, Text, Menu]], AnyUrl, URL, str, Text, Menu]] = Field(
        default=None,
        description="Either the actual menu as a structured representation, as text, or a URL of the menu.",
    )
    hasMenu: Optional[Union[List[Union[AnyUrl, URL, str, Text, Menu]], AnyUrl, URL, str, Text, Menu]] = Field(
        default=None,
        description="Either the actual menu as a structured representation, as text, or a URL of the menu.",
    )
    



class MarryAction(InteractAction):
    """The act of marrying a person.

    See: https://schema.org/MarryAction
    Model depth: 4
    """
    type_: str = Field(default="MarryAction", alias='@type', const=True)
    



class ProfilePage(WebPage):
    """Web page type: Profile page.

    See: https://schema.org/ProfilePage
    Model depth: 4
    """
    type_: str = Field(default="ProfilePage", alias='@type', const=True)
    



class AmusementPark(EntertainmentBusiness):
    """An amusement park.

    See: https://schema.org/AmusementPark
    Model depth: 5
    """
    type_: str = Field(default="AmusementPark", alias='@type', const=True)
    



class BowlingAlley(SportsActivityLocation):
    """A bowling alley.

    See: https://schema.org/BowlingAlley
    Model depth: 5
    """
    type_: str = Field(default="BowlingAlley", alias='@type', const=True)
    



class Sunday(DayOfWeek):
    """The day of the week between Saturday and Monday.

    See: https://schema.org/Sunday
    Model depth: 5
    """
    type_: str = Field(default="Sunday", alias='@type', const=True)
    



class ScreeningHealthAspect(HealthAspectEnumeration):
    """Content about how to screen or further filter a topic.

    See: https://schema.org/ScreeningHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="ScreeningHealthAspect", alias='@type', const=True)
    



class PaymentMethod(Enumeration):
    """A payment method is a standardized procedure for transferring the monetary amount for"
     "a purchase. Payment methods are characterized by the legal and technical structures"
     "used, and by the organization or group carrying out the transaction. Commonly used values:"
     "* http://purl.org/goodrelations/v1#ByBankTransferInAdvance * http://purl.org/goodrelations/v1#ByInvoice"
     "* http://purl.org/goodrelations/v1#Cash * http://purl.org/goodrelations/v1#CheckInAdvance"
     "* http://purl.org/goodrelations/v1#COD * http://purl.org/goodrelations/v1#DirectDebit"
     "* http://purl.org/goodrelations/v1#GoogleCheckout * http://purl.org/goodrelations/v1#PayPal"
     "* http://purl.org/goodrelations/v1#PaySwarm

    See: https://schema.org/PaymentMethod
    Model depth: 4
    """
    type_: str = Field(default="PaymentMethod", alias='@type', const=True)
    



class PaymentCard(PaymentMethod, FinancialProduct):
    """A payment method using a credit, debit, store or other card to associate the payment with"
     "an account.

    See: https://schema.org/PaymentCard
    Model depth: 5
    """
    type_: str = Field(default="PaymentCard", alias='@type', const=True)
    floorLimit: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="A floor limit is the amount of money above which credit card transactions must be authorized.",
    )
    cashBack: Optional[Union[List[Union[StrictInt, StrictFloat, Number, StrictBool, Boolean, str]], StrictInt, StrictFloat, Number, StrictBool, Boolean, str]] = Field(
        default=None,
        description="A cardholder benefit that pays the cardholder a small percentage of their net expenditures.",
    )
    contactlessPayment: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A secure method for consumers to purchase products or services via debit, credit or smartcards"
     "by using RFID or NFC technology.",
    )
    monthlyMinimumRepaymentAmount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The minimum payment is the lowest amount of money that one is required to pay on a credit"
     "card statement each month.",
    )
    



class RespiratoryTherapy(MedicalTherapy, MedicalSpecialty):
    """The therapy that is concerned with the maintenance or improvement of respiratory function"
     "(as in patients with pulmonary disease).

    See: https://schema.org/RespiratoryTherapy
    Model depth: 6
    """
    type_: str = Field(default="RespiratoryTherapy", alias='@type', const=True)
    



class DataFeed(Dataset):
    """A single feed providing structured information about one or more entities or topics.

    See: https://schema.org/DataFeed
    Model depth: 4
    """
    type_: str = Field(default="DataFeed", alias='@type', const=True)
    dataFeedElement: Optional[Union[List[Union[str, Text, DataFeedItem, Thing]], str, Text, DataFeedItem, Thing]] = Field(
        default=None,
        description="An item within a data feed. Data feeds may have many elements.",
    )
    



class CarUsageType(Enumeration):
    """A value indicating a special usage of a car, e.g. commercial rental, driving school,"
     "or as a taxi.

    See: https://schema.org/CarUsageType
    Model depth: 4
    """
    type_: str = Field(default="CarUsageType", alias='@type', const=True)
    



class TaxiVehicleUsage(CarUsageType):
    """Indicates the usage of the car as a taxi.

    See: https://schema.org/TaxiVehicleUsage
    Model depth: 5
    """
    type_: str = Field(default="TaxiVehicleUsage", alias='@type', const=True)
    



class ElectronicsStore(Store):
    """An electronics store.

    See: https://schema.org/ElectronicsStore
    Model depth: 5
    """
    type_: str = Field(default="ElectronicsStore", alias='@type', const=True)
    



class Toxicologic(MedicalSpecialty):
    """A specific branch of medical science that is concerned with poisons, their nature, effects"
     "and detection and involved in the treatment of poisoning.

    See: https://schema.org/Toxicologic
    Model depth: 6
    """
    type_: str = Field(default="Toxicologic", alias='@type', const=True)
    



class CDFormat(MusicReleaseFormatType):
    """CDFormat.

    See: https://schema.org/CDFormat
    Model depth: 5
    """
    type_: str = Field(default="CDFormat", alias='@type', const=True)
    



class VideoGameClip(Clip):
    """A short segment/part of a video game.

    See: https://schema.org/VideoGameClip
    Model depth: 4
    """
    type_: str = Field(default="VideoGameClip", alias='@type', const=True)
    



class AchieveAction(Action):
    """The act of accomplishing something via previous efforts. It is an instantaneous action"
     "rather than an ongoing process.

    See: https://schema.org/AchieveAction
    Model depth: 3
    """
    type_: str = Field(default="AchieveAction", alias='@type', const=True)
    



class TieAction(AchieveAction):
    """The act of reaching a draw in a competitive activity.

    See: https://schema.org/TieAction
    Model depth: 4
    """
    type_: str = Field(default="TieAction", alias='@type', const=True)
    



class AllWheelDriveConfiguration(DriveWheelConfigurationValue):
    """All-wheel Drive is a transmission layout where the engine drives all four wheels.

    See: https://schema.org/AllWheelDriveConfiguration
    Model depth: 6
    """
    type_: str = Field(default="AllWheelDriveConfiguration", alias='@type', const=True)
    



class Bone(AnatomicalStructure):
    """Rigid connective tissue that comprises up the skeletal structure of the human body.

    See: https://schema.org/Bone
    Model depth: 4
    """
    type_: str = Field(default="Bone", alias='@type', const=True)
    



class BroadcastChannel(Intangible):
    """A unique instance of a BroadcastService on a CableOrSatelliteService lineup.

    See: https://schema.org/BroadcastChannel
    Model depth: 3
    """
    type_: str = Field(default="BroadcastChannel", alias='@type', const=True)
    broadcastChannelId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unique address by which the BroadcastService can be identified in a provider lineup."
     "In US, this is typically a number.",
    )
    providesBroadcastService: Optional[Union[List[Union[BroadcastService, str]], BroadcastService, str]] = Field(
        default=None,
        description="The BroadcastService offered on this channel.",
    )
    genre: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Genre of the creative work, broadcast channel or group.",
    )
    broadcastServiceTier: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of service required to have access to the channel (e.g. Standard or Premium).",
    )
    inBroadcastLineup: Optional[Union[List[Union[CableOrSatelliteService, str]], CableOrSatelliteService, str]] = Field(
        default=None,
        description="The CableOrSatelliteService offering the channel.",
    )
    broadcastFrequency: Optional[Union[List[Union[str, Text, BroadcastFrequencySpecification]], str, Text, BroadcastFrequencySpecification]] = Field(
        default=None,
        description="The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g."
     "87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels,"
     "e.g. \"87 FM\".",
    )
    



class RadioChannel(BroadcastChannel):
    """A unique instance of a radio BroadcastService on a CableOrSatelliteService lineup.

    See: https://schema.org/RadioChannel
    Model depth: 4
    """
    type_: str = Field(default="RadioChannel", alias='@type', const=True)
    



class AMRadioChannel(RadioChannel):
    """A radio channel that uses AM.

    See: https://schema.org/AMRadioChannel
    Model depth: 5
    """
    type_: str = Field(default="AMRadioChannel", alias='@type', const=True)
    



class PET(MedicalImagingTechnique):
    """Positron emission tomography imaging.

    See: https://schema.org/PET
    Model depth: 6
    """
    type_: str = Field(default="PET", alias='@type', const=True)
    



class MusicAlbumReleaseType(Enumeration):
    """The kind of release which this album is: single, EP or album.

    See: https://schema.org/MusicAlbumReleaseType
    Model depth: 4
    """
    type_: str = Field(default="MusicAlbumReleaseType", alias='@type', const=True)
    



class Nonprofit501n(USNonprofitType):
    """Nonprofit501n: Non-profit type referring to Charitable Risk Pools.

    See: https://schema.org/Nonprofit501n
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501n", alias='@type', const=True)
    



class Project(Organization):
    """An enterprise (potentially individual but typically collaborative), planned to achieve"
     "a particular aim. Use properties from [[Organization]], [[subOrganization]]/[[parentOrganization]]"
     "to indicate project sub-structures.

    See: https://schema.org/Project
    Model depth: 3
    """
    type_: str = Field(default="Project", alias='@type', const=True)
    



class ResearchProject(Project):
    """A Research project.

    See: https://schema.org/ResearchProject
    Model depth: 4
    """
    type_: str = Field(default="ResearchProject", alias='@type', const=True)
    



class DislikeAction(ReactAction):
    """The act of expressing a negative sentiment about the object. An agent dislikes an object"
     "(a proposition, topic or theme) with participants.

    See: https://schema.org/DislikeAction
    Model depth: 5
    """
    type_: str = Field(default="DislikeAction", alias='@type', const=True)
    



class Schedule(Intangible):
    """A schedule defines a repeating time period used to describe a regularly occurring [[Event]]."
     "At a minimum a schedule will specify [[repeatFrequency]] which describes the interval"
     "between occurrences of the event. Additional information can be provided to specify"
     "the schedule more precisely. This includes identifying the day(s) of the week or month"
     "when the recurring event will take place, in addition to its start and end time. Schedules"
     "may also have start and end dates to indicate when they are active, e.g. to define a limited"
     "calendar of events.

    See: https://schema.org/Schedule
    Model depth: 3
    """
    type_: str = Field(default="Schedule", alias='@type', const=True)
    endTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to end. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from January to *December*. For media, including"
     "audio and video, it's the time offset of the end of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    startTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation),"
     "the time that it is expected to start. For actions that span a period of time, when the action"
     "was performed. E.g. John wrote a book from *January* to December. For media, including"
     "audio and video, it's the time offset of the start of a clip within a larger file. Note that"
     "Event uses startDate/endDate instead of startTime/endTime, even when describing"
     "dates with times. This situation may be clarified in future revisions.",
    )
    exceptDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Defines a [[Date]] or [[DateTime]] during which a scheduled [[Event]] will not take"
     "place. The property allows exceptions to a [[Schedule]] to be specified. If an exception"
     "is specified as a [[DateTime]] then only the event that would have started at that specific"
     "date and time should be excluded from the schedule. If an exception is specified as a [[Date]]"
     "then any event that is scheduled for that 24 hour period should be excluded from the schedule."
     "This allows a whole day to be excluded from the schedule without having to itemise every"
     "scheduled event.",
    )
    repeatFrequency: Optional[Union[List[Union[str, Text, Duration]], str, Text, Duration]] = Field(
        default=None,
        description="Defines the frequency at which [[Event]]s will occur according to a schedule [[Schedule]]."
     "The intervals between events should be defined as a [[Duration]] of time.",
    )
    scheduleTimezone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the timezone for which the time(s) indicated in the [[Schedule]] are given."
     "The value provided should be among those listed in the IANA Time Zone Database.",
    )
    byMonthWeek: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Defines the week(s) of the month on which a recurring Event takes place. Specified as"
     "an Integer between 1-5. For clarity, byMonthWeek is best used in conjunction with byDay"
     "to indicate concepts like the first and third Mondays of a month.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    byDay: Optional[Union[List[Union[str, Text, DayOfWeek]], str, Text, DayOfWeek]] = Field(
        default=None,
        description="Defines the day(s) of the week on which a recurring [[Event]] takes place. May be specified"
     "using either [[DayOfWeek]], or alternatively [[Text]] conforming to iCal's syntax"
     "for byDay recurrence rules.",
    )
    byMonthDay: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Defines the day(s) of the month on which a recurring [[Event]] takes place. Specified"
     "as an [[Integer]] between 1-31.",
    )
    repeatCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Defines the number of times a recurring [[Event]] will take place.",
    )
    byMonth: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Defines the month(s) of the year on which a recurring [[Event]] takes place. Specified"
     "as an [[Integer]] between 1-12. January is 1.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class ContactPage(WebPage):
    """Web page type: Contact page.

    See: https://schema.org/ContactPage
    Model depth: 4
    """
    type_: str = Field(default="ContactPage", alias='@type', const=True)
    



class AlignmentObject(Intangible):
    """An intangible item that describes an alignment between a learning resource and a node"
     "in an educational framework. Should not be used where the nature of the alignment can"
     "be described using a simple property, for example to express that a resource [[teaches]]"
     "or [[assesses]] a competency.

    See: https://schema.org/AlignmentObject
    Model depth: 3
    """
    type_: str = Field(default="AlignmentObject", alias='@type', const=True)
    targetName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of a node in an established educational framework.",
    )
    targetUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The URL of a node in an established educational framework.",
    )
    alignmentType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A category of alignment between the learning resource and the framework node. Recommended"
     "values include: 'requires', 'textComplexity', 'readingLevel', and 'educationalSubject'.",
    )
    targetDescription: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The description of a node in an established educational framework.",
    )
    educationalFramework: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The framework to which the resource being described is aligned.",
    )
    



class PriceSpecification(StructuredValue):
    """A structured value representing a price or price range. Typically, only the subclasses"
     "of this type are used for markup. It is recommended to use [[MonetaryAmount]] to describe"
     "independent amounts of money such as a salary, credit card limits, etc.

    See: https://schema.org/PriceSpecification
    Model depth: 4
    """
    type_: str = Field(default="PriceSpecification", alias='@type', const=True)
    eligibleQuantity: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The interval and unit of measurement of ordering quantities for which the offer or price"
     "specification is valid. This allows e.g. specifying that a certain freight charge is"
     "valid only for a certain quantity.",
    )
    valueAddedTaxIncluded: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Specifies whether the applicable value-added tax (VAT) is included in the price specification"
     "or not.",
    )
    minPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The lowest price if the price is a range.",
    )
    price: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The offer price of a product, or of a price component when attached to PriceSpecification"
     "and its subtypes. Usage guidelines: * Use the [[priceCurrency]] property (with standard"
     "formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\") instead of including [ambiguous"
     "symbols](http://en.wikipedia.org/wiki/Dollar_sign#Currencies_that_use_the_dollar_or_peso_sign)"
     "such as '$' in the value. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate"
     "a decimal point. Avoid using these symbols as a readability separator. * Note that both"
     "[RDFa](http://www.w3.org/TR/xhtml-rdfa-primer/#using-the-content-attribute)"
     "and Microdata syntax allow the use of a \"content=\" attribute for publishing simple"
     "machine-readable values alongside more human-friendly formatting. * Use values from"
     "0123456789 (Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols.",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    maxPrice: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The highest price if the price is a range.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    eligibleTransactionVolume: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="The transaction volume, in a monetary unit, for which the offer or price specification"
     "is valid, e.g. for indicating a minimal purchasing volume, to express free shipping"
     "above a certain order volume, or to limit the acceptance of credit cards to purchases"
     "to a certain minimal amount.",
    )
    priceCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the price, or a price component when attached to [[PriceSpecification]]"
     "and its subtypes. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    



class PaymentChargeSpecification(PriceSpecification):
    """The costs of settling the payment using a particular payment method.

    See: https://schema.org/PaymentChargeSpecification
    Model depth: 5
    """
    type_: str = Field(default="PaymentChargeSpecification", alias='@type', const=True)
    appliesToPaymentMethod: Optional[Union[List[Union[PaymentMethod, str]], PaymentMethod, str]] = Field(
        default=None,
        description="The payment method(s) to which the payment charge specification applies.",
    )
    appliesToDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="The delivery method(s) to which the delivery charge or payment charge specification"
     "applies.",
    )
    



class WebAPI(Service):
    """An application programming interface accessible over Web/Internet technologies.

    See: https://schema.org/WebAPI
    Model depth: 4
    """
    type_: str = Field(default="WebAPI", alias='@type', const=True)
    documentation: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Further documentation describing the Web API in more detail.",
    )
    



class TVClip(Clip):
    """A short TV program or a segment/part of a TV program.

    See: https://schema.org/TVClip
    Model depth: 4
    """
    type_: str = Field(default="TVClip", alias='@type', const=True)
    partOfTVSeries: Optional[Union[List[Union[TVSeries, str]], TVSeries, str]] = Field(
        default=None,
        description="The TV series to which this episode or season belongs.",
    )
    



class Quantity(Intangible):
    """Quantities such as distance, time, mass, weight, etc. Particular instances of say Mass"
     "are entities like '3 kg' or '4 milligrams'.

    See: https://schema.org/Quantity
    Model depth: 3
    """
    type_: str = Field(default="Quantity", alias='@type', const=True)
    



class Mass(Quantity):
    """Properties that take Mass as values are of the form '&lt;Number&gt; &lt;Mass unit of"
     "measure&gt;'. E.g., '7 kg'.

    See: https://schema.org/Mass
    Model depth: 4
    """
    type_: str = Field(default="Mass", alias='@type', const=True)
    



class GenderType(Enumeration):
    """An enumeration of genders.

    See: https://schema.org/GenderType
    Model depth: 4
    """
    type_: str = Field(default="GenderType", alias='@type', const=True)
    



class Male(GenderType):
    """The male gender.

    See: https://schema.org/Male
    Model depth: 5
    """
    type_: str = Field(default="Male", alias='@type', const=True)
    



class DangerousGoodConsideration(AdultOrientedEnumeration):
    """The item is dangerous and requires careful handling and/or special training of the user."
     "See also the [UN Model Classification](https://unece.org/DAM/trans/danger/publi/unrec/rev17/English/02EREv17_Part2.pdf)"
     "defining the 9 classes of dangerous goods such as explosives, gases, flammables, and"
     "more.

    See: https://schema.org/DangerousGoodConsideration
    Model depth: 5
    """
    type_: str = Field(default="DangerousGoodConsideration", alias='@type', const=True)
    



class HyperToc(CreativeWork):
    """A HyperToc represents a hypertext table of contents for complex media objects, such"
     "as [[VideoObject]], [[AudioObject]]. Items in the table of contents are indicated"
     "using the [[tocEntry]] property, and typed [[HyperTocEntry]]. For cases where the"
     "same larger work is split into multiple files, [[associatedMedia]] can be used on individual"
     "[[HyperTocEntry]] items.

    See: https://schema.org/HyperToc
    Model depth: 3
    """
    type_: str = Field(default="HyperToc", alias='@type', const=True)
    associatedMedia: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="A media object that encodes this CreativeWork. This property is a synonym for encoding.",
    )
    tocEntry: Optional[Union[List[Union[HyperTocEntry, str]], HyperTocEntry, str]] = Field(
        default=None,
        description="Indicates a [[HyperTocEntry]] in a [[HyperToc]].",
    )
    



class Restaurant(FoodEstablishment):
    """A restaurant.

    See: https://schema.org/Restaurant
    Model depth: 5
    """
    type_: str = Field(default="Restaurant", alias='@type', const=True)
    



class Permit(Intangible):
    """A permit issued by an organization, e.g. a parking pass.

    See: https://schema.org/Permit
    Model depth: 3
    """
    type_: str = Field(default="Permit", alias='@type', const=True)
    permitAudience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="The target audience for this permit.",
    )
    issuedBy: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The organization issuing the ticket or permit.",
    )
    validUntil: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date when the item is no longer valid.",
    )
    validFor: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of validity of a permit or similar thing.",
    )
    validIn: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area where a permit or similar thing is valid.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    issuedThrough: Optional[Union[List[Union[Service, str]], Service, str]] = Field(
        default=None,
        description="The service through which the permit was granted.",
    )
    



class GovernmentPermit(Permit):
    """A permit issued by a government agency.

    See: https://schema.org/GovernmentPermit
    Model depth: 4
    """
    type_: str = Field(default="GovernmentPermit", alias='@type', const=True)
    



class SportsClub(SportsActivityLocation):
    """A sports club.

    See: https://schema.org/SportsClub
    Model depth: 5
    """
    type_: str = Field(default="SportsClub", alias='@type', const=True)
    



class PublicationEvent(Event):
    """A PublicationEvent corresponds indifferently to the event of publication for a CreativeWork"
     "of any type, e.g. a broadcast event, an on-demand event, a book/journal publication"
     "via a variety of delivery media.

    See: https://schema.org/PublicationEvent
    Model depth: 3
    """
    type_: str = Field(default="PublicationEvent", alias='@type', const=True)
    publishedBy: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An agent associated with the publication event.",
    )
    free: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="A flag to signal that the item, event, or place is accessible for free.",
    )
    publishedOn: Optional[Union[List[Union[BroadcastService, str]], BroadcastService, str]] = Field(
        default=None,
        description="A broadcast service associated with the publication event.",
    )
    



class TravelAgency(LocalBusiness):
    """A travel agency.

    See: https://schema.org/TravelAgency
    Model depth: 4
    """
    type_: str = Field(default="TravelAgency", alias='@type', const=True)
    



class NailSalon(HealthAndBeautyBusiness):
    """A nail salon.

    See: https://schema.org/NailSalon
    Model depth: 5
    """
    type_: str = Field(default="NailSalon", alias='@type', const=True)
    



class RefurbishedCondition(OfferItemCondition):
    """Indicates that the item is refurbished.

    See: https://schema.org/RefurbishedCondition
    Model depth: 5
    """
    type_: str = Field(default="RefurbishedCondition", alias='@type', const=True)
    



class Plumber(HomeAndConstructionBusiness):
    """A plumbing service.

    See: https://schema.org/Plumber
    Model depth: 5
    """
    type_: str = Field(default="Plumber", alias='@type', const=True)
    



class TouristInformationCenter(LocalBusiness):
    """A tourist information center.

    See: https://schema.org/TouristInformationCenter
    Model depth: 4
    """
    type_: str = Field(default="TouristInformationCenter", alias='@type', const=True)
    



class QuoteAction(TradeAction):
    """An agent quotes/estimates/appraises an object/product/service with a price at a location/store.

    See: https://schema.org/QuoteAction
    Model depth: 4
    """
    type_: str = Field(default="QuoteAction", alias='@type', const=True)
    



class WearableSizeGroupBoys(WearableSizeGroupEnumeration):
    """Size group \"Boys\" for wearables.

    See: https://schema.org/WearableSizeGroupBoys
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupBoys", alias='@type', const=True)
    



class ActionStatusType(StatusEnumeration):
    """The status of an Action.

    See: https://schema.org/ActionStatusType
    Model depth: 5
    """
    type_: str = Field(default="ActionStatusType", alias='@type', const=True)
    



class CompletedActionStatus(ActionStatusType):
    """An action that has already taken place.

    See: https://schema.org/CompletedActionStatus
    Model depth: 6
    """
    type_: str = Field(default="CompletedActionStatus", alias='@type', const=True)
    



class BodyOfWater(Landform):
    """A body of water, such as a sea, ocean, or lake.

    See: https://schema.org/BodyOfWater
    Model depth: 4
    """
    type_: str = Field(default="BodyOfWater", alias='@type', const=True)
    



class OceanBodyOfWater(BodyOfWater):
    """An ocean (for example, the Pacific).

    See: https://schema.org/OceanBodyOfWater
    Model depth: 5
    """
    type_: str = Field(default="OceanBodyOfWater", alias='@type', const=True)
    



class PlayGameAction(ConsumeAction):
    """The act of playing a video game.

    See: https://schema.org/PlayGameAction
    Model depth: 4
    """
    type_: str = Field(default="PlayGameAction", alias='@type', const=True)
    gameAvailabilityType: Optional[Union[List[Union[str, Text, GameAvailabilityEnumeration]], str, Text, GameAvailabilityEnumeration]] = Field(
        default=None,
        description="Indicates the availability type of the game content associated with this action, such"
     "as whether it is a full version or a demo.",
    )
    



class ActivateAction(ControlAction):
    """The act of starting or activating a device or application (e.g. starting a timer or turning"
     "on a flashlight).

    See: https://schema.org/ActivateAction
    Model depth: 4
    """
    type_: str = Field(default="ActivateAction", alias='@type', const=True)
    



class MenuSection(CreativeWork):
    """A sub-grouping of food or drink items in a menu. E.g. courses (such as 'Dinner', 'Breakfast',"
     "etc.), specific type of dishes (such as 'Meat', 'Vegan', 'Drinks', etc.), or some other"
     "classification made by the menu provider.

    See: https://schema.org/MenuSection
    Model depth: 3
    """
    type_: str = Field(default="MenuSection", alias='@type', const=True)
    hasMenuSection: Optional[Union[List[Union[MenuSection, str]], MenuSection, str]] = Field(
        default=None,
        description="A subgrouping of the menu (by dishes, course, serving time period, etc.).",
    )
    hasMenuItem: Optional[Union[List[Union[MenuItem, str]], MenuItem, str]] = Field(
        default=None,
        description="A food or drink item contained in a menu or menu section.",
    )
    



class MovieRentalStore(Store):
    """A movie rental store.

    See: https://schema.org/MovieRentalStore
    Model depth: 5
    """
    type_: str = Field(default="MovieRentalStore", alias='@type', const=True)
    



class Chapter(CreativeWork):
    """One of the sections into which a book is divided. A chapter usually has a section number"
     "or a name.

    See: https://schema.org/Chapter
    Model depth: 3
    """
    type_: str = Field(default="Chapter", alias='@type', const=True)
    pageEnd: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work ends; for example \"138\" or \"xvi\".",
    )
    pagination: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any description of pages that is not separated into pageStart and pageEnd; for example,"
     "\"1-6, 9, 55\" or \"10-12, 46-49\".",
    )
    pageStart: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work starts; for example \"135\" or \"xiii\".",
    )
    



class BodyMeasurementUnderbust(BodyMeasurementTypeEnumeration):
    """Girth of body just below the bust. Used, for example, to fit women's swimwear.

    See: https://schema.org/BodyMeasurementUnderbust
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementUnderbust", alias='@type', const=True)
    



class Order(Intangible):
    """An order is a confirmation of a transaction (a receipt), which can contain multiple line"
     "items, each represented by an Offer that has been accepted by the customer.

    See: https://schema.org/Order
    Model depth: 3
    """
    type_: str = Field(default="Order", alias='@type', const=True)
    orderStatus: Optional[Union[List[Union[OrderStatus, str]], OrderStatus, str]] = Field(
        default=None,
        description="The current status of the order.",
    )
    isGift: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether the offer was accepted as a gift for someone other than the buyer.",
    )
    confirmationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A number that confirms the given order or payment has been received.",
    )
    broker: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity that arranges for an exchange between a buyer and a seller. In most cases a broker"
     "never acquires or releases ownership of a product or service involved in an exchange."
     "If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms"
     "are preferred.",
    )
    paymentDueDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date that payment is due.",
    )
    seller: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity which offers (sells / leases / lends / loans) the services / goods. A seller may"
     "also be a provider.",
    )
    discount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="Any discount applied (to an Order).",
    )
    discountCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency of the discount. Use standard formats: [ISO 4217 currency format](http://en.wikipedia.org/wiki/ISO_4217),"
     "e.g. \"USD\"; [Ticker symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies)"
     "for cryptocurrencies, e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    customer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Party placing the order or paying the invoice.",
    )
    paymentDue: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date that payment is due.",
    )
    acceptedOffer: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="The offer(s) -- e.g., product, quantity and price combinations -- included in the order.",
    )
    paymentMethodId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An identifier for the method of payment used (e.g. the last 4 digits of the credit card).",
    )
    merchant: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="'merchant' is an out-dated term for 'seller'.",
    )
    partOfInvoice: Optional[Union[List[Union[Invoice, str]], Invoice, str]] = Field(
        default=None,
        description="The order is being paid as part of the referenced Invoice.",
    )
    orderNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The identifier of the transaction.",
    )
    paymentMethod: Optional[Union[List[Union[PaymentMethod, str]], PaymentMethod, str]] = Field(
        default=None,
        description="The name of the credit card or other method of payment for the order.",
    )
    discountCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Code used to redeem a discount.",
    )
    orderDelivery: Optional[Union[List[Union[ParcelDelivery, str]], ParcelDelivery, str]] = Field(
        default=None,
        description="The delivery of the parcel related to this order or order item.",
    )
    orderedItem: Optional[Union[List[Union[OrderItem, Product, Service, str]], OrderItem, Product, Service, str]] = Field(
        default=None,
        description="The item ordered.",
    )
    billingAddress: Optional[Union[List[Union[PostalAddress, str]], PostalAddress, str]] = Field(
        default=None,
        description="The billing address for the order.",
    )
    paymentUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The URL for sending a payment.",
    )
    orderDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Date order was placed.",
    )
    



class ArtGallery(EntertainmentBusiness):
    """An art gallery.

    See: https://schema.org/ArtGallery
    Model depth: 5
    """
    type_: str = Field(default="ArtGallery", alias='@type', const=True)
    



class Nonprofit501c8(USNonprofitType):
    """Nonprofit501c8: Non-profit type referring to Fraternal Beneficiary Societies and"
     "Associations.

    See: https://schema.org/Nonprofit501c8
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c8", alias='@type', const=True)
    



class SteeringPositionValue(QualitativeValue):
    """A value indicating a steering position.

    See: https://schema.org/SteeringPositionValue
    Model depth: 5
    """
    type_: str = Field(default="SteeringPositionValue", alias='@type', const=True)
    



class LeftHandDriving(SteeringPositionValue):
    """The steering position is on the left side of the vehicle (viewed from the main direction"
     "of driving).

    See: https://schema.org/LeftHandDriving
    Model depth: 6
    """
    type_: str = Field(default="LeftHandDriving", alias='@type', const=True)
    



class ComicStory(CreativeWork):
    """The term \"story\" is any indivisible, re-printable unit of a comic, including the interior"
     "stories, covers, and backmatter. Most comics have at least two stories: a cover (ComicCoverArt)"
     "and an interior story.

    See: https://schema.org/ComicStory
    Model depth: 3
    """
    type_: str = Field(default="ComicStory", alias='@type', const=True)
    inker: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who traces over the pencil drawings in ink after pencils are complete.",
    )
    letterer: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds lettering, including speech balloons and sound effects, to"
     "artwork.",
    )
    penciler: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who draws the primary narrative artwork.",
    )
    artist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The primary artist for a work in a medium other than pencils or digital line art--for example,"
     "if the primary artwork is done in watercolors or digital paints.",
    )
    colorist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds color to inked drawings.",
    )
    



class ComicCoverArt(CoverArt, ComicStory):
    """The artwork on the cover of a comic.

    See: https://schema.org/ComicCoverArt
    Model depth: 4
    """
    type_: str = Field(default="ComicCoverArt", alias='@type', const=True)
    



class LikeAction(ReactAction):
    """The act of expressing a positive sentiment about the object. An agent likes an object"
     "(a proposition, topic or theme) with participants.

    See: https://schema.org/LikeAction
    Model depth: 5
    """
    type_: str = Field(default="LikeAction", alias='@type', const=True)
    



class WearableMeasurementCollar(WearableMeasurementTypeEnumeration):
    """Measurement of the collar, for example of a shirt

    See: https://schema.org/WearableMeasurementCollar
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementCollar", alias='@type', const=True)
    



class ItemListUnordered(ItemListOrderType):
    """An ItemList ordered with no explicit order.

    See: https://schema.org/ItemListUnordered
    Model depth: 5
    """
    type_: str = Field(default="ItemListUnordered", alias='@type', const=True)
    



class GameAvailabilityEnumeration(Enumeration):
    """For a [[VideoGame]], such as used with a [[PlayGameAction]], an enumeration of the kind"
     "of game availability offered.

    See: https://schema.org/GameAvailabilityEnumeration
    Model depth: 4
    """
    type_: str = Field(default="GameAvailabilityEnumeration", alias='@type', const=True)
    



class DemoGameAvailability(GameAvailabilityEnumeration):
    """Indicates demo game availability, i.e. a somehow limited demonstration of the full"
     "game.

    See: https://schema.org/DemoGameAvailability
    Model depth: 5
    """
    type_: str = Field(default="DemoGameAvailability", alias='@type', const=True)
    



class Canal(BodyOfWater):
    """A canal, like the Panama Canal.

    See: https://schema.org/Canal
    Model depth: 5
    """
    type_: str = Field(default="Canal", alias='@type', const=True)
    



class SideEffectsHealthAspect(HealthAspectEnumeration):
    """Side effects that can be observed from the usage of the topic.

    See: https://schema.org/SideEffectsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="SideEffectsHealthAspect", alias='@type', const=True)
    



class AudiobookFormat(BookFormatType):
    """Book format: Audiobook. This is an enumerated value for use with the bookFormat property."
     "There is also a type 'Audiobook' in the bib extension which includes Audiobook specific"
     "properties.

    See: https://schema.org/AudiobookFormat
    Model depth: 5
    """
    type_: str = Field(default="AudiobookFormat", alias='@type', const=True)
    



class MathSolver(CreativeWork):
    """A math solver which is capable of solving a subset of mathematical problems.

    See: https://schema.org/MathSolver
    Model depth: 3
    """
    type_: str = Field(default="MathSolver", alias='@type', const=True)
    mathExpression: Optional[Union[List[Union[str, Text, SolveMathAction]], str, Text, SolveMathAction]] = Field(
        default=None,
        description="A mathematical expression (e.g. 'x^2-3x=0') that may be solved for a specific variable,"
     "simplified, or transformed. This can take many formats, e.g. LaTeX, Ascii-Math, or"
     "math as you would write with a keyboard.",
    )
    



class EUEnergyEfficiencyCategoryB(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class B as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryB
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryB", alias='@type', const=True)
    



class PlayAction(Action):
    """The act of playing/exercising/training/performing for enjoyment, leisure, recreation,"
     "competition or exercise. Related actions: * [[ListenAction]]: Unlike ListenAction"
     "(which is under ConsumeAction), PlayAction refers to performing for an audience or"
     "at an event, rather than consuming music. * [[WatchAction]]: Unlike WatchAction (which"
     "is under ConsumeAction), PlayAction refers to showing/displaying for an audience"
     "or at an event, rather than consuming visual content.

    See: https://schema.org/PlayAction
    Model depth: 3
    """
    type_: str = Field(default="PlayAction", alias='@type', const=True)
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    audience: Optional[Union[List[Union[Audience, str]], Audience, str]] = Field(
        default=None,
        description="An intended audience, i.e. a group for whom something was created.",
    )
    



class ExerciseAction(PlayAction):
    """The act of participating in exertive activity for the purposes of improving health and"
     "fitness.

    See: https://schema.org/ExerciseAction
    Model depth: 4
    """
    type_: str = Field(default="ExerciseAction", alias='@type', const=True)
    toLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The final location of the object or the agent after the action.",
    )
    course: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The course where this action was taken.",
    )
    fromLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The original location of the object or the agent before the"
     "action.",
    )
    exerciseRelatedDiet: Optional[Union[List[Union[Diet, str]], Diet, str]] = Field(
        default=None,
        description="A sub property of instrument. The diet used in this action.",
    )
    exerciseCourse: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The course where this action was taken.",
    )
    opponent: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sub property of participant. The opponent on this action.",
    )
    sportsTeam: Optional[Union[List[Union[SportsTeam, str]], SportsTeam, str]] = Field(
        default=None,
        description="A sub property of participant. The sports team that participated on this action.",
    )
    sportsEvent: Optional[Union[List[Union[SportsEvent, str]], SportsEvent, str]] = Field(
        default=None,
        description="A sub property of location. The sports event where this action occurred.",
    )
    diet: Optional[Union[List[Union[Diet, str]], Diet, str]] = Field(
        default=None,
        description="A sub property of instrument. The diet used in this action.",
    )
    exercisePlan: Optional[Union[List[Union[ExercisePlan, str]], ExercisePlan, str]] = Field(
        default=None,
        description="A sub property of instrument. The exercise plan used on this action.",
    )
    exerciseType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Type(s) of exercise or activity, such as strength training, flexibility training,"
     "aerobics, cardiac rehabilitation, etc.",
    )
    distance: Optional[Union[List[Union[Distance, str]], Distance, str]] = Field(
        default=None,
        description="The distance travelled, e.g. exercising or travelling.",
    )
    sportsActivityLocation: Optional[Union[List[Union[SportsActivityLocation, str]], SportsActivityLocation, str]] = Field(
        default=None,
        description="A sub property of location. The sports activity location where this action occurred.",
    )
    



class BioChemEntity(Thing):
    """Any biological, chemical, or biochemical thing. For example: a protein; a gene; a chemical;"
     "a synthetic chemical.

    See: https://schema.org/BioChemEntity
    Model depth: 2
    """
    type_: str = Field(default="BioChemEntity", alias='@type', const=True)
    hasBioChemEntityPart: Optional[Union[List[Union[BioChemEntity, str]], BioChemEntity, str]] = Field(
        default=None,
        description="Indicates a BioChemEntity that (in some sense) has this BioChemEntity as a part.",
    )
    isEncodedByBioChemEntity: Optional[Union[List[Union[Gene, str]], Gene, str]] = Field(
        default=None,
        description="Another BioChemEntity encoding by this one.",
    )
    taxonomicRange: Optional[Union[List[Union[AnyUrl, URL, str, Text, Taxon, DefinedTerm]], AnyUrl, URL, str, Text, Taxon, DefinedTerm]] = Field(
        default=None,
        description="The taxonomic grouping of the organism that expresses, encodes, or in some way related"
     "to the BioChemEntity.",
    )
    isLocatedInSubcellularLocation: Optional[Union[List[Union[AnyUrl, URL, PropertyValue, DefinedTerm, str]], AnyUrl, URL, PropertyValue, DefinedTerm, str]] = Field(
        default=None,
        description="Subcellular location where this BioChemEntity is located; please use PropertyValue"
     "if you want to include any evidence.",
    )
    bioChemInteraction: Optional[Union[List[Union[BioChemEntity, str]], BioChemEntity, str]] = Field(
        default=None,
        description="A BioChemEntity that is known to interact with this item.",
    )
    funding: Optional[Union[List[Union[Grant, str]], Grant, str]] = Field(
        default=None,
        description="A [[Grant]] that directly or indirectly provide funding or sponsorship for this item."
     "See also [[ownershipFundingInfo]].",
    )
    isPartOfBioChemEntity: Optional[Union[List[Union[BioChemEntity, str]], BioChemEntity, str]] = Field(
        default=None,
        description="Indicates a BioChemEntity that is (in some sense) a part of this BioChemEntity.",
    )
    bioChemSimilarity: Optional[Union[List[Union[BioChemEntity, str]], BioChemEntity, str]] = Field(
        default=None,
        description="A similar BioChemEntity, e.g., obtained by fingerprint similarity algorithms.",
    )
    hasRepresentation: Optional[Union[List[Union[AnyUrl, URL, str, Text, PropertyValue]], AnyUrl, URL, str, Text, PropertyValue]] = Field(
        default=None,
        description="A common representation such as a protein sequence or chemical structure for this entity."
     "For images use schema.org/image.",
    )
    biologicalRole: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="A role played by the BioChemEntity within a biological context.",
    )
    isInvolvedInBiologicalProcess: Optional[Union[List[Union[AnyUrl, URL, PropertyValue, DefinedTerm, str]], AnyUrl, URL, PropertyValue, DefinedTerm, str]] = Field(
        default=None,
        description="Biological process this BioChemEntity is involved in; please use PropertyValue if"
     "you want to include any evidence.",
    )
    associatedDisease: Optional[Union[List[Union[AnyUrl, URL, PropertyValue, MedicalCondition, str]], AnyUrl, URL, PropertyValue, MedicalCondition, str]] = Field(
        default=None,
        description="Disease associated to this BioChemEntity. Such disease can be a MedicalCondition or"
     "a URL. If you want to add an evidence supporting the association, please use PropertyValue.",
    )
    hasMolecularFunction: Optional[Union[List[Union[AnyUrl, URL, PropertyValue, DefinedTerm, str]], AnyUrl, URL, PropertyValue, DefinedTerm, str]] = Field(
        default=None,
        description="Molecular function performed by this BioChemEntity; please use PropertyValue if you"
     "want to include any evidence.",
    )
    



class Gene(BioChemEntity):
    """A discrete unit of inheritance which affects one or more biological traits (Source:"
     "[https://en.wikipedia.org/wiki/Gene](https://en.wikipedia.org/wiki/Gene))."
     "Examples include FOXP2 (Forkhead box protein P2), SCARNA21 (small Cajal body-specific"
     "RNA 21), A- (agouti genotype).

    See: https://schema.org/Gene
    Model depth: 3
    """
    type_: str = Field(default="Gene", alias='@type', const=True)
    expressedIn: Optional[Union[List[Union[AnatomicalStructure, AnatomicalSystem, BioChemEntity, DefinedTerm, str]], AnatomicalStructure, AnatomicalSystem, BioChemEntity, DefinedTerm, str]] = Field(
        default=None,
        description="Tissue, organ, biological sample, etc in which activity of this gene has been observed"
     "experimentally. For example brain, digestive system.",
    )
    hasBioPolymerSequence: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A symbolic representation of a BioChemEntity. For example, a nucleotide sequence of"
     "a Gene or an amino acid sequence of a Protein.",
    )
    encodesBioChemEntity: Optional[Union[List[Union[BioChemEntity, str]], BioChemEntity, str]] = Field(
        default=None,
        description="Another BioChemEntity encoded by this one.",
    )
    alternativeOf: Optional[Union[List[Union[Gene, str]], Gene, str]] = Field(
        default=None,
        description="Another gene which is a variation of this one.",
    )
    



class Downpayment(PriceComponentTypeEnumeration):
    """Represents the downpayment (up-front payment) price component of the total price for"
     "an offered product that has additional installment payments.

    See: https://schema.org/Downpayment
    Model depth: 5
    """
    type_: str = Field(default="Downpayment", alias='@type', const=True)
    



class Invoice(Intangible):
    """A statement of the money due for goods or services; a bill.

    See: https://schema.org/Invoice
    Model depth: 3
    """
    type_: str = Field(default="Invoice", alias='@type', const=True)
    confirmationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A number that confirms the given order or payment has been received.",
    )
    broker: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity that arranges for an exchange between a buyer and a seller. In most cases a broker"
     "never acquires or releases ownership of a product or service involved in an exchange."
     "If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms"
     "are preferred.",
    )
    paymentDueDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date that payment is due.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    totalPaymentDue: Optional[Union[List[Union[PriceSpecification, MonetaryAmount, str]], PriceSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="The total amount due.",
    )
    accountId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The identifier for the account the payment will be applied to.",
    )
    customer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Party placing the order or paying the invoice.",
    )
    paymentDue: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date that payment is due.",
    )
    billingPeriod: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The time interval used to compute the invoice.",
    )
    paymentMethodId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An identifier for the method of payment used (e.g. the last 4 digits of the credit card).",
    )
    paymentStatus: Optional[Union[List[Union[str, Text, PaymentStatusType]], str, Text, PaymentStatusType]] = Field(
        default=None,
        description="The status of payment; whether the invoice has been paid or not.",
    )
    paymentMethod: Optional[Union[List[Union[PaymentMethod, str]], PaymentMethod, str]] = Field(
        default=None,
        description="The name of the credit card or other method of payment for the order.",
    )
    scheduledPaymentDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date the invoice is scheduled to be paid.",
    )
    referencesOrder: Optional[Union[List[Union[Order, str]], Order, str]] = Field(
        default=None,
        description="The Order(s) related to this Invoice. One or more Orders may be combined into a single"
     "Invoice.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    minimumPaymentDue: Optional[Union[List[Union[PriceSpecification, MonetaryAmount, str]], PriceSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="The minimum payment required at this time.",
    )
    



class GovernmentOffice(LocalBusiness):
    """A government office&#x2014;for example, an IRS or DMV office.

    See: https://schema.org/GovernmentOffice
    Model depth: 4
    """
    type_: str = Field(default="GovernmentOffice", alias='@type', const=True)
    



class PostOffice(GovernmentOffice):
    """A post office.

    See: https://schema.org/PostOffice
    Model depth: 5
    """
    type_: str = Field(default="PostOffice", alias='@type', const=True)
    



class DigitalDocument(CreativeWork):
    """An electronic file or document.

    See: https://schema.org/DigitalDocument
    Model depth: 3
    """
    type_: str = Field(default="DigitalDocument", alias='@type', const=True)
    hasDigitalDocumentPermission: Optional[Union[List[Union[DigitalDocumentPermission, str]], DigitalDocumentPermission, str]] = Field(
        default=None,
        description="A permission related to the access to this document (e.g. permission to read or write"
     "an electronic document). For a public document, specify a grantee with an Audience with"
     "audienceType equal to \"public\".",
    )
    



class TextDigitalDocument(DigitalDocument):
    """A file composed primarily of text.

    See: https://schema.org/TextDigitalDocument
    Model depth: 4
    """
    type_: str = Field(default="TextDigitalDocument", alias='@type', const=True)
    



class Flight(Trip):
    """An airline flight.

    See: https://schema.org/Flight
    Model depth: 4
    """
    type_: str = Field(default="Flight", alias='@type', const=True)
    seller: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity which offers (sells / leases / lends / loans) the services / goods. A seller may"
     "also be a provider.",
    )
    boardingPolicy: Optional[Union[List[Union[BoardingPolicyType, str]], BoardingPolicyType, str]] = Field(
        default=None,
        description="The type of boarding policy used by the airline (e.g. zone-based or group-based).",
    )
    webCheckinTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The time when a passenger can check into the flight online.",
    )
    arrivalAirport: Optional[Union[List[Union[Airport, str]], Airport, str]] = Field(
        default=None,
        description="The airport where the flight terminates.",
    )
    estimatedFlightDuration: Optional[Union[List[Union[str, Text, Duration]], str, Text, Duration]] = Field(
        default=None,
        description="The estimated time the flight will take.",
    )
    carrier: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.",
    )
    departureAirport: Optional[Union[List[Union[Airport, str]], Airport, str]] = Field(
        default=None,
        description="The airport where the flight originates.",
    )
    mealService: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of the meals that will be provided or available for purchase.",
    )
    flightDistance: Optional[Union[List[Union[str, Text, Distance]], str, Text, Distance]] = Field(
        default=None,
        description="The distance of the flight.",
    )
    departureGate: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifier of the flight's departure gate.",
    )
    departureTerminal: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifier of the flight's departure terminal.",
    )
    arrivalTerminal: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifier of the flight's arrival terminal.",
    )
    flightNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unique identifier for a flight including the airline IATA code. For example, if describing"
     "United flight 110, where the IATA code for United is 'UA', the flightNumber is 'UA110'.",
    )
    arrivalGate: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifier of the flight's arrival gate.",
    )
    aircraft: Optional[Union[List[Union[str, Text, Vehicle]], str, Text, Vehicle]] = Field(
        default=None,
        description="The kind of aircraft (e.g., \"Boeing 747\").",
    )
    



class DecontextualizedContent(MediaManipulationRatingEnumeration):
    """Content coded 'missing context' in a [[MediaReview]], considered in the context of"
     "how it was published or shared. For a [[VideoObject]] to be 'missing context': Presenting"
     "unaltered video in an inaccurate manner that misrepresents the footage. For example,"
     "using incorrect dates or locations, altering the transcript or sharing brief clips"
     "from a longer video to mislead viewers. (A video rated 'original' can also be missing"
     "context.) For an [[ImageObject]] to be 'missing context': Presenting unaltered images"
     "in an inaccurate manner to misrepresent the image and mislead the viewer. For example,"
     "a common tactic is using an unaltered image but saying it came from a different time or"
     "place. (An image rated 'original' can also be missing context.) For an [[ImageObject]]"
     "with embedded text to be 'missing context': An unaltered image presented in an inaccurate"
     "manner to misrepresent the image and mislead the viewer. For example, a common tactic"
     "is using an unaltered image but saying it came from a different time or place. (An 'original'"
     "image with inaccurate text would generally fall in this category.) For an [[AudioObject]]"
     "to be 'missing context': Unaltered audio presented in an inaccurate manner that misrepresents"
     "it. For example, using incorrect dates or locations, or sharing brief clips from a longer"
     "recording to mislead viewers. (Audio rated “original” can also be missing context.)

    See: https://schema.org/DecontextualizedContent
    Model depth: 5
    """
    type_: str = Field(default="DecontextualizedContent", alias='@type', const=True)
    



class BedType(QualitativeValue):
    """A type of bed. This is used for indicating the bed or beds available in an accommodation.

    See: https://schema.org/BedType
    Model depth: 5
    """
    type_: str = Field(default="BedType", alias='@type', const=True)
    



class BlogPosting(SocialMediaPosting):
    """A blog post.

    See: https://schema.org/BlogPosting
    Model depth: 5
    """
    type_: str = Field(default="BlogPosting", alias='@type', const=True)
    



class Distance(Quantity):
    """Properties that take Distances as values are of the form '&lt;Number&gt; &lt;Length"
     "unit of measure&gt;'. E.g., '7 ft'.

    See: https://schema.org/Distance
    Model depth: 4
    """
    type_: str = Field(default="Distance", alias='@type', const=True)
    



class ReservationPending(ReservationStatusType):
    """The status of a reservation when a request has been sent, but not confirmed.

    See: https://schema.org/ReservationPending
    Model depth: 6
    """
    type_: str = Field(default="ReservationPending", alias='@type', const=True)
    



class LodgingReservation(Reservation):
    """A reservation for lodging at a hotel, motel, inn, etc. Note: This type is for information"
     "about actual reservations, e.g. in confirmation emails or HTML pages with individual"
     "confirmations of reservations.

    See: https://schema.org/LodgingReservation
    Model depth: 4
    """
    type_: str = Field(default="LodgingReservation", alias='@type', const=True)
    checkoutTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The latest someone may check out of a lodging establishment.",
    )
    lodgingUnitType: Optional[Union[List[Union[str, Text, QualitativeValue]], str, Text, QualitativeValue]] = Field(
        default=None,
        description="Textual description of the unit type (including suite vs. room, size of bed, etc.).",
    )
    numChildren: Optional[Union[List[Union[int, Integer, QuantitativeValue, str]], int, Integer, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of children staying in the unit.",
    )
    numAdults: Optional[Union[List[Union[int, Integer, QuantitativeValue, str]], int, Integer, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of adults staying in the unit.",
    )
    checkinTime: Optional[Union[List[Union[datetime, DateTime, time, Time, str]], datetime, DateTime, time, Time, str]] = Field(
        default=None,
        description="The earliest someone may check into a lodging establishment.",
    )
    lodgingUnitDescription: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A full description of the lodging unit.",
    )
    



class SearchResultsPage(WebPage):
    """Web page type: Search results page.

    See: https://schema.org/SearchResultsPage
    Model depth: 4
    """
    type_: str = Field(default="SearchResultsPage", alias='@type', const=True)
    



class TennisComplex(SportsActivityLocation):
    """A tennis complex.

    See: https://schema.org/TennisComplex
    Model depth: 5
    """
    type_: str = Field(default="TennisComplex", alias='@type', const=True)
    



class GovernmentBuilding(CivicStructure):
    """A government building.

    See: https://schema.org/GovernmentBuilding
    Model depth: 4
    """
    type_: str = Field(default="GovernmentBuilding", alias='@type', const=True)
    



class Embassy(GovernmentBuilding):
    """An embassy.

    See: https://schema.org/Embassy
    Model depth: 5
    """
    type_: str = Field(default="Embassy", alias='@type', const=True)
    



class DamagedCondition(OfferItemCondition):
    """Indicates that the item is damaged.

    See: https://schema.org/DamagedCondition
    Model depth: 5
    """
    type_: str = Field(default="DamagedCondition", alias='@type', const=True)
    



class LegalValueLevel(Enumeration):
    """A list of possible levels for the legal validity of a legislation.

    See: https://schema.org/LegalValueLevel
    Model depth: 4
    """
    type_: str = Field(default="LegalValueLevel", alias='@type', const=True)
    



class UnofficialLegalValue(LegalValueLevel):
    """Indicates that a document has no particular or special standing (e.g. a republication"
     "of a law by a private publisher).

    See: https://schema.org/UnofficialLegalValue
    Model depth: 5
    """
    type_: str = Field(default="UnofficialLegalValue", alias='@type', const=True)
    



class MedicalGuideline(MedicalEntity):
    """Any recommendation made by a standard society (e.g. ACC/AHA) or consensus statement"
     "that denotes how to diagnose and treat a particular condition. Note: this type should"
     "be used to tag the actual guideline recommendation; if the guideline recommendation"
     "occurs in a larger scholarly article, use MedicalScholarlyArticle to tag the overall"
     "article, not this type. Note also: the organization making the recommendation should"
     "be captured in the recognizingAuthority base property of MedicalEntity.

    See: https://schema.org/MedicalGuideline
    Model depth: 3
    """
    type_: str = Field(default="MedicalGuideline", alias='@type', const=True)
    evidenceLevel: Optional[Union[List[Union[MedicalEvidenceLevel, str]], MedicalEvidenceLevel, str]] = Field(
        default=None,
        description="Strength of evidence of the data used to formulate the guideline (enumerated).",
    )
    guidelineSubject: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="The medical conditions, treatments, etc. that are the subject of the guideline.",
    )
    guidelineDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="Date on which this guideline's recommendation was made.",
    )
    evidenceOrigin: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Source of the data used to formulate the guidance, e.g. RCT, consensus opinion, etc.",
    )
    



class CampingPitch(Accommodation):
    """A [[CampingPitch]] is an individual place for overnight stay in the outdoors, typically"
     "being part of a larger camping site, or [[Campground]]. In British English a campsite,"
     "or campground, is an area, usually divided into a number of pitches, where people can"
     "camp overnight using tents or camper vans or caravans; this British English use of the"
     "word is synonymous with the American English expression campground. In American English"
     "the term campsite generally means an area where an individual, family, group, or military"
     "unit can pitch a tent or park a camper; a campground may contain many campsites. (Source:"
     "Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite).)"
     "See also the dedicated [document on the use of schema.org for marking up hotels and other"
     "forms of accommodations](/docs/hotels.html).

    See: https://schema.org/CampingPitch
    Model depth: 4
    """
    type_: str = Field(default="CampingPitch", alias='@type', const=True)
    



class LoseAction(AchieveAction):
    """The act of being defeated in a competitive activity.

    See: https://schema.org/LoseAction
    Model depth: 4
    """
    type_: str = Field(default="LoseAction", alias='@type', const=True)
    winner: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sub property of participant. The winner of the action.",
    )
    



class WearableSizeGroupTall(WearableSizeGroupEnumeration):
    """Size group \"Tall\" for wearables.

    See: https://schema.org/WearableSizeGroupTall
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupTall", alias='@type', const=True)
    



class KosherDiet(RestrictedDiet):
    """A diet conforming to Jewish dietary practices.

    See: https://schema.org/KosherDiet
    Model depth: 5
    """
    type_: str = Field(default="KosherDiet", alias='@type', const=True)
    



class FDAcategoryB(DrugPregnancyCategory):
    """A designation by the US FDA signifying that animal reproduction studies have failed"
     "to demonstrate a risk to the fetus and there are no adequate and well-controlled studies"
     "in pregnant women.

    See: https://schema.org/FDAcategoryB
    Model depth: 6
    """
    type_: str = Field(default="FDAcategoryB", alias='@type', const=True)
    



class WearableSizeGroupJuniors(WearableSizeGroupEnumeration):
    """Size group \"Juniors\" for wearables.

    See: https://schema.org/WearableSizeGroupJuniors
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupJuniors", alias='@type', const=True)
    



class ElementarySchool(EducationalOrganization):
    """An elementary school.

    See: https://schema.org/ElementarySchool
    Model depth: 4
    """
    type_: str = Field(default="ElementarySchool", alias='@type', const=True)
    



class Message(CreativeWork):
    """A single message from a sender to one or more organizations or people.

    See: https://schema.org/Message
    Model depth: 3
    """
    type_: str = Field(default="Message", alias='@type', const=True)
    dateReceived: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date/time the message was received if a single recipient exists.",
    )
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    messageAttachment: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="A CreativeWork attached to the message.",
    )
    ccRecipient: Optional[Union[List[Union[ContactPoint, Organization, Person, str]], ContactPoint, Organization, Person, str]] = Field(
        default=None,
        description="A sub property of recipient. The recipient copied on a message.",
    )
    bccRecipient: Optional[Union[List[Union[ContactPoint, Organization, Person, str]], ContactPoint, Organization, Person, str]] = Field(
        default=None,
        description="A sub property of recipient. The recipient blind copied on a message.",
    )
    dateRead: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date/time at which the message has been read by the recipient if a single recipient"
     "exists.",
    )
    dateSent: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date/time at which the message was sent.",
    )
    sender: Optional[Union[List[Union[Organization, Audience, Person, str]], Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the sending end of the action.",
    )
    toRecipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of recipient. The recipient who was directly sent the message.",
    )
    



class EmailMessage(Message):
    """An email message.

    See: https://schema.org/EmailMessage
    Model depth: 4
    """
    type_: str = Field(default="EmailMessage", alias='@type', const=True)
    



class SaleEvent(Event):
    """Event type: Sales event.

    See: https://schema.org/SaleEvent
    Model depth: 3
    """
    type_: str = Field(default="SaleEvent", alias='@type', const=True)
    



class MediaReviewItem(CreativeWork):
    """Represents an item or group of closely related items treated as a unit for the sake of evaluation"
     "in a [[MediaReview]]. Authorship etc. apply to the items rather than to the curation/grouping"
     "or reviewing party.

    See: https://schema.org/MediaReviewItem
    Model depth: 3
    """
    type_: str = Field(default="MediaReviewItem", alias='@type', const=True)
    mediaItemAppearance: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="In the context of a [[MediaReview]], indicates specific media item(s) that are grouped"
     "using a [[MediaReviewItem]].",
    )
    



class ImageObject(MediaObject):
    """An image file.

    See: https://schema.org/ImageObject
    Model depth: 4
    """
    type_: str = Field(default="ImageObject", alias='@type', const=True)
    caption: Optional[Union[List[Union[str, Text, MediaObject]], str, Text, MediaObject]] = Field(
        default=None,
        description="The caption for this object. For downloadable machine formats (closed caption, subtitles"
     "etc.) use MediaObject and indicate the [[encodingFormat]].",
    )
    thumbnail: Optional[Union[List[Union[ImageObject, str]], ImageObject, str]] = Field(
        default=None,
        description="Thumbnail image for an image or video.",
    )
    exifData: Optional[Union[List[Union[str, Text, PropertyValue]], str, Text, PropertyValue]] = Field(
        default=None,
        description="exif data for this object.",
    )
    embeddedTextCaption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Represents textual captioning from a [[MediaObject]], e.g. text of a 'meme'.",
    )
    representativeOfPage: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether this image is representative of the content of the page.",
    )
    



class ImageObjectSnapshot(ImageObject):
    """A specific and exact (byte-for-byte) version of an [[ImageObject]]. Two byte-for-byte"
     "identical files, for the purposes of this type, considered identical. If they have different"
     "embedded metadata (e.g. XMP, EXIF) the files will differ. Different external facts"
     "about the files, e.g. creator or dateCreated that aren't represented in their actual"
     "content, do not affect this notion of identity.

    See: https://schema.org/ImageObjectSnapshot
    Model depth: 5
    """
    type_: str = Field(default="ImageObjectSnapshot", alias='@type', const=True)
    



class Pharmacy(MedicalBusiness, MedicalOrganization):
    """A pharmacy or drugstore.

    See: https://schema.org/Pharmacy
    Model depth: 4
    """
    type_: str = Field(default="Pharmacy", alias='@type', const=True)
    



class ContactPoint(StructuredValue):
    """A contact point&#x2014;for example, a Customer Complaints department.

    See: https://schema.org/ContactPoint
    Model depth: 4
    """
    type_: str = Field(default="ContactPoint", alias='@type', const=True)
    serviceArea: Optional[Union[List[Union[GeoShape, Place, AdministrativeArea, str]], GeoShape, Place, AdministrativeArea, str]] = Field(
        default=None,
        description="The geographic area where the service is provided.",
    )
    availableLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="A language someone may use with or at the item, service or place. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[inLanguage]].",
    )
    productSupported: Optional[Union[List[Union[str, Text, Product]], str, Text, Product]] = Field(
        default=None,
        description="The product or service this support contact point is related to (such as product support"
     "for a particular product line). This can be a specific product or product line (e.g. \"iPhone\")"
     "or a general category of products or services (e.g. \"smartphones\").",
    )
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    contactOption: Optional[Union[List[Union[ContactPointOption, str]], ContactPointOption, str]] = Field(
        default=None,
        description="An option available on this contact point (e.g. a toll-free number or support for hearing-impaired"
     "callers).",
    )
    email: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Email address.",
    )
    contactType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A person or organization can have different contact points, for different purposes."
     "For example, a sales contact point, a PR contact point and so on. This property is used"
     "to specify the kind of contact point.",
    )
    hoursAvailable: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="The hours during which this service or contact is available.",
    )
    faxNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The fax number.",
    )
    telephone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The telephone number.",
    )
    



class PublicHolidays(DayOfWeek):
    """This stands for any day that is a public holiday; it is a placeholder for all official public"
     "holidays in some particular location. While not technically a \"day of the week\", it"
     "can be used with [[OpeningHoursSpecification]]. In the context of an opening hours"
     "specification it can be used to indicate opening hours on public holidays, overriding"
     "general opening hours for the day of the week on which a public holiday occurs.

    See: https://schema.org/PublicHolidays
    Model depth: 5
    """
    type_: str = Field(default="PublicHolidays", alias='@type', const=True)
    



class BusTrip(Trip):
    """A trip on a commercial bus line.

    See: https://schema.org/BusTrip
    Model depth: 4
    """
    type_: str = Field(default="BusTrip", alias='@type', const=True)
    busName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of the bus (e.g. Bolt Express).",
    )
    busNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unique identifier for the bus.",
    )
    departureBusStop: Optional[Union[List[Union[BusStation, BusStop, str]], BusStation, BusStop, str]] = Field(
        default=None,
        description="The stop or station from which the bus departs.",
    )
    arrivalBusStop: Optional[Union[List[Union[BusStation, BusStop, str]], BusStation, BusStop, str]] = Field(
        default=None,
        description="The stop or station from which the bus arrives.",
    )
    



class Physician(MedicalBusiness, MedicalOrganization):
    """A doctor's office.

    See: https://schema.org/Physician
    Model depth: 4
    """
    type_: str = Field(default="Physician", alias='@type', const=True)
    hospitalAffiliation: Optional[Union[List[Union[Hospital, str]], Hospital, str]] = Field(
        default=None,
        description="A hospital with which the physician or office is affiliated.",
    )
    medicalSpecialty: Optional[Union[List[Union[MedicalSpecialty, str]], MedicalSpecialty, str]] = Field(
        default=None,
        description="A medical specialty of the provider.",
    )
    availableService: Optional[Union[List[Union[MedicalTest, MedicalTherapy, MedicalProcedure, str]], MedicalTest, MedicalTherapy, MedicalProcedure, str]] = Field(
        default=None,
        description="A medical service available from this provider.",
    )
    



class EventStatusType(StatusEnumeration):
    """EventStatusType is an enumeration type whose instances represent several states that"
     "an Event may be in.

    See: https://schema.org/EventStatusType
    Model depth: 5
    """
    type_: str = Field(default="EventStatusType", alias='@type', const=True)
    



class EventCancelled(EventStatusType):
    """The event has been cancelled. If the event has multiple startDate values, all are assumed"
     "to be cancelled. Either startDate or previousStartDate may be used to specify the event's"
     "cancelled date(s).

    See: https://schema.org/EventCancelled
    Model depth: 6
    """
    type_: str = Field(default="EventCancelled", alias='@type', const=True)
    



class ResultsNotAvailable(MedicalStudyStatus):
    """Results are not available.

    See: https://schema.org/ResultsNotAvailable
    Model depth: 6
    """
    type_: str = Field(default="ResultsNotAvailable", alias='@type', const=True)
    



class Campground(LodgingBusiness, CivicStructure):
    """A camping site, campsite, or [[Campground]] is a place used for overnight stay in the"
     "outdoors, typically containing individual [[CampingPitch]] locations. In British"
     "English a campsite is an area, usually divided into a number of pitches, where people"
     "can camp overnight using tents or camper vans or caravans; this British English use of"
     "the word is synonymous with the American English expression campground. In American"
     "English the term campsite generally means an area where an individual, family, group,"
     "or military unit can pitch a tent or park a camper; a campground may contain many campsites"
     "(source: Wikipedia, see [https://en.wikipedia.org/wiki/Campsite](https://en.wikipedia.org/wiki/Campsite))."
     "See also the dedicated [document on the use of schema.org for marking up hotels and other"
     "forms of accommodations](/docs/hotels.html).

    See: https://schema.org/Campground
    Model depth: 4
    """
    type_: str = Field(default="Campground", alias='@type', const=True)
    



class Joint(AnatomicalStructure):
    """The anatomical location at which two or more bones make contact.

    See: https://schema.org/Joint
    Model depth: 4
    """
    type_: str = Field(default="Joint", alias='@type', const=True)
    structuralClass: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name given to how bone physically connects to each other.",
    )
    functionalClass: Optional[Union[List[Union[str, Text, MedicalEntity]], str, Text, MedicalEntity]] = Field(
        default=None,
        description="The degree of mobility the joint allows.",
    )
    biomechnicalClass: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The biomechanical properties of the bone.",
    )
    



class MerchantReturnPolicy(Intangible):
    """A MerchantReturnPolicy provides information about product return policies associated"
     "with an [[Organization]], [[Product]], or [[Offer]].

    See: https://schema.org/MerchantReturnPolicy
    Model depth: 3
    """
    type_: str = Field(default="MerchantReturnPolicy", alias='@type', const=True)
    refundType: Optional[Union[List[Union[RefundTypeEnumeration, str]], RefundTypeEnumeration, str]] = Field(
        default=None,
        description="A refund type, from an enumerated list.",
    )
    customerRemorseReturnFees: Optional[Union[List[Union[ReturnFeesEnumeration, str]], ReturnFeesEnumeration, str]] = Field(
        default=None,
        description="The type of return fees if the product is returned due to customer remorse.",
    )
    additionalProperty: Optional[Union[List[Union[PropertyValue, str]], PropertyValue, str]] = Field(
        default=None,
        description="A property-value pair representing an additional characteristic of the entity, e.g."
     "a product feature or another characteristic for which there is no matching property"
     "in schema.org. Note: Publishers should be aware that applications designed to use specific"
     "schema.org properties (e.g. https://schema.org/width, https://schema.org/color,"
     "https://schema.org/gtin13, ...) will typically expect such data to be provided using"
     "those properties, rather than using the generic property/value mechanism.",
    )
    itemDefectReturnLabelSource: Optional[Union[List[Union[ReturnLabelSourceEnumeration, str]], ReturnLabelSourceEnumeration, str]] = Field(
        default=None,
        description="The method (from an enumeration) by which the customer obtains a return shipping label"
     "for a defect product.",
    )
    inStoreReturnsOffered: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Are in-store returns offered? (For more advanced return methods use the [[returnMethod]]"
     "property.)",
    )
    itemCondition: Optional[Union[List[Union[OfferItemCondition, str]], OfferItemCondition, str]] = Field(
        default=None,
        description="A predefined value from OfferItemCondition specifying the condition of the product"
     "or service, or the products or services included in the offer. Also used for product return"
     "policies to specify the condition of products accepted for returns.",
    )
    restockingFee: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="Use [[MonetaryAmount]] to specify a fixed restocking fee for product returns, or use"
     "[[Number]] to specify a percentage of the product price paid by the customer.",
    )
    returnPolicyCategory: Optional[Union[List[Union[MerchantReturnEnumeration, str]], MerchantReturnEnumeration, str]] = Field(
        default=None,
        description="Specifies an applicable return policy (from an enumeration).",
    )
    returnLabelSource: Optional[Union[List[Union[ReturnLabelSourceEnumeration, str]], ReturnLabelSourceEnumeration, str]] = Field(
        default=None,
        description="The method (from an enumeration) by which the customer obtains a return shipping label"
     "for a product returned for any reason.",
    )
    applicableCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="A country where a particular merchant return policy applies to, for example the two-letter"
     "ISO 3166-1 alpha-2 country code.",
    )
    returnMethod: Optional[Union[List[Union[ReturnMethodEnumeration, str]], ReturnMethodEnumeration, str]] = Field(
        default=None,
        description="The type of return method offered, specified from an enumeration.",
    )
    returnShippingFeesAmount: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="Amount of shipping costs for product returns (for any reason). Applicable when property"
     "[[returnFees]] equals [[ReturnShippingFees]].",
    )
    itemDefectReturnShippingFeesAmount: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="Amount of shipping costs for defect product returns. Applicable when property [[itemDefectReturnFees]]"
     "equals [[ReturnShippingFees]].",
    )
    returnPolicySeasonalOverride: Optional[Union[List[Union[MerchantReturnPolicySeasonalOverride, str]], MerchantReturnPolicySeasonalOverride, str]] = Field(
        default=None,
        description="Seasonal override of a return policy.",
    )
    customerRemorseReturnShippingFeesAmount: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of shipping costs if a product is returned due to customer remorse. Applicable"
     "when property [[customerRemorseReturnFees]] equals [[ReturnShippingFees]].",
    )
    returnFees: Optional[Union[List[Union[ReturnFeesEnumeration, str]], ReturnFeesEnumeration, str]] = Field(
        default=None,
        description="The type of return fees for purchased products (for any return reason).",
    )
    customerRemorseReturnLabelSource: Optional[Union[List[Union[ReturnLabelSourceEnumeration, str]], ReturnLabelSourceEnumeration, str]] = Field(
        default=None,
        description="The method (from an enumeration) by which the customer obtains a return shipping label"
     "for a product returned due to customer remorse.",
    )
    merchantReturnLink: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Specifies a Web page or service by URL, for product returns.",
    )
    itemDefectReturnFees: Optional[Union[List[Union[ReturnFeesEnumeration, str]], ReturnFeesEnumeration, str]] = Field(
        default=None,
        description="The type of return fees for returns of defect products.",
    )
    merchantReturnDays: Optional[Union[List[Union[int, Integer, datetime, DateTime, date, Date, str]], int, Integer, datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Specifies either a fixed return date or the number of days (from the delivery date) that"
     "a product can be returned. Used when the [[returnPolicyCategory]] property is specified"
     "as [[MerchantReturnFiniteReturnWindow]].",
    )
    returnPolicyCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="The country where the product has to be sent to for returns, for example \"Ireland\" using"
     "the [[name]] property of [[Country]]. You can also provide the two-letter [ISO 3166-1"
     "alpha-2 country code](http://en.wikipedia.org/wiki/ISO_3166-1). Note that this"
     "can be different from the country where the product was originally shipped from or sent"
     "to.",
    )
    



class CompleteDataFeed(DataFeed):
    """A [[CompleteDataFeed]] is a [[DataFeed]] whose standard representation includes"
     "content for every item currently in the feed. This is the equivalent of Atom's element"
     "as defined in Feed Paging and Archiving [RFC 5005](https://tools.ietf.org/html/rfc5005),"
     "for example (and as defined for Atom), when using data from a feed that represents a collection"
     "of items that varies over time (e.g. \"Top Twenty Records\") there is no need to have newer"
     "entries mixed in alongside older, obsolete entries. By marking this feed as a CompleteDataFeed,"
     "old entries can be safely discarded when the feed is refreshed, since we can assume the"
     "feed has provided descriptions for all current items.

    See: https://schema.org/CompleteDataFeed
    Model depth: 5
    """
    type_: str = Field(default="CompleteDataFeed", alias='@type', const=True)
    



class PrimaryCare(MedicalSpecialty, MedicalBusiness):
    """The medical care by a physician, or other health-care professional, who is the patient's"
     "first contact with the health-care system and who may recommend a specialist if necessary.

    See: https://schema.org/PrimaryCare
    Model depth: 5
    """
    type_: str = Field(default="PrimaryCare", alias='@type', const=True)
    



class City(AdministrativeArea):
    """A city or town.

    See: https://schema.org/City
    Model depth: 4
    """
    type_: str = Field(default="City", alias='@type', const=True)
    



class HealthPlanCostSharingSpecification(Intangible):
    """A description of costs to the patient under a given network or formulary.

    See: https://schema.org/HealthPlanCostSharingSpecification
    Model depth: 3
    """
    type_: str = Field(default="HealthPlanCostSharingSpecification", alias='@type', const=True)
    healthPlanCoinsuranceRate: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The rate of coinsurance expressed as a number between 0.0 and 1.0.",
    )
    healthPlanCopayOption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Whether the copay is before or after deductible, etc. TODO: Is this a closed set?",
    )
    healthPlanPharmacyCategory: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The category or type of pharmacy associated with this cost sharing.",
    )
    healthPlanCopay: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="The copay amount.",
    )
    healthPlanCoinsuranceOption: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Whether the coinsurance applies before or after deductible, etc. TODO: Is this a closed"
     "set?",
    )
    



class MedicalStudy(MedicalEntity):
    """A medical study is an umbrella type covering all kinds of research studies relating to"
     "human medicine or health, including observational studies and interventional trials"
     "and registries, randomized, controlled or not. When the specific type of study is known,"
     "use one of the extensions of this type, such as MedicalTrial or MedicalObservationalStudy."
     "Also, note that this type should be used to mark up data that describes the study itself;"
     "to tag an article that publishes the results of a study, use MedicalScholarlyArticle."
     "Note: use the code property of MedicalEntity to store study IDs, e.g. clinicaltrials.gov"
     "ID.

    See: https://schema.org/MedicalStudy
    Model depth: 3
    """
    type_: str = Field(default="MedicalStudy", alias='@type', const=True)
    studySubject: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="A subject of the study, i.e. one of the medical conditions, therapies, devices, drugs,"
     "etc. investigated by the study.",
    )
    studyLocation: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The location in which the study is taking/took place.",
    )
    healthCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="Specifying the health condition(s) of a patient, medical study, or other target audience.",
    )
    status: Optional[Union[List[Union[str, Text, EventStatusType, MedicalStudyStatus]], str, Text, EventStatusType, MedicalStudyStatus]] = Field(
        default=None,
        description="The status of the study (enumerated).",
    )
    sponsor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A person or organization that supports a thing through a pledge, promise, or financial"
     "contribution. E.g. a sponsor of a Medical Study or a corporate sponsor of an event.",
    )
    



class MedicalObservationalStudy(MedicalStudy):
    """An observational study is a type of medical study that attempts to infer the possible"
     "effect of a treatment through observation of a cohort of subjects over a period of time."
     "In an observational study, the assignment of subjects into treatment groups versus"
     "control groups is outside the control of the investigator. This is in contrast with controlled"
     "studies, such as the randomized controlled trials represented by MedicalTrial, where"
     "each subject is randomly assigned to a treatment group or a control group before the start"
     "of the treatment.

    See: https://schema.org/MedicalObservationalStudy
    Model depth: 4
    """
    type_: str = Field(default="MedicalObservationalStudy", alias='@type', const=True)
    studyDesign: Optional[Union[List[Union[MedicalObservationalStudyDesign, str]], MedicalObservationalStudyDesign, str]] = Field(
        default=None,
        description="Specifics about the observational study design (enumerated).",
    )
    



class LockerDelivery(DeliveryMethod):
    """A DeliveryMethod in which an item is made available via locker.

    See: https://schema.org/LockerDelivery
    Model depth: 5
    """
    type_: str = Field(default="LockerDelivery", alias='@type', const=True)
    



class ItemListOrderAscending(ItemListOrderType):
    """An ItemList ordered with lower values listed first.

    See: https://schema.org/ItemListOrderAscending
    Model depth: 5
    """
    type_: str = Field(default="ItemListOrderAscending", alias='@type', const=True)
    



class AudioObjectSnapshot(AudioObject):
    """A specific and exact (byte-for-byte) version of an [[AudioObject]]. Two byte-for-byte"
     "identical files, for the purposes of this type, considered identical. If they have different"
     "embedded metadata the files will differ. Different external facts about the files,"
     "e.g. creator or dateCreated that aren't represented in their actual content, do not"
     "affect this notion of identity.

    See: https://schema.org/AudioObjectSnapshot
    Model depth: 5
    """
    type_: str = Field(default="AudioObjectSnapshot", alias='@type', const=True)
    



class Statement(CreativeWork):
    """A statement about something, for example a fun or interesting fact. If known, the main"
     "entity this statement is about can be indicated using mainEntity. For more formal claims"
     "(e.g. in Fact Checking), consider using [[Claim]] instead. Use the [[text]] property"
     "to capture the text of the statement.

    See: https://schema.org/Statement
    Model depth: 3
    """
    type_: str = Field(default="Statement", alias='@type', const=True)
    



class WearableMeasurementWaist(WearableMeasurementTypeEnumeration):
    """Measurement of the waist section, for example of pants

    See: https://schema.org/WearableMeasurementWaist
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementWaist", alias='@type', const=True)
    



class WearableMeasurementBack(WearableMeasurementTypeEnumeration):
    """Measurement of the back section, for example of a jacket

    See: https://schema.org/WearableMeasurementBack
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementBack", alias='@type', const=True)
    



class AnaerobicActivity(PhysicalActivityCategory):
    """Physical activity that is of high-intensity which utilizes the anaerobic metabolism"
     "of the body.

    See: https://schema.org/AnaerobicActivity
    Model depth: 5
    """
    type_: str = Field(default="AnaerobicActivity", alias='@type', const=True)
    



class ReducedRelevanceForChildrenConsideration(AdultOrientedEnumeration):
    """A general code for cases where relevance to children is reduced, e.g. adult education,"
     "mortgages, retirement-related products, etc.

    See: https://schema.org/ReducedRelevanceForChildrenConsideration
    Model depth: 5
    """
    type_: str = Field(default="ReducedRelevanceForChildrenConsideration", alias='@type', const=True)
    



class ResearchOrganization(Organization):
    """A Research Organization (e.g. scientific institute, research company).

    See: https://schema.org/ResearchOrganization
    Model depth: 3
    """
    type_: str = Field(default="ResearchOrganization", alias='@type', const=True)
    



class Eye(PhysicalExam):
    """Eye or ophthalmological function assessment with clinical examination.

    See: https://schema.org/Eye
    Model depth: 5
    """
    type_: str = Field(default="Eye", alias='@type', const=True)
    



class QAPage(WebPage):
    """A QAPage is a WebPage focussed on a specific Question and its Answer(s), e.g. in a question"
     "answering site or documenting Frequently Asked Questions (FAQs).

    See: https://schema.org/QAPage
    Model depth: 4
    """
    type_: str = Field(default="QAPage", alias='@type', const=True)
    



class Playground(CivicStructure):
    """A playground.

    See: https://schema.org/Playground
    Model depth: 4
    """
    type_: str = Field(default="Playground", alias='@type', const=True)
    



class ChemicalSubstance(BioChemEntity):
    """A chemical substance is 'a portion of matter of constant composition, composed of molecular"
     "entities of the same type or of different types' (source: [ChEBI:59999](https://www.ebi.ac.uk/chebi/searchId.do?chebiId=59999)).

    See: https://schema.org/ChemicalSubstance
    Model depth: 3
    """
    type_: str = Field(default="ChemicalSubstance", alias='@type', const=True)
    chemicalRole: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="A role played by the BioChemEntity within a chemical context.",
    )
    potentialUse: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="Intended use of the BioChemEntity by humans.",
    )
    chemicalComposition: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The chemical composition describes the identity and relative ratio of the chemical"
     "elements that make up the substance.",
    )
    



class WearableSizeGroupRegular(WearableSizeGroupEnumeration):
    """Size group \"Regular\" for wearables.

    See: https://schema.org/WearableSizeGroupRegular
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupRegular", alias='@type', const=True)
    



class SubwayStation(CivicStructure):
    """A subway station.

    See: https://schema.org/SubwayStation
    Model depth: 4
    """
    type_: str = Field(default="SubwayStation", alias='@type', const=True)
    



class SomeProducts(Product):
    """A placeholder for multiple similar products of the same kind.

    See: https://schema.org/SomeProducts
    Model depth: 3
    """
    type_: str = Field(default="SomeProducts", alias='@type', const=True)
    inventoryLevel: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The current approximate inventory level for the item or items.",
    )
    



class MonetaryAmount(StructuredValue):
    """A monetary value or range. This type can be used to describe an amount of money such as $50"
     "USD, or a range as in describing a bank account being suitable for a balance between £1,000"
     "and £1,000,000 GBP, or the value of a salary, etc. It is recommended to use [[PriceSpecification]]"
     "Types to describe the price of an Offer, Invoice, etc.

    See: https://schema.org/MonetaryAmount
    Model depth: 4
    """
    type_: str = Field(default="MonetaryAmount", alias='@type', const=True)
    value: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]], StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]] = Field(
        default=None,
        description="The value of the quantitative value or property value node. * For [[QuantitativeValue]]"
     "and [[MonetaryAmount]], the recommended type for values is 'Number'. * For [[PropertyValue]],"
     "it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'. * Use values from 0123456789"
     "(Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to"
     "indicate a decimal point. Avoid using these symbols as a readability separator.",
    )
    currency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217"
     "currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. \"USD\"; [Ticker"
     "symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,"
     "e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    maxValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The upper value of some characteristic or property.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    minValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The lower value of some characteristic or property.",
    )
    



class AddAction(UpdateAction):
    """The act of editing by adding an object to a collection.

    See: https://schema.org/AddAction
    Model depth: 4
    """
    type_: str = Field(default="AddAction", alias='@type', const=True)
    



class InsertAction(AddAction):
    """The act of adding at a specific location in an ordered collection.

    See: https://schema.org/InsertAction
    Model depth: 5
    """
    type_: str = Field(default="InsertAction", alias='@type', const=True)
    toLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A sub property of location. The final location of the object or the agent after the action.",
    )
    



class ProductGroup(Product):
    """A ProductGroup represents a group of [[Product]]s that vary only in certain well-described"
     "ways, such as by [[size]], [[color]], [[material]] etc. While a ProductGroup itself"
     "is not directly offered for sale, the various varying products that it represents can"
     "be. The ProductGroup serves as a prototype or template, standing in for all of the products"
     "who have an [[isVariantOf]] relationship to it. As such, properties (including additional"
     "types) can be applied to the ProductGroup to represent characteristics shared by each"
     "of the (possibly very many) variants. Properties that reference a ProductGroup are"
     "not included in this mechanism; neither are the following specific properties [[variesBy]],"
     "[[hasVariant]], [[url]].

    See: https://schema.org/ProductGroup
    Model depth: 3
    """
    type_: str = Field(default="ProductGroup", alias='@type', const=True)
    variesBy: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="Indicates the property or properties by which the variants in a [[ProductGroup]] vary,"
     "e.g. their size, color etc. Schema.org properties can be referenced by their short name"
     "e.g. \"color\"; terms defined elsewhere can be referenced with their URIs.",
    )
    hasVariant: Optional[Union[List[Union[Product, str]], Product, str]] = Field(
        default=None,
        description="Indicates a [[Product]] that is a member of this [[ProductGroup]] (or [[ProductModel]]).",
    )
    productGroupID: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates a textual identifier for a ProductGroup.",
    )
    



class LivingWithHealthAspect(HealthAspectEnumeration):
    """Information about coping or life related to the topic.

    See: https://schema.org/LivingWithHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="LivingWithHealthAspect", alias='@type', const=True)
    



class RecommendedDoseSchedule(DoseSchedule):
    """A recommended dosing schedule for a drug or supplement as prescribed or recommended"
     "by an authority or by the drug/supplement's manufacturer. Capture the recommending"
     "authority in the recognizingAuthority property of MedicalEntity.

    See: https://schema.org/RecommendedDoseSchedule
    Model depth: 5
    """
    type_: str = Field(default="RecommendedDoseSchedule", alias='@type', const=True)
    



class ActionAccessSpecification(Intangible):
    """A set of requirements that must be fulfilled in order to perform an Action.

    See: https://schema.org/ActionAccessSpecification
    Model depth: 3
    """
    type_: str = Field(default="ActionAccessSpecification", alias='@type', const=True)
    availabilityEnds: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The end of the availability of the product or service included in the offer.",
    )
    expectsAcceptanceOf: Optional[Union[List[Union[Offer, str]], Offer, str]] = Field(
        default=None,
        description="An Offer which must be accepted before the user can perform the Action. For example, the"
     "user may need to buy a movie before being able to watch it.",
    )
    availabilityStarts: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The beginning of the availability of the product or service included in the offer.",
    )
    requiresSubscription: Optional[Union[List[Union[StrictBool, Boolean, MediaSubscription, str]], StrictBool, Boolean, MediaSubscription, str]] = Field(
        default=None,
        description="Indicates if use of the media require a subscription (either paid or free). Allowed values"
     "are ```true``` or ```false``` (note that an earlier version had 'yes', 'no').",
    )
    eligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "valid. See also [[ineligibleRegion]].",
    )
    ineligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "not valid, e.g. a region where the transaction is not allowed. See also [[eligibleRegion]].",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    



class Beach(CivicStructure):
    """Beach.

    See: https://schema.org/Beach
    Model depth: 4
    """
    type_: str = Field(default="Beach", alias='@type', const=True)
    



class OccupationalActivity(PhysicalActivityCategory):
    """Any physical activity engaged in for job-related purposes. Examples may include waiting"
     "tables, maid service, carrying a mailbag, picking fruits or vegetables, construction"
     "work, etc.

    See: https://schema.org/OccupationalActivity
    Model depth: 5
    """
    type_: str = Field(default="OccupationalActivity", alias='@type', const=True)
    



class FDAcategoryD(DrugPregnancyCategory):
    """A designation by the US FDA signifying that there is positive evidence of human fetal"
     "risk based on adverse reaction data from investigational or marketing experience or"
     "studies in humans, but potential benefits may warrant use of the drug in pregnant women"
     "despite potential risks.

    See: https://schema.org/FDAcategoryD
    Model depth: 6
    """
    type_: str = Field(default="FDAcategoryD", alias='@type', const=True)
    



class Podiatric(MedicalSpecialty, MedicalBusiness):
    """Podiatry is the care of the human foot, especially the diagnosis and treatment of foot"
     "disorders.

    See: https://schema.org/Podiatric
    Model depth: 5
    """
    type_: str = Field(default="Podiatric", alias='@type', const=True)
    



class MedicalScholarlyArticle(ScholarlyArticle):
    """A scholarly article in the medical domain.

    See: https://schema.org/MedicalScholarlyArticle
    Model depth: 5
    """
    type_: str = Field(default="MedicalScholarlyArticle", alias='@type', const=True)
    publicationType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of the medical article, taken from the US NLM MeSH publication type catalog."
     "See also [MeSH documentation](http://www.nlm.nih.gov/mesh/pubtypes.html).",
    )
    



class OfferForLease(Offer):
    """An [[OfferForLease]] in Schema.org represents an [[Offer]] to lease out something,"
     "i.e. an [[Offer]] whose [[businessFunction]] is [lease out](http://purl.org/goodrelations/v1#LeaseOut.)."
     "See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for background"
     "on the underlying concepts.

    See: https://schema.org/OfferForLease
    Model depth: 4
    """
    type_: str = Field(default="OfferForLease", alias='@type', const=True)
    



class Church(PlaceOfWorship):
    """A church.

    See: https://schema.org/Church
    Model depth: 5
    """
    type_: str = Field(default="Church", alias='@type', const=True)
    



class CatholicChurch(Church):
    """A Catholic church.

    See: https://schema.org/CatholicChurch
    Model depth: 6
    """
    type_: str = Field(default="CatholicChurch", alias='@type', const=True)
    



class ReservationHold(ReservationStatusType):
    """The status of a reservation on hold pending an update like credit card number or flight"
     "changes.

    See: https://schema.org/ReservationHold
    Model depth: 6
    """
    type_: str = Field(default="ReservationHold", alias='@type', const=True)
    



class Nonprofit501c6(USNonprofitType):
    """Nonprofit501c6: Non-profit type referring to Business Leagues, Chambers of Commerce,"
     "Real Estate Boards.

    See: https://schema.org/Nonprofit501c6
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c6", alias='@type', const=True)
    



class Midwifery(MedicalSpecialty, MedicalBusiness):
    """A nurse-like health profession that deals with pregnancy, childbirth, and the postpartum"
     "period (including care of the newborn), besides sexual and reproductive health of women"
     "throughout their lives.

    See: https://schema.org/Midwifery
    Model depth: 5
    """
    type_: str = Field(default="Midwifery", alias='@type', const=True)
    



class LiveAlbum(MusicAlbumProductionType):
    """LiveAlbum.

    See: https://schema.org/LiveAlbum
    Model depth: 5
    """
    type_: str = Field(default="LiveAlbum", alias='@type', const=True)
    



class ExhibitionEvent(Event):
    """Event type: Exhibition event, e.g. at a museum, library, archive, tradeshow, ...

    See: https://schema.org/ExhibitionEvent
    Model depth: 3
    """
    type_: str = Field(default="ExhibitionEvent", alias='@type', const=True)
    



class FullGameAvailability(GameAvailabilityEnumeration):
    """Indicates full game availability.

    See: https://schema.org/FullGameAvailability
    Model depth: 5
    """
    type_: str = Field(default="FullGameAvailability", alias='@type', const=True)
    



class ResumeAction(ControlAction):
    """The act of resuming a device or application which was formerly paused (e.g. resume music"
     "playback or resume a timer).

    See: https://schema.org/ResumeAction
    Model depth: 4
    """
    type_: str = Field(default="ResumeAction", alias='@type', const=True)
    



class ProgramMembership(Intangible):
    """Used to describe membership in a loyalty programs (e.g. \"StarAliance\"), traveler"
     "clubs (e.g. \"AAA\"), purchase clubs (\"Safeway Club\"), etc.

    See: https://schema.org/ProgramMembership
    Model depth: 3
    """
    type_: str = Field(default="ProgramMembership", alias='@type', const=True)
    member: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A member of an Organization or a ProgramMembership. Organizations can be members of"
     "organizations; ProgramMembership is typically for individuals.",
    )
    hostingOrganization: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The organization (airline, travelers' club, etc.) the membership is made with.",
    )
    membershipNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A unique identifier for the membership.",
    )
    members: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A member of this organization.",
    )
    membershipPointsEarned: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of membership points earned by the member. If necessary, the unitText can"
     "be used to express the units the points are issued in. (E.g. stars, miles, etc.)",
    )
    programName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The program providing the membership.",
    )
    



class DiscoverAction(FindAction):
    """The act of discovering/finding an object.

    See: https://schema.org/DiscoverAction
    Model depth: 4
    """
    type_: str = Field(default="DiscoverAction", alias='@type', const=True)
    



class OfflinePermanently(GameServerStatus):
    """Game server status: OfflinePermanently. Server is offline and not available.

    See: https://schema.org/OfflinePermanently
    Model depth: 6
    """
    type_: str = Field(default="OfflinePermanently", alias='@type', const=True)
    



class CafeOrCoffeeShop(FoodEstablishment):
    """A cafe or coffee shop.

    See: https://schema.org/CafeOrCoffeeShop
    Model depth: 5
    """
    type_: str = Field(default="CafeOrCoffeeShop", alias='@type', const=True)
    



class ReimbursementCap(DrugCostCategory):
    """The drug's cost represents the maximum reimbursement paid by an insurer for the drug.

    See: https://schema.org/ReimbursementCap
    Model depth: 6
    """
    type_: str = Field(default="ReimbursementCap", alias='@type', const=True)
    



class DryCleaningOrLaundry(LocalBusiness):
    """A dry-cleaning business.

    See: https://schema.org/DryCleaningOrLaundry
    Model depth: 4
    """
    type_: str = Field(default="DryCleaningOrLaundry", alias='@type', const=True)
    



class ContagiousnessHealthAspect(HealthAspectEnumeration):
    """Content about contagion mechanisms and contagiousness information over the topic.

    See: https://schema.org/ContagiousnessHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="ContagiousnessHealthAspect", alias='@type', const=True)
    



class RVPark(CivicStructure):
    """A place offering space for \"Recreational Vehicles\", Caravans, mobile homes and the"
     "like.

    See: https://schema.org/RVPark
    Model depth: 4
    """
    type_: str = Field(default="RVPark", alias='@type', const=True)
    



class LymphaticVessel(Vessel):
    """A type of blood vessel that specifically carries lymph fluid unidirectionally toward"
     "the heart.

    See: https://schema.org/LymphaticVessel
    Model depth: 5
    """
    type_: str = Field(default="LymphaticVessel", alias='@type', const=True)
    regionDrained: Optional[Union[List[Union[AnatomicalStructure, AnatomicalSystem, str]], AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="The anatomical or organ system drained by this vessel; generally refers to a specific"
     "part of an organ.",
    )
    originatesFrom: Optional[Union[List[Union[Vessel, str]], Vessel, str]] = Field(
        default=None,
        description="The vasculature the lymphatic structure originates, or afferents, from.",
    )
    runsTo: Optional[Union[List[Union[Vessel, str]], Vessel, str]] = Field(
        default=None,
        description="The vasculature the lymphatic structure runs, or efferents, to.",
    )
    



class ExchangeRefund(RefundTypeEnumeration):
    """Specifies that a refund can be done as an exchange for the same product.

    See: https://schema.org/ExchangeRefund
    Model depth: 5
    """
    type_: str = Field(default="ExchangeRefund", alias='@type', const=True)
    



class CharitableIncorporatedOrganization(UKNonprofitType):
    """CharitableIncorporatedOrganization: Non-profit type referring to a Charitable"
     "Incorporated Organization (UK).

    See: https://schema.org/CharitableIncorporatedOrganization
    Model depth: 6
    """
    type_: str = Field(default="CharitableIncorporatedOrganization", alias='@type', const=True)
    



class Discontinued(ItemAvailability):
    """Indicates that the item has been discontinued.

    See: https://schema.org/Discontinued
    Model depth: 5
    """
    type_: str = Field(default="Discontinued", alias='@type', const=True)
    



class BodyMeasurementNeck(BodyMeasurementTypeEnumeration):
    """Girth of neck. Used, for example, to fit shirts.

    See: https://schema.org/BodyMeasurementNeck
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementNeck", alias='@type', const=True)
    



class EvidenceLevelA(MedicalEvidenceLevel):
    """Data derived from multiple randomized clinical trials or meta-analyses.

    See: https://schema.org/EvidenceLevelA
    Model depth: 6
    """
    type_: str = Field(default="EvidenceLevelA", alias='@type', const=True)
    



class SpeechPathology(MedicalSpecialty):
    """The scientific study and treatment of defects, disorders, and malfunctions of speech"
     "and voice, as stuttering, lisping, or lalling, and of language disturbances, as aphasia"
     "or delayed language acquisition.

    See: https://schema.org/SpeechPathology
    Model depth: 6
    """
    type_: str = Field(default="SpeechPathology", alias='@type', const=True)
    



class OpeningHoursSpecification(StructuredValue):
    """A structured value providing information about the opening hours of a place or a certain"
     "service inside a place. The place is __open__ if the [[opens]] property is specified,"
     "and __closed__ otherwise. If the value for the [[closes]] property is less than the value"
     "for the [[opens]] property then the hour range is assumed to span over the next day.

    See: https://schema.org/OpeningHoursSpecification
    Model depth: 4
    """
    type_: str = Field(default="OpeningHoursSpecification", alias='@type', const=True)
    closes: Optional[Union[List[Union[time, Time, str]], time, Time, str]] = Field(
        default=None,
        description="The closing hour of the place or service on the given day(s) of the week.",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    opens: Optional[Union[List[Union[time, Time, str]], time, Time, str]] = Field(
        default=None,
        description="The opening hour of the place or service on the given day(s) of the week.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    dayOfWeek: Optional[Union[List[Union[DayOfWeek, str]], DayOfWeek, str]] = Field(
        default=None,
        description="The day of the week for which these opening hours are valid.",
    )
    



class PresentationDigitalDocument(DigitalDocument):
    """A file containing slides or used for a presentation.

    See: https://schema.org/PresentationDigitalDocument
    Model depth: 4
    """
    type_: str = Field(default="PresentationDigitalDocument", alias='@type', const=True)
    



class ProfessionalService(LocalBusiness):
    """Original definition: \"provider of professional services.\" The general [[ProfessionalService]]"
     "type for local businesses was deprecated due to confusion with [[Service]]. For reference,"
     "the types that it included were: [[Dentist]], [[AccountingService]], [[Attorney]],"
     "[[Notary]], as well as types for several kinds of [[HomeAndConstructionBusiness]]:"
     "[[Electrician]], [[GeneralContractor]], [[HousePainter]], [[Locksmith]], [[Plumber]],"
     "[[RoofingContractor]]. [[LegalService]] was introduced as a more inclusive supertype"
     "of [[Attorney]].

    See: https://schema.org/ProfessionalService
    Model depth: 4
    """
    type_: str = Field(default="ProfessionalService", alias='@type', const=True)
    



class BankOrCreditUnion(FinancialService):
    """Bank or credit union.

    See: https://schema.org/BankOrCreditUnion
    Model depth: 5
    """
    type_: str = Field(default="BankOrCreditUnion", alias='@type', const=True)
    



class IngredientsHealthAspect(HealthAspectEnumeration):
    """Content discussing ingredients-related aspects of a health topic.

    See: https://schema.org/IngredientsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="IngredientsHealthAspect", alias='@type', const=True)
    



class PhysicalTherapy(MedicalTherapy):
    """A process of progressive physical care and rehabilitation aimed at improving a health"
     "condition.

    See: https://schema.org/PhysicalTherapy
    Model depth: 6
    """
    type_: str = Field(default="PhysicalTherapy", alias='@type', const=True)
    



class Substance(MedicalEntity):
    """Any matter of defined composition that has discrete existence, whose origin may be biological,"
     "mineral or chemical.

    See: https://schema.org/Substance
    Model depth: 3
    """
    type_: str = Field(default="Substance", alias='@type', const=True)
    activeIngredient: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An active ingredient, typically chemical compounds and/or biologic substances.",
    )
    maximumIntake: Optional[Union[List[Union[MaximumDoseSchedule, str]], MaximumDoseSchedule, str]] = Field(
        default=None,
        description="Recommended intake of this supplement for a given population as defined by a specific"
     "recommending authority.",
    )
    



class Drug(Substance, Product):
    """A chemical or biologic substance, used as a medical therapy, that has a physiological"
     "effect on an organism. Here the term drug is used interchangeably with the term medicine"
     "although clinical knowledge makes a clear difference between them.

    See: https://schema.org/Drug
    Model depth: 3
    """
    type_: str = Field(default="Drug", alias='@type', const=True)
    includedInHealthInsurancePlan: Optional[Union[List[Union[HealthInsurancePlan, str]], HealthInsurancePlan, str]] = Field(
        default=None,
        description="The insurance plans that cover this drug.",
    )
    clincalPharmacology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of the absorption and elimination of drugs, including their concentration"
     "(pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).",
    )
    warning: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Any FDA or other warnings about the drug (text or URL).",
    )
    activeIngredient: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An active ingredient, typically chemical compounds and/or biologic substances.",
    )
    nonProprietaryName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The generic name of this drug or supplement.",
    )
    foodWarning: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any precaution, guidance, contraindication, etc. related to consumption of specific"
     "foods while taking this drug.",
    )
    availableStrength: Optional[Union[List[Union[DrugStrength, str]], DrugStrength, str]] = Field(
        default=None,
        description="An available dosage strength for the drug.",
    )
    breastfeedingWarning: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any precaution, guidance, contraindication, etc. related to this drug's use by breastfeeding"
     "mothers.",
    )
    dosageForm: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A dosage form in which this drug/supplement is available, e.g. 'tablet', 'suspension',"
     "'injection'.",
    )
    isAvailableGenerically: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="True if the drug is available in a generic form (regardless of name).",
    )
    relatedDrug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Any other drug related to this one, for example commonly-prescribed alternatives.",
    )
    labelDetails: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Link to the drug's label details.",
    )
    doseSchedule: Optional[Union[List[Union[DoseSchedule, str]], DoseSchedule, str]] = Field(
        default=None,
        description="A dosing schedule for the drug for a given population, either observed, recommended,"
     "or maximum dose based on the type used.",
    )
    drugUnit: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The unit in which the drug is measured, e.g. '5 mg tablet'.",
    )
    administrationRoute: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A route by which this drug may be administered, e.g. 'oral'.",
    )
    proprietaryName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Proprietary name given to the diet plan, typically by its originator or creator.",
    )
    clinicalPharmacology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of the absorption and elimination of drugs, including their concentration"
     "(pharmacokinetics, pK) and biological effects (pharmacodynamics, pD).",
    )
    prescriptionStatus: Optional[Union[List[Union[str, Text, DrugPrescriptionStatus]], str, Text, DrugPrescriptionStatus]] = Field(
        default=None,
        description="Indicates the status of drug prescription, e.g. local catalogs classifications or"
     "whether the drug is available by prescription or over-the-counter, etc.",
    )
    prescribingInfo: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Link to prescribing information for the drug.",
    )
    pregnancyWarning: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any precaution, guidance, contraindication, etc. related to this drug's use during"
     "pregnancy.",
    )
    legalStatus: Optional[Union[List[Union[str, Text, MedicalEnumeration, DrugLegalStatus]], str, Text, MedicalEnumeration, DrugLegalStatus]] = Field(
        default=None,
        description="The drug or supplement's legal status, including any controlled substance schedules"
     "that apply.",
    )
    overdosage: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any information related to overdose on a drug, including signs or symptoms, treatments,"
     "contact information for emergency response.",
    )
    isProprietary: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="True if this item's name is a proprietary/brand name (vs. generic name).",
    )
    rxcui: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The RxCUI drug identifier from RXNORM.",
    )
    alcoholWarning: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any precaution, guidance, contraindication, etc. related to consumption of alcohol"
     "while taking this drug.",
    )
    drugClass: Optional[Union[List[Union[DrugClass, str]], DrugClass, str]] = Field(
        default=None,
        description="The class of drug this belongs to (e.g., statins).",
    )
    interactingDrug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Another drug that is known to interact with this drug in a way that impacts the effect of"
     "this drug or causes a risk to the patient. Note: disease interactions are typically captured"
     "as contraindications.",
    )
    pregnancyCategory: Optional[Union[List[Union[DrugPregnancyCategory, str]], DrugPregnancyCategory, str]] = Field(
        default=None,
        description="Pregnancy category of this drug.",
    )
    maximumIntake: Optional[Union[List[Union[MaximumDoseSchedule, str]], MaximumDoseSchedule, str]] = Field(
        default=None,
        description="Recommended intake of this supplement for a given population as defined by a specific"
     "recommending authority.",
    )
    mechanismOfAction: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The specific biochemical interaction through which this drug or supplement produces"
     "its pharmacological effect.",
    )
    



class Season(CreativeWork):
    """A media season, e.g. TV, radio, video game etc.

    See: https://schema.org/Season
    Model depth: 3
    """
    type_: str = Field(default="Season", alias='@type', const=True)
    



class EventVenue(CivicStructure):
    """An event venue.

    See: https://schema.org/EventVenue
    Model depth: 4
    """
    type_: str = Field(default="EventVenue", alias='@type', const=True)
    



class EPRelease(MusicAlbumReleaseType):
    """EPRelease.

    See: https://schema.org/EPRelease
    Model depth: 5
    """
    type_: str = Field(default="EPRelease", alias='@type', const=True)
    



class ReservationPackage(Reservation):
    """A group of multiple reservations with common values for all sub-reservations.

    See: https://schema.org/ReservationPackage
    Model depth: 4
    """
    type_: str = Field(default="ReservationPackage", alias='@type', const=True)
    subReservation: Optional[Union[List[Union[Reservation, str]], Reservation, str]] = Field(
        default=None,
        description="The individual reservations included in the package. Typically a repeated property.",
    )
    



class AutoBodyShop(AutomotiveBusiness):
    """Auto body shop.

    See: https://schema.org/AutoBodyShop
    Model depth: 5
    """
    type_: str = Field(default="AutoBodyShop", alias='@type', const=True)
    



class TypesHealthAspect(HealthAspectEnumeration):
    """Categorization and other types related to a topic.

    See: https://schema.org/TypesHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="TypesHealthAspect", alias='@type', const=True)
    



class CheckAction(FindAction):
    """An agent inspects, determines, investigates, inquires, or examines an object's accuracy,"
     "quality, condition, or state.

    See: https://schema.org/CheckAction
    Model depth: 4
    """
    type_: str = Field(default="CheckAction", alias='@type', const=True)
    



class StudioAlbum(MusicAlbumProductionType):
    """StudioAlbum.

    See: https://schema.org/StudioAlbum
    Model depth: 5
    """
    type_: str = Field(default="StudioAlbum", alias='@type', const=True)
    



class DisabilitySupport(GovernmentBenefitsType):
    """DisabilitySupport: this is a benefit for disability support.

    See: https://schema.org/DisabilitySupport
    Model depth: 5
    """
    type_: str = Field(default="DisabilitySupport", alias='@type', const=True)
    



class StagesHealthAspect(HealthAspectEnumeration):
    """Stages that can be observed from a topic.

    See: https://schema.org/StagesHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="StagesHealthAspect", alias='@type', const=True)
    



class Legislation(CreativeWork):
    """A legal document such as an act, decree, bill, etc. (enforceable or not) or a component"
     "of a legal act (like an article).

    See: https://schema.org/Legislation
    Model depth: 3
    """
    type_: str = Field(default="Legislation", alias='@type', const=True)
    legislationTransposes: Optional[Union[List[Union[Legislation, str]], Legislation, str]] = Field(
        default=None,
        description="Indicates that this legislation (or part of legislation) fulfills the objectives set"
     "by another legislation, by passing appropriate implementation measures. Typically,"
     "some legislations of European Union's member states or regions transpose European"
     "Directives. This indicates a legally binding link between the 2 legislations.",
    )
    legislationPassedBy: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization that originally passed or made the law: typically parliament"
     "(for primary legislation) or government (for secondary legislation). This indicates"
     "the \"legal author\" of the law, as opposed to its physical author.",
    )
    legislationDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date of adoption or signature of the legislation. This is the date at which the text"
     "is officially aknowledged to be a legislation, even though it might not even be published"
     "or in force.",
    )
    legislationConsolidates: Optional[Union[List[Union[Legislation, str]], Legislation, str]] = Field(
        default=None,
        description="Indicates another legislation taken into account in this consolidated legislation"
     "(which is usually the product of an editorial process that revises the legislation)."
     "This property should be used multiple times to refer to both the original version or the"
     "previous consolidated version, and to the legislations making the change.",
    )
    legislationIdentifier: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An identifier for the legislation. This can be either a string-based identifier, like"
     "the CELEX at EU level or the NOR in France, or a web-based, URL/URI identifier, like an"
     "ELI (European Legislation Identifier) or an URN-Lex.",
    )
    legislationType: Optional[Union[List[Union[str, Text, CategoryCode]], str, Text, CategoryCode]] = Field(
        default=None,
        description="The type of the legislation. Examples of values are \"law\", \"act\", \"directive\","
     "\"decree\", \"regulation\", \"statutory instrument\", \"loi organique\", \"règlement"
     "grand-ducal\", etc., depending on the country.",
    )
    legislationChanges: Optional[Union[List[Union[Legislation, str]], Legislation, str]] = Field(
        default=None,
        description="Another legislation that this legislation changes. This encompasses the notions of"
     "amendment, replacement, correction, repeal, or other types of change. This may be a"
     "direct change (textual or non-textual amendment) or a consequential or indirect change."
     "The property is to be used to express the existence of a change relationship between two"
     "acts rather than the existence of a consolidated version of the text that shows the result"
     "of the change. For consolidation relationships, use the <a href=\"/legislationConsolidates\">legislationConsolidates</a>"
     "property.",
    )
    legislationApplies: Optional[Union[List[Union[Legislation, str]], Legislation, str]] = Field(
        default=None,
        description="Indicates that this legislation (or part of a legislation) somehow transfers another"
     "legislation in a different legislative context. This is an informative link, and it"
     "has no legal value. For legally-binding links of transposition, use the <a href=\"/legislationTransposes\">legislationTransposes</a>"
     "property. For example an informative consolidated law of a European Union's member"
     "state \"applies\" the consolidated version of the European Directive implemented"
     "in it.",
    )
    jurisdiction: Optional[Union[List[Union[str, Text, AdministrativeArea]], str, Text, AdministrativeArea]] = Field(
        default=None,
        description="Indicates a legal jurisdiction, e.g. of some legislation, or where some government"
     "service is based.",
    )
    legislationDateVersion: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The point-in-time at which the provided description of the legislation is valid (e.g.:"
     "when looking at the law on the 2016-04-07 (= dateVersion), I get the consolidation of"
     "2015-04-12 of the \"National Insurance Contributions Act 2015\")",
    )
    legislationLegalForce: Optional[Union[List[Union[LegalForceStatus, str]], LegalForceStatus, str]] = Field(
        default=None,
        description="Whether the legislation is currently in force, not in force, or partially in force.",
    )
    legislationResponsible: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An individual or organization that has some kind of responsibility for the legislation."
     "Typically the ministry who is/was in charge of elaborating the legislation, or the adressee"
     "for potential questions about the legislation once it is published.",
    )
    legislationJurisdiction: Optional[Union[List[Union[str, Text, AdministrativeArea]], str, Text, AdministrativeArea]] = Field(
        default=None,
        description="The jurisdiction from which the legislation originates.",
    )
    



class LegislationObject(Legislation, MediaObject):
    """A specific object or file containing a Legislation. Note that the same Legislation can"
     "be published in multiple files. For example, a digitally signed PDF, a plain PDF and an"
     "HTML version.

    See: https://schema.org/LegislationObject
    Model depth: 4
    """
    type_: str = Field(default="LegislationObject", alias='@type', const=True)
    legislationLegalValue: Optional[Union[List[Union[LegalValueLevel, str]], LegalValueLevel, str]] = Field(
        default=None,
        description="The legal value of this legislation file. The same legislation can be written in multiple"
     "files with different legal values. Typically a digitally signed PDF have a \"stronger\""
     "legal value than the HTML file of the same act.",
    )
    



class Airport(CivicStructure):
    """An airport.

    See: https://schema.org/Airport
    Model depth: 4
    """
    type_: str = Field(default="Airport", alias='@type', const=True)
    iataCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="IATA identifier for an airline or airport.",
    )
    icaoCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="ICAO identifier for an airport.",
    )
    



class UserLikes(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserLikes
    Model depth: 4
    """
    type_: str = Field(default="UserLikes", alias='@type', const=True)
    



class AmpStory(MediaObject, CreativeWork):
    """A creative work with a visual storytelling format intended to be viewed online, particularly"
     "on mobile devices.

    See: https://schema.org/AmpStory
    Model depth: 3
    """
    type_: str = Field(default="AmpStory", alias='@type', const=True)
    



class CookAction(CreateAction):
    """The act of producing/preparing food.

    See: https://schema.org/CookAction
    Model depth: 4
    """
    type_: str = Field(default="CookAction", alias='@type', const=True)
    foodEvent: Optional[Union[List[Union[FoodEvent, str]], FoodEvent, str]] = Field(
        default=None,
        description="A sub property of location. The specific food event where the action occurred.",
    )
    recipe: Optional[Union[List[Union[Recipe, str]], Recipe, str]] = Field(
        default=None,
        description="A sub property of instrument. The recipe/instructions used to perform the action.",
    )
    foodEstablishment: Optional[Union[List[Union[FoodEstablishment, Place, str]], FoodEstablishment, Place, str]] = Field(
        default=None,
        description="A sub property of location. The specific food establishment where the action occurred.",
    )
    



class MedicalWebPage(WebPage):
    """A web page that provides medical information.

    See: https://schema.org/MedicalWebPage
    Model depth: 4
    """
    type_: str = Field(default="MedicalWebPage", alias='@type', const=True)
    medicalAudience: Optional[Union[List[Union[MedicalAudience, MedicalAudienceType, str]], MedicalAudience, MedicalAudienceType, str]] = Field(
        default=None,
        description="Medical audience for page.",
    )
    aspect: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An aspect of medical practice that is considered on the page, such as 'diagnosis', 'treatment',"
     "'causes', 'prognosis', 'etiology', 'epidemiology', etc.",
    )
    



class Throat(PhysicalExam):
    """Throat assessment with clinical examination.

    See: https://schema.org/Throat
    Model depth: 5
    """
    type_: str = Field(default="Throat", alias='@type', const=True)
    



class Urologic(MedicalSpecialty):
    """A specific branch of medical science that is concerned with the diagnosis and treatment"
     "of diseases pertaining to the urinary tract and the urogenital system.

    See: https://schema.org/Urologic
    Model depth: 6
    """
    type_: str = Field(default="Urologic", alias='@type', const=True)
    



class StadiumOrArena(SportsActivityLocation, CivicStructure):
    """A stadium.

    See: https://schema.org/StadiumOrArena
    Model depth: 4
    """
    type_: str = Field(default="StadiumOrArena", alias='@type', const=True)
    



class FDAnotEvaluated(DrugPregnancyCategory):
    """A designation that the drug in question has not been assigned a pregnancy category designation"
     "by the US FDA.

    See: https://schema.org/FDAnotEvaluated
    Model depth: 6
    """
    type_: str = Field(default="FDAnotEvaluated", alias='@type', const=True)
    



class Cardiovascular(MedicalSpecialty):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of heart and vasculature.

    See: https://schema.org/Cardiovascular
    Model depth: 6
    """
    type_: str = Field(default="Cardiovascular", alias='@type', const=True)
    



class UserComments(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserComments
    Model depth: 4
    """
    type_: str = Field(default="UserComments", alias='@type', const=True)
    commentText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The text of the UserComment.",
    )
    replyToUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="The URL at which a reply may be posted to the specified UserComment.",
    )
    creator: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The creator/author of this CreativeWork. This is the same as the Author property for"
     "CreativeWork.",
    )
    commentTime: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The time at which the UserComment was made.",
    )
    discusses: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Specifies the CreativeWork associated with the UserComment.",
    )
    



class Lung(PhysicalExam):
    """Lung and respiratory system clinical examination.

    See: https://schema.org/Lung
    Model depth: 5
    """
    type_: str = Field(default="Lung", alias='@type', const=True)
    



class ReserveAction(PlanAction):
    """Reserving a concrete object. Related actions: * [[ScheduleAction]]: Unlike ScheduleAction,"
     "ReserveAction reserves concrete objects (e.g. a table, a hotel) towards a time slot"
     "/ spatial allocation.

    See: https://schema.org/ReserveAction
    Model depth: 5
    """
    type_: str = Field(default="ReserveAction", alias='@type', const=True)
    



class OrderInTransit(OrderStatus):
    """OrderStatus representing that an order is in transit.

    See: https://schema.org/OrderInTransit
    Model depth: 6
    """
    type_: str = Field(default="OrderInTransit", alias='@type', const=True)
    



class BusinessEvent(Event):
    """Event type: Business event.

    See: https://schema.org/BusinessEvent
    Model depth: 3
    """
    type_: str = Field(default="BusinessEvent", alias='@type', const=True)
    



class MusicComposition(CreativeWork):
    """A musical composition.

    See: https://schema.org/MusicComposition
    Model depth: 3
    """
    type_: str = Field(default="MusicComposition", alias='@type', const=True)
    iswcCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Musical Work Code for the composition.",
    )
    lyrics: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="The words in the song.",
    )
    musicalKey: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The key, mode, or scale this composition uses.",
    )
    includedComposition: Optional[Union[List[Union[MusicComposition, str]], MusicComposition, str]] = Field(
        default=None,
        description="Smaller compositions included in this work (e.g. a movement in a symphony).",
    )
    recordedAs: Optional[Union[List[Union[MusicRecording, str]], MusicRecording, str]] = Field(
        default=None,
        description="An audio recording of the work.",
    )
    composer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The person or organization who wrote a composition, or who is the composer of a work performed"
     "at some event.",
    )
    musicCompositionForm: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of composition (e.g. overture, sonata, symphony, etc.).",
    )
    firstPerformance: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="The date and place the work was first performed.",
    )
    lyricist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The person who wrote the words.",
    )
    musicArrangement: Optional[Union[List[Union[MusicComposition, str]], MusicComposition, str]] = Field(
        default=None,
        description="An arrangement derived from the composition.",
    )
    



class WinAction(AchieveAction):
    """The act of achieving victory in a competitive activity.

    See: https://schema.org/WinAction
    Model depth: 4
    """
    type_: str = Field(default="WinAction", alias='@type', const=True)
    loser: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sub property of participant. The loser of the action.",
    )
    



class SalePrice(PriceTypeEnumeration):
    """Represents a sale price (usually active for a limited period) of an offered product.

    See: https://schema.org/SalePrice
    Model depth: 5
    """
    type_: str = Field(default="SalePrice", alias='@type', const=True)
    



class ListItem(Intangible):
    """An list item, e.g. a step in a checklist or how-to description.

    See: https://schema.org/ListItem
    Model depth: 3
    """
    type_: str = Field(default="ListItem", alias='@type', const=True)
    item: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists').",
    )
    nextItem: Optional[Union[List[Union[ListItem, str]], ListItem, str]] = Field(
        default=None,
        description="A link to the ListItem that follows the current one.",
    )
    previousItem: Optional[Union[List[Union[ListItem, str]], ListItem, str]] = Field(
        default=None,
        description="A link to the ListItem that precedes the current one.",
    )
    position: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The position of an item in a series or sequence of items.",
    )
    



class HowToTip(ListItem, CreativeWork):
    """An explanation in the instructions for how to achieve a result. It provides supplementary"
     "information about a technique, supply, author's preference, etc. It can explain what"
     "could be done, or what should not be done, but doesn't specify what should be done (see"
     "HowToDirection).

    See: https://schema.org/HowToTip
    Model depth: 3
    """
    type_: str = Field(default="HowToTip", alias='@type', const=True)
    



class Longitudinal(MedicalObservationalStudyDesign):
    """Unlike cross-sectional studies, longitudinal studies track the same people, and therefore"
     "the differences observed in those people are less likely to be the result of cultural"
     "differences across generations. Longitudinal studies are also used in medicine to"
     "uncover predictors of certain diseases.

    See: https://schema.org/Longitudinal
    Model depth: 6
    """
    type_: str = Field(default="Longitudinal", alias='@type', const=True)
    



class Hackathon(Event):
    """A [hackathon](https://en.wikipedia.org/wiki/Hackathon) event.

    See: https://schema.org/Hackathon
    Model depth: 3
    """
    type_: str = Field(default="Hackathon", alias='@type', const=True)
    



class StatisticalPopulation(Intangible):
    """A StatisticalPopulation is a set of instances of a certain given type that satisfy some"
     "set of constraints. The property [[populationType]] is used to specify the type. Any"
     "property that can be used on instances of that type can appear on the statistical population."
     "For example, a [[StatisticalPopulation]] representing all [[Person]]s with a [[homeLocation]]"
     "of East Podunk California would be described by applying the appropriate [[homeLocation]]"
     "and [[populationType]] properties to a [[StatisticalPopulation]] item that stands"
     "for that set of people. The properties [[numConstraints]] and [[constrainingProperty]]"
     "are used to specify which of the populations properties are used to specify the population."
     "Note that the sense of \"population\" used here is the general sense of a statistical"
     "population, and does not imply that the population consists of people. For example,"
     "a [[populationType]] of [[Event]] or [[NewsArticle]] could be used. See also [[Observation]],"
     "and the [data and datasets](/docs/data-and-datasets.html) overview for more details.

    See: https://schema.org/StatisticalPopulation
    Model depth: 3
    """
    type_: str = Field(default="StatisticalPopulation", alias='@type', const=True)
    constrainingProperty: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Indicates a property used as a constraint to define a [[StatisticalPopulation]] with"
     "respect to the set of entities corresponding to an indicated type (via [[populationType]]).",
    )
    populationType: Optional[Union[List[Union[Class, str]], Class, str]] = Field(
        default=None,
        description="Indicates the populationType common to all members of a [[StatisticalPopulation]].",
    )
    numConstraints: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Indicates the number of constraints (not counting [[populationType]]) defined for"
     "a particular [[StatisticalPopulation]]. This helps applications understand if they"
     "have access to a sufficiently complete description of a [[StatisticalPopulation]].",
    )
    



class WriteAction(CreateAction):
    """The act of authoring written creative content.

    See: https://schema.org/WriteAction
    Model depth: 4
    """
    type_: str = Field(default="WriteAction", alias='@type', const=True)
    language: Optional[Union[List[Union[Language, str]], Language, str]] = Field(
        default=None,
        description="A sub property of instrument. The language used on this action.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    



class HowToSection(ListItem, ItemList, CreativeWork):
    """A sub-grouping of steps in the instructions for how to achieve a result (e.g. steps for"
     "making a pie crust within a pie recipe).

    See: https://schema.org/HowToSection
    Model depth: 3
    """
    type_: str = Field(default="HowToSection", alias='@type', const=True)
    steps: Optional[Union[List[Union[str, Text, CreativeWork, ItemList]], str, Text, CreativeWork, ItemList]] = Field(
        default=None,
        description="A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally"
     "misnamed 'steps'; 'step' is preferred).",
    )
    



class HVACBusiness(HomeAndConstructionBusiness):
    """A business that provides Heating, Ventilation and Air Conditioning services.

    See: https://schema.org/HVACBusiness
    Model depth: 5
    """
    type_: str = Field(default="HVACBusiness", alias='@type', const=True)
    



class RepaymentSpecification(StructuredValue):
    """A structured value representing repayment.

    See: https://schema.org/RepaymentSpecification
    Model depth: 4
    """
    type_: str = Field(default="RepaymentSpecification", alias='@type', const=True)
    loanPaymentAmount: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money to pay in a single payment.",
    )
    earlyPrepaymentPenalty: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="The amount to be paid as a penalty in the event of early payment of the loan.",
    )
    numberOfLoanPayments: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The number of payments contractually required at origination to repay the loan. For"
     "monthly paying loans this is the number of months from the contractual first payment"
     "date to the maturity date.",
    )
    loanPaymentFrequency: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Frequency of payments due, i.e. number of months between payments. This is defined as"
     "a frequency, i.e. the reciprocal of a period of time.",
    )
    downPayment: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="a type of payment made in cash during the onset of the purchase of an expensive good/service."
     "The payment typically represents only a percentage of the full purchase price.",
    )
    



class RelatedTopicsHealthAspect(HealthAspectEnumeration):
    """Other prominent or relevant topics tied to the main topic.

    See: https://schema.org/RelatedTopicsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="RelatedTopicsHealthAspect", alias='@type', const=True)
    



class UserPlusOnes(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserPlusOnes
    Model depth: 4
    """
    type_: str = Field(default="UserPlusOnes", alias='@type', const=True)
    



class Gynecologic(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that pertains to the health care of women, particularly"
     "in the diagnosis and treatment of disorders affecting the female reproductive system.

    See: https://schema.org/Gynecologic
    Model depth: 5
    """
    type_: str = Field(default="Gynecologic", alias='@type', const=True)
    



class MerchantReturnNotPermitted(MerchantReturnEnumeration):
    """Specifies that product returns are not permitted.

    See: https://schema.org/MerchantReturnNotPermitted
    Model depth: 5
    """
    type_: str = Field(default="MerchantReturnNotPermitted", alias='@type', const=True)
    



class OrderPickupAvailable(OrderStatus):
    """OrderStatus representing availability of an order for pickup.

    See: https://schema.org/OrderPickupAvailable
    Model depth: 6
    """
    type_: str = Field(default="OrderPickupAvailable", alias='@type', const=True)
    



class DeliveryEvent(Event):
    """An event involving the delivery of an item.

    See: https://schema.org/DeliveryEvent
    Model depth: 3
    """
    type_: str = Field(default="DeliveryEvent", alias='@type', const=True)
    availableThrough: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="After this date, the item will no longer be available for pickup.",
    )
    accessCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Password, PIN, or access code needed for delivery (e.g. from a locker).",
    )
    hasDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="Method used for delivery or shipping.",
    )
    availableFrom: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="When the item is available for pickup from the store, locker, etc.",
    )
    



class LimitedByGuaranteeCharity(UKNonprofitType):
    """LimitedByGuaranteeCharity: Non-profit type referring to a charitable company that"
     "is limited by guarantee (UK).

    See: https://schema.org/LimitedByGuaranteeCharity
    Model depth: 6
    """
    type_: str = Field(default="LimitedByGuaranteeCharity", alias='@type', const=True)
    



class ComputerLanguage(Intangible):
    """This type covers computer programming languages such as Scheme and Lisp, as well as other"
     "language-like computer representations. Natural languages are best represented"
     "with the [[Language]] type.

    See: https://schema.org/ComputerLanguage
    Model depth: 3
    """
    type_: str = Field(default="ComputerLanguage", alias='@type', const=True)
    



class WearableMeasurementCup(WearableMeasurementTypeEnumeration):
    """Measurement of the cup, for example of a bra

    See: https://schema.org/WearableMeasurementCup
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementCup", alias='@type', const=True)
    



class ReportedDoseSchedule(DoseSchedule):
    """A patient-reported or observed dosing schedule for a drug or supplement.

    See: https://schema.org/ReportedDoseSchedule
    Model depth: 5
    """
    type_: str = Field(default="ReportedDoseSchedule", alias='@type', const=True)
    



class Vehicle(Product):
    """A vehicle is a device that is designed or used to transport people or cargo over land, water,"
     "air, or through space.

    See: https://schema.org/Vehicle
    Model depth: 3
    """
    type_: str = Field(default="Vehicle", alias='@type', const=True)
    vehicleSpecialUsage: Optional[Union[List[Union[str, Text, CarUsageType]], str, Text, CarUsageType]] = Field(
        default=None,
        description="Indicates whether the vehicle has been used for special purposes, like commercial rental,"
     "driving school, or as a taxi. The legislation in many countries requires this information"
     "to be revealed when offering a car for sale.",
    )
    trailerWeight: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted weight of a trailer attached to the vehicle. Typical unit code(s): KGM"
     "for kilogram, LBR for pound * Note 1: You can indicate additional information in the [[name]]"
     "of the [[QuantitativeValue]] node. * Note 2: You may also link to a [[QualitativeValue]]"
     "node that provides additional information using [[valueReference]]. * Note 3: Note"
     "that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
    )
    cargoVolume: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The available volume for cargo or luggage. For automobiles, this is usually the trunk"
     "volume. Typical unit code(s): LTR for liters, FTQ for cubic foot/feet Note: You can use"
     "[[minValue]] and [[maxValue]] to indicate ranges.",
    )
    steeringPosition: Optional[Union[List[Union[SteeringPositionValue, str]], SteeringPositionValue, str]] = Field(
        default=None,
        description="The position of the steering wheel or similar device (mostly for cars).",
    )
    fuelConsumption: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The amount of fuel consumed for traveling a particular distance or temporal duration"
     "with the given vehicle (e.g. liters per 100 km). * Note 1: There are unfortunately no standard"
     "unit codes for liters per 100 km. Use [[unitText]] to indicate the unit of measurement,"
     "e.g. L/100 km. * Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]]"
     "(e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are"
     "reciprocal. * Note 3: Often, the absolute value is useful only when related to driving"
     "speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use [[valueReference]]"
     "to link the value for the fuel consumption to another value.",
    )
    modelDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The release date of a vehicle model (often used to differentiate versions of the same"
     "make and model).",
    )
    vehicleTransmission: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="The type of component used for transmitting the power from a rotating power source to"
     "the wheels or other relevant component(s) (\"gearbox\" for cars).",
    )
    emissionsCO2: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The CO2 emissions in g/km. When used in combination with a QuantitativeValue, put \"g/km\""
     "into the unitText property of that value, since there is no UN/CEFACT Common Code for"
     "\"g/km\".",
    )
    meetsEmissionStandard: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="Indicates that the vehicle meets the respective emission standard.",
    )
    payload: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted weight of passengers and cargo, EXCLUDING the weight of the empty vehicle."
     "Typical unit code(s): KGM for kilogram, LBR for pound * Note 1: Many databases specify"
     "the permitted TOTAL weight instead, which is the sum of [[weight]] and [[payload]] *"
     "Note 2: You can indicate additional information in the [[name]] of the [[QuantitativeValue]]"
     "node. * Note 3: You may also link to a [[QualitativeValue]] node that provides additional"
     "information using [[valueReference]]. * Note 4: Note that you can use [[minValue]]"
     "and [[maxValue]] to indicate ranges.",
    )
    fuelCapacity: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The capacity of the fuel tank or in the case of electric cars, the battery. If there are"
     "multiple components for storage, this should indicate the total of all storage of the"
     "same type. Typical unit code(s): LTR for liters, GLL of US gallons, GLI for UK / imperial"
     "gallons, AMH for ampere-hours (for electrical vehicles).",
    )
    wheelbase: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The distance between the centers of the front and rear wheels. Typical unit code(s):"
     "CMT for centimeters, MTR for meters, INH for inches, FOT for foot/feet",
    )
    vehicleIdentificationNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Vehicle Identification Number (VIN) is a unique serial number used by the automotive"
     "industry to identify individual motor vehicles.",
    )
    vehicleInteriorType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type or material of the interior of the vehicle (e.g. synthetic fabric, leather,"
     "wood, etc.). While most interior types are characterized by the material used, an interior"
     "type can also be based on vehicle usage or target audience.",
    )
    vehicleEngine: Optional[Union[List[Union[EngineSpecification, str]], EngineSpecification, str]] = Field(
        default=None,
        description="Information about the engine or engines of the vehicle.",
    )
    numberOfDoors: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of doors. Typical unit code(s): C62",
    )
    vehicleInteriorColor: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The color or color combination of the interior of the vehicle.",
    )
    driveWheelConfiguration: Optional[Union[List[Union[str, Text, DriveWheelConfigurationValue]], str, Text, DriveWheelConfigurationValue]] = Field(
        default=None,
        description="The drive wheel configuration, i.e. which roadwheels will receive torque from the vehicle's"
     "engine via the drivetrain.",
    )
    numberOfAxles: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of axles. Typical unit code(s): C62",
    )
    vehicleSeatingCapacity: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of passengers that can be seated in the vehicle, both in terms of the physical"
     "space available, and in terms of limitations set by law. Typical unit code(s): C62 for"
     "persons.",
    )
    numberOfPreviousOwners: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of owners of the vehicle, including the current one. Typical unit code(s):"
     "C62",
    )
    purchaseDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date the item, e.g. vehicle, was purchased by the current owner.",
    )
    bodyType: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="Indicates the design and body style of the vehicle (e.g. station wagon, hatchback, etc.).",
    )
    fuelType: Optional[Union[List[Union[AnyUrl, URL, str, Text, QualitativeValue]], AnyUrl, URL, str, Text, QualitativeValue]] = Field(
        default=None,
        description="The type of fuel suitable for the engine or engines of the vehicle. If the vehicle has only"
     "one engine, this property can be attached directly to the vehicle.",
    )
    speed: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The speed range of the vehicle. If the vehicle is powered by an engine, the upper limit"
     "of the speed range (indicated by [[maxValue]]) should be the maximum speed achievable"
     "under regular conditions. Typical unit code(s): KMH for km/h, HM for mile per hour (0.447"
     "04 m/s), KNT for knot *Note 1: Use [[minValue]] and [[maxValue]] to indicate the range."
     "Typically, the minimal value is zero. * Note 2: There are many different ways of measuring"
     "the speed range. You can link to information about how the given value has been determined"
     "using the [[valueReference]] property.",
    )
    mileageFromOdometer: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The total distance travelled by the particular vehicle since its initial production,"
     "as read from its odometer. Typical unit code(s): KMT for kilometers, SMI for statute"
     "miles",
    )
    productionDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date of production of the item, e.g. vehicle.",
    )
    knownVehicleDamages: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A textual description of known damages, both repaired and unrepaired.",
    )
    dateVehicleFirstRegistered: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date of the first registration of the vehicle with the respective public authorities.",
    )
    weightTotal: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted total weight of the loaded vehicle, including passengers and cargo and"
     "the weight of the empty vehicle. Typical unit code(s): KGM for kilogram, LBR for pound"
     "* Note 1: You can indicate additional information in the [[name]] of the [[QuantitativeValue]]"
     "node. * Note 2: You may also link to a [[QualitativeValue]] node that provides additional"
     "information using [[valueReference]]. * Note 3: Note that you can use [[minValue]]"
     "and [[maxValue]] to indicate ranges.",
    )
    numberOfAirbags: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text]], StrictInt, StrictFloat, Number, str, Text]] = Field(
        default=None,
        description="The number or type of airbags in the vehicle.",
    )
    fuelEfficiency: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The distance traveled per unit of fuel used; most commonly miles per gallon (mpg) or kilometers"
     "per liter (km/L). * Note 1: There are unfortunately no standard unit codes for miles per"
     "gallon or kilometers per liter. Use [[unitText]] to indicate the unit of measurement,"
     "e.g. mpg or km/L. * Note 2: There are two ways of indicating the fuel consumption, [[fuelConsumption]]"
     "(e.g. 8 liters per 100 km) and [[fuelEfficiency]] (e.g. 30 miles per gallon). They are"
     "reciprocal. * Note 3: Often, the absolute value is useful only when related to driving"
     "speed (\"at 80 km/h\") or usage pattern (\"city traffic\"). You can use [[valueReference]]"
     "to link the value for the fuel economy to another value.",
    )
    vehicleModelDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The release date of a vehicle model (often used to differentiate versions of the same"
     "make and model).",
    )
    numberOfForwardGears: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The total number of forward gears available for the transmission system of the vehicle."
     "Typical unit code(s): C62",
    )
    callSign: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting"
     "and radio communications to identify people, radio and TV stations, or vehicles.",
    )
    vehicleConfiguration: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5"
     "MT 225 hp' or 'limited edition'.",
    )
    tongueWeight: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted vertical load (TWR) of a trailer attached to the vehicle. Also referred"
     "to as Tongue Load Rating (TLR) or Vertical Load Rating (VLR). Typical unit code(s): KGM"
     "for kilogram, LBR for pound * Note 1: You can indicate additional information in the [[name]]"
     "of the [[QuantitativeValue]] node. * Note 2: You may also link to a [[QualitativeValue]]"
     "node that provides additional information using [[valueReference]]. * Note 3: Note"
     "that you can use [[minValue]] and [[maxValue]] to indicate ranges.",
    )
    accelerationTime: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The time needed to accelerate the vehicle from a given start velocity to a given target"
     "velocity. Typical unit code(s): SEC for seconds * Note: There are unfortunately no standard"
     "unit codes for seconds/0..100 km/h or seconds/0..60 mph. Simply use \"SEC\" for seconds"
     "and indicate the velocities in the [[name]] of the [[QuantitativeValue]], or use [[valueReference]]"
     "with a [[QuantitativeValue]] of 0..60 mph or 0..100 km/h to specify the reference speeds.",
    )
    seatingCapacity: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of persons that can be seated (e.g. in a vehicle), both in terms of the physical"
     "space available, and in terms of limitations set by law. Typical unit code(s): C62 for"
     "persons",
    )
    



class Motorcycle(Vehicle):
    """A motorcycle or motorbike is a single-track, two-wheeled motor vehicle.

    See: https://schema.org/Motorcycle
    Model depth: 4
    """
    type_: str = Field(default="Motorcycle", alias='@type', const=True)
    



class Nonprofit501c21(USNonprofitType):
    """Nonprofit501c21: Non-profit type referring to Black Lung Benefit Trusts.

    See: https://schema.org/Nonprofit501c21
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c21", alias='@type', const=True)
    



class FollowAction(InteractAction):
    """The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically"
     "to get updates polled from. Related actions: * [[BefriendAction]]: Unlike BefriendAction,"
     "FollowAction implies that the connection is *not* necessarily reciprocal. * [[SubscribeAction]]:"
     "Unlike SubscribeAction, FollowAction implies that the follower acts as an active agent"
     "constantly/actively polling for updates. * [[RegisterAction]]: Unlike RegisterAction,"
     "FollowAction implies that the agent is interested in continuing receiving updates"
     "from the object. * [[JoinAction]]: Unlike JoinAction, FollowAction implies that the"
     "agent is interested in getting updates from the object. * [[TrackAction]]: Unlike TrackAction,"
     "FollowAction refers to the polling of updates of all aspects of animate objects rather"
     "than the location of inanimate objects (e.g. you track a package, but you don't follow"
     "it).

    See: https://schema.org/FollowAction
    Model depth: 4
    """
    type_: str = Field(default="FollowAction", alias='@type', const=True)
    followee: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A sub property of object. The person or organization being followed.",
    )
    



class Game(CreativeWork):
    """The Game type represents things which are games. These are typically rule-governed"
     "recreational activities, e.g. role-playing games in which players assume the role"
     "of characters in a fictional setting.

    See: https://schema.org/Game
    Model depth: 3
    """
    type_: str = Field(default="Game", alias='@type', const=True)
    characterAttribute: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A piece of data that represents a particular aspect of a fictional character (skill,"
     "power, character points, advantage, disadvantage).",
    )
    gameLocation: Optional[Union[List[Union[AnyUrl, URL, Place, PostalAddress, str]], AnyUrl, URL, Place, PostalAddress, str]] = Field(
        default=None,
        description="Real or fictional location of the game (or part of game).",
    )
    numberOfPlayers: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicate how many people can play this game (minimum, maximum, or range).",
    )
    gameItem: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="An item is an object within the game world that can be collected by a player or, occasionally,"
     "a non-player character.",
    )
    quest: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The task that a player-controlled character, or group of characters may complete in"
     "order to gain a reward.",
    )
    



class VideoGame(SoftwareApplication, Game):
    """A video game is an electronic game that involves human interaction with a user interface"
     "to generate visual feedback on a video device.

    See: https://schema.org/VideoGame
    Model depth: 4
    """
    type_: str = Field(default="VideoGame", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    cheatCode: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Cheat codes to the game.",
    )
    gameServer: Optional[Union[List[Union[GameServer, str]], GameServer, str]] = Field(
        default=None,
        description="The server on which it is possible to play the game.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    gameEdition: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The edition of a video game.",
    )
    gamePlatform: Optional[Union[List[Union[AnyUrl, URL, str, Text, Thing]], AnyUrl, URL, str, Text, Thing]] = Field(
        default=None,
        description="The electronic systems used to play <a href=\"http://en.wikipedia.org/wiki/Category:Video_game_platforms\">video"
     "games</a>.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    gameTip: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Links to tips, tactics, etc.",
    )
    playMode: Optional[Union[List[Union[GamePlayMode, str]], GamePlayMode, str]] = Field(
        default=None,
        description="Indicates whether this game is multi-player, co-op or single-player. The game can be"
     "marked as multi-player, co-op and single-player at the same time.",
    )
    



class OpinionNewsArticle(NewsArticle):
    """An [[OpinionNewsArticle]] is a [[NewsArticle]] that primarily expresses opinions"
     "rather than journalistic reporting of news and events. For example, a [[NewsArticle]]"
     "consisting of a column or [[Blog]]/[[BlogPosting]] entry in the Opinions section of"
     "a news publication.

    See: https://schema.org/OpinionNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="OpinionNewsArticle", alias='@type', const=True)
    



class MapCategoryType(Enumeration):
    """An enumeration of several kinds of Map.

    See: https://schema.org/MapCategoryType
    Model depth: 4
    """
    type_: str = Field(default="MapCategoryType", alias='@type', const=True)
    



class NGO(Organization):
    """Organization: Non-governmental Organization.

    See: https://schema.org/NGO
    Model depth: 3
    """
    type_: str = Field(default="NGO", alias='@type', const=True)
    



class BusStation(CivicStructure):
    """A bus station.

    See: https://schema.org/BusStation
    Model depth: 4
    """
    type_: str = Field(default="BusStation", alias='@type', const=True)
    



class TrainStation(CivicStructure):
    """A train station.

    See: https://schema.org/TrainStation
    Model depth: 4
    """
    type_: str = Field(default="TrainStation", alias='@type', const=True)
    



class SportingGoodsStore(Store):
    """A sporting goods store.

    See: https://schema.org/SportingGoodsStore
    Model depth: 5
    """
    type_: str = Field(default="SportingGoodsStore", alias='@type', const=True)
    



class UnRegisterAction(InteractAction):
    """The act of un-registering from a service. Related actions: * [[RegisterAction]]: antonym"
     "of UnRegisterAction. * [[LeaveAction]]: Unlike LeaveAction, UnRegisterAction implies"
     "that you are unregistering from a service you were previously registered, rather than"
     "leaving a team/group of people.

    See: https://schema.org/UnRegisterAction
    Model depth: 4
    """
    type_: str = Field(default="UnRegisterAction", alias='@type', const=True)
    



class DoubleBlindedTrial(MedicalTrialDesign):
    """A trial design in which neither the researcher nor the patient knows the details of the"
     "treatment the patient was randomly assigned to.

    See: https://schema.org/DoubleBlindedTrial
    Model depth: 6
    """
    type_: str = Field(default="DoubleBlindedTrial", alias='@type', const=True)
    



class ToyStore(Store):
    """A toy store.

    See: https://schema.org/ToyStore
    Model depth: 5
    """
    type_: str = Field(default="ToyStore", alias='@type', const=True)
    



class UnemploymentSupport(GovernmentBenefitsType):
    """UnemploymentSupport: this is a benefit for unemployment support.

    See: https://schema.org/UnemploymentSupport
    Model depth: 5
    """
    type_: str = Field(default="UnemploymentSupport", alias='@type', const=True)
    



class MedicalSign(MedicalSignOrSymptom):
    """Any physical manifestation of a person's medical condition discoverable by objective"
     "diagnostic tests or physical examination.

    See: https://schema.org/MedicalSign
    Model depth: 5
    """
    type_: str = Field(default="MedicalSign", alias='@type', const=True)
    identifyingExam: Optional[Union[List[Union[PhysicalExam, str]], PhysicalExam, str]] = Field(
        default=None,
        description="A physical examination that can identify this sign.",
    )
    identifyingTest: Optional[Union[List[Union[MedicalTest, str]], MedicalTest, str]] = Field(
        default=None,
        description="A diagnostic test that can identify this sign.",
    )
    



class MovieSeries(CreativeWorkSeries):
    """A series of movies. Included movies can be indicated with the hasPart property.

    See: https://schema.org/MovieSeries
    Model depth: 4
    """
    type_: str = Field(default="MovieSeries", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class Car(Vehicle):
    """A car is a wheeled, self-powered motor vehicle used for transportation.

    See: https://schema.org/Car
    Model depth: 4
    """
    type_: str = Field(default="Car", alias='@type', const=True)
    roofLoad: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted total weight of cargo and installations (e.g. a roof rack) on top of the"
     "vehicle. Typical unit code(s): KGM for kilogram, LBR for pound * Note 1: You can indicate"
     "additional information in the [[name]] of the [[QuantitativeValue]] node. * Note 2:"
     "You may also link to a [[QualitativeValue]] node that provides additional information"
     "using [[valueReference]] * Note 3: Note that you can use [[minValue]] and [[maxValue]]"
     "to indicate ranges.",
    )
    acrissCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The ACRISS Car Classification Code is a code used by many car rental companies, for classifying"
     "vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.",
    )
    



class SoldOut(ItemAvailability):
    """Indicates that the item has sold out.

    See: https://schema.org/SoldOut
    Model depth: 5
    """
    type_: str = Field(default="SoldOut", alias='@type', const=True)
    



class Physiotherapy(MedicalSpecialty, MedicalBusiness):
    """The practice of treatment of disease, injury, or deformity by physical methods such"
     "as massage, heat treatment, and exercise rather than by drugs or surgery.

    See: https://schema.org/Physiotherapy
    Model depth: 5
    """
    type_: str = Field(default="Physiotherapy", alias='@type', const=True)
    



class Pond(BodyOfWater):
    """A pond.

    See: https://schema.org/Pond
    Model depth: 5
    """
    type_: str = Field(default="Pond", alias='@type', const=True)
    



class PropertyValueSpecification(Intangible):
    """A Property value specification.

    See: https://schema.org/PropertyValueSpecification
    Model depth: 3
    """
    type_: str = Field(default="PropertyValueSpecification", alias='@type', const=True)
    valuePattern: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Specifies a regular expression for testing literal values according to the HTML spec.",
    )
    readonlyValue: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether or not a property is mutable. Default is false. Specifying this for a property"
     "that also has a value makes it act similar to a \"hidden\" input in an HTML form.",
    )
    valueMinLength: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Specifies the minimum allowed range for number of characters in a literal value.",
    )
    valueName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the name of the PropertyValueSpecification to be used in URL templates and"
     "form encoding in a manner analogous to HTML's input@name.",
    )
    maxValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The upper value of some characteristic or property.",
    )
    valueMaxLength: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Specifies the allowed range for number of characters in a literal value.",
    )
    valueRequired: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether the property must be filled in to complete the action. Default is false.",
    )
    stepValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The stepValue attribute indicates the granularity that is expected (and required)"
     "of the value in a PropertyValueSpecification.",
    )
    defaultValue: Optional[Union[List[Union[str, Text, Thing]], str, Text, Thing]] = Field(
        default=None,
        description="The default value of the input. For properties that expect a literal, the default is a"
     "literal value, for properties that expect an object, it's an ID reference to one of the"
     "current values.",
    )
    multipleValues: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether multiple values are allowed for the property. Default is false.",
    )
    minValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The lower value of some characteristic or property.",
    )
    



class BorrowAction(TransferAction):
    """The act of obtaining an object under an agreement to return it at a later date. Reciprocal"
     "of LendAction. Related actions: * [[LendAction]]: Reciprocal of BorrowAction.

    See: https://schema.org/BorrowAction
    Model depth: 4
    """
    type_: str = Field(default="BorrowAction", alias='@type', const=True)
    lender: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The person that lends the object being borrowed.",
    )
    



class HinduDiet(RestrictedDiet):
    """A diet conforming to Hindu dietary practices, in particular, beef-free.

    See: https://schema.org/HinduDiet
    Model depth: 5
    """
    type_: str = Field(default="HinduDiet", alias='@type', const=True)
    



class Hematologic(MedicalSpecialty):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of blood and blood producing organs.

    See: https://schema.org/Hematologic
    Model depth: 6
    """
    type_: str = Field(default="Hematologic", alias='@type', const=True)
    



class LowSaltDiet(RestrictedDiet):
    """A diet focused on reduced sodium intake.

    See: https://schema.org/LowSaltDiet
    Model depth: 5
    """
    type_: str = Field(default="LowSaltDiet", alias='@type', const=True)
    



class XPathType(Text):
    """Text representing an XPath (typically but not necessarily version 1.0).

    See: https://schema.org/XPathType
    Model depth: 6
    """
    type_: str = Field(default="XPathType", alias='@type', const=True)
    



class SingleBlindedTrial(MedicalTrialDesign):
    """A trial design in which the researcher knows which treatment the patient was randomly"
     "assigned to but the patient does not.

    See: https://schema.org/SingleBlindedTrial
    Model depth: 6
    """
    type_: str = Field(default="SingleBlindedTrial", alias='@type', const=True)
    



class SingleRelease(MusicAlbumReleaseType):
    """SingleRelease.

    See: https://schema.org/SingleRelease
    Model depth: 5
    """
    type_: str = Field(default="SingleRelease", alias='@type', const=True)
    



class WearableSizeSystemAU(WearableSizeSystemEnumeration):
    """Australian size system for wearables.

    See: https://schema.org/WearableSizeSystemAU
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemAU", alias='@type', const=True)
    



class UKTrust(UKNonprofitType):
    """UKTrust: Non-profit type referring to a UK trust.

    See: https://schema.org/UKTrust
    Model depth: 6
    """
    type_: str = Field(default="UKTrust", alias='@type', const=True)
    



class PaidLeave(GovernmentBenefitsType):
    """PaidLeave: this is a benefit for paid leave.

    See: https://schema.org/PaidLeave
    Model depth: 5
    """
    type_: str = Field(default="PaidLeave", alias='@type', const=True)
    



class EditedOrCroppedContent(MediaManipulationRatingEnumeration):
    """Content coded 'edited or cropped content' in a [[MediaReview]], considered in the context"
     "of how it was published or shared. For a [[VideoObject]] to be 'edited or cropped content':"
     "The video has been edited or rearranged. This category applies to time edits, including"
     "editing multiple videos together to alter the story being told or editing out large portions"
     "from a video. For an [[ImageObject]] to be 'edited or cropped content': Presenting a"
     "part of an image from a larger whole to mislead the viewer. For an [[ImageObject]] with"
     "embedded text to be 'edited or cropped content': Presenting a part of an image from a larger"
     "whole to mislead the viewer. For an [[AudioObject]] to be 'edited or cropped content':"
     "The audio has been edited or rearranged. This category applies to time edits, including"
     "editing multiple audio clips together to alter the story being told or editing out large"
     "portions from the recording.

    See: https://schema.org/EditedOrCroppedContent
    Model depth: 5
    """
    type_: str = Field(default="EditedOrCroppedContent", alias='@type', const=True)
    



class Nonprofit501c12(USNonprofitType):
    """Nonprofit501c12: Non-profit type referring to Benevolent Life Insurance Associations,"
     "Mutual Ditch or Irrigation Companies, Mutual or Cooperative Telephone Companies.

    See: https://schema.org/Nonprofit501c12
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c12", alias='@type', const=True)
    



class VitalSign(MedicalSign):
    """Vital signs are measures of various physiological functions in order to assess the most"
     "basic body functions.

    See: https://schema.org/VitalSign
    Model depth: 6
    """
    type_: str = Field(default="VitalSign", alias='@type', const=True)
    



class WearableSizeSystemMX(WearableSizeSystemEnumeration):
    """Mexican size system for wearables.

    See: https://schema.org/WearableSizeSystemMX
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemMX", alias='@type', const=True)
    



class GardenStore(Store):
    """A garden store.

    See: https://schema.org/GardenStore
    Model depth: 5
    """
    type_: str = Field(default="GardenStore", alias='@type', const=True)
    



class SearchRescueOrganization(Organization):
    """A Search and Rescue organization of some kind.

    See: https://schema.org/SearchRescueOrganization
    Model depth: 3
    """
    type_: str = Field(default="SearchRescueOrganization", alias='@type', const=True)
    



class BrainStructure(AnatomicalStructure):
    """Any anatomical structure which pertains to the soft nervous tissue functioning as the"
     "coordinating center of sensation and intellectual and nervous activity.

    See: https://schema.org/BrainStructure
    Model depth: 4
    """
    type_: str = Field(default="BrainStructure", alias='@type', const=True)
    



class TreatmentsHealthAspect(HealthAspectEnumeration):
    """Treatments or related therapies for a Topic.

    See: https://schema.org/TreatmentsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="TreatmentsHealthAspect", alias='@type', const=True)
    



class HowTo(CreativeWork):
    """Instructions that explain how to achieve a result by performing a sequence of steps.

    See: https://schema.org/HowTo
    Model depth: 3
    """
    type_: str = Field(default="HowTo", alias='@type', const=True)
    prepTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The length of time it takes to prepare the items to be used in instructions or a direction,"
     "in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    steps: Optional[Union[List[Union[str, Text, CreativeWork, ItemList]], str, Text, CreativeWork, ItemList]] = Field(
        default=None,
        description="A single step item (as HowToStep, text, document, video, etc.) or a HowToSection (originally"
     "misnamed 'steps'; 'step' is preferred).",
    )
    estimatedCost: Optional[Union[List[Union[str, Text, MonetaryAmount]], str, Text, MonetaryAmount]] = Field(
        default=None,
        description="The estimated cost of the supply or supplies consumed when performing instructions.",
    )
    yield_: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,alias="yield",
        description="The quantity that results by performing instructions. For example, a paper airplane,"
     "10 personalized candles.",
    )
    tool: Optional[Union[List[Union[str, Text, HowToTool]], str, Text, HowToTool]] = Field(
        default=None,
        description="A sub property of instrument. An object used (but not consumed) when performing instructions"
     "or a direction.",
    )
    step: Optional[Union[List[Union[str, Text, HowToStep, CreativeWork, HowToSection]], str, Text, HowToStep, CreativeWork, HowToSection]] = Field(
        default=None,
        description="A single step item (as HowToStep, text, document, video, etc.) or a HowToSection.",
    )
    performTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The length of time it takes to perform instructions or a direction (not including time"
     "to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    supply: Optional[Union[List[Union[str, Text, HowToSupply]], str, Text, HowToSupply]] = Field(
        default=None,
        description="A sub-property of instrument. A supply consumed when performing instructions or a direction.",
    )
    totalTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The total time required to perform instructions or a direction (including time to prepare"
     "the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    



class Recipe(HowTo):
    """A recipe. For dietary restrictions covered by the recipe, a few common restrictions"
     "are enumerated via [[suitableForDiet]]. The [[keywords]] property can also be used"
     "to add more detail.

    See: https://schema.org/Recipe
    Model depth: 4
    """
    type_: str = Field(default="Recipe", alias='@type', const=True)
    recipeYield: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="The quantity produced by the recipe (for example, number of people served, number of"
     "servings, etc).",
    )
    nutrition: Optional[Union[List[Union[NutritionInformation, str]], NutritionInformation, str]] = Field(
        default=None,
        description="Nutrition information about the recipe or menu item.",
    )
    cookingMethod: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The method of cooking, such as Frying, Steaming, ...",
    )
    suitableForDiet: Optional[Union[List[Union[RestrictedDiet, str]], RestrictedDiet, str]] = Field(
        default=None,
        description="Indicates a dietary restriction or guideline for which this recipe or menu item is suitable,"
     "e.g. diabetic, halal etc.",
    )
    cookTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The time it takes to actually cook the dish, in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    ingredients: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A single ingredient used in the recipe, e.g. sugar, flour or garlic.",
    )
    recipeCuisine: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The cuisine of the recipe (for example, French or Ethiopian).",
    )
    recipeInstructions: Optional[Union[List[Union[str, Text, CreativeWork, ItemList]], str, Text, CreativeWork, ItemList]] = Field(
        default=None,
        description="A step in making the recipe, in the form of a single item (document, video, etc.) or an ordered"
     "list with HowToStep and/or HowToSection items.",
    )
    recipeIngredient: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A single ingredient used in the recipe, e.g. sugar, flour or garlic.",
    )
    recipeCategory: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The category of the recipe—for example, appetizer, entree, etc.",
    )
    



class WearableSizeGroupMaternity(WearableSizeGroupEnumeration):
    """Size group \"Maternity\" for wearables.

    See: https://schema.org/WearableSizeGroupMaternity
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupMaternity", alias='@type', const=True)
    



class ReplaceAction(UpdateAction):
    """The act of editing a recipient by replacing an old object with a new object.

    See: https://schema.org/ReplaceAction
    Model depth: 4
    """
    type_: str = Field(default="ReplaceAction", alias='@type', const=True)
    replacee: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A sub property of object. The object that is being replaced.",
    )
    replacer: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A sub property of object. The object that replaces.",
    )
    



class Code(CreativeWork):
    """Computer programming source code. Example: Full (compile ready) solutions, code snippet"
     "samples, scripts, templates.

    See: https://schema.org/Code
    Model depth: 3
    """
    type_: str = Field(default="Code", alias='@type', const=True)
    



class Nonprofit501c16(USNonprofitType):
    """Nonprofit501c16: Non-profit type referring to Cooperative Organizations to Finance"
     "Crop Operations.

    See: https://schema.org/Nonprofit501c16
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c16", alias='@type', const=True)
    



class SizeSystemMetric(SizeSystemEnumeration):
    """Metric size system.

    See: https://schema.org/SizeSystemMetric
    Model depth: 5
    """
    type_: str = Field(default="SizeSystemMetric", alias='@type', const=True)
    



class ChildCare(LocalBusiness):
    """A Childcare center.

    See: https://schema.org/ChildCare
    Model depth: 4
    """
    type_: str = Field(default="ChildCare", alias='@type', const=True)
    



class PropertyValue(StructuredValue):
    """A property-value pair, e.g. representing a feature of a product or place. Use the 'name'"
     "property for the name of the property. If there is an additional human-readable version"
     "of the value, put that into the 'description' property. Always use specific schema.org"
     "properties when a) they exist and b) you can populate them. Using PropertyValue as a substitute"
     "will typically not trigger the same effect as using the original, specific property.

    See: https://schema.org/PropertyValue
    Model depth: 4
    """
    type_: str = Field(default="PropertyValue", alias='@type', const=True)
    value: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]], StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]] = Field(
        default=None,
        description="The value of the quantitative value or property value node. * For [[QuantitativeValue]]"
     "and [[MonetaryAmount]], the recommended type for values is 'Number'. * For [[PropertyValue]],"
     "it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'. * Use values from 0123456789"
     "(Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to"
     "indicate a decimal point. Avoid using these symbols as a readability separator.",
    )
    valueReference: Optional[Union[List[Union[str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]], str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]] = Field(
        default=None,
        description="A secondary value that provides additional information on the original value, e.g."
     "a reference temperature or a type of measurement.",
    )
    measurementTechnique: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A technique or technology used in a [[Dataset]] (or [[DataDownload]], [[DataCatalog]]),"
     "corresponding to the method used for measuring the corresponding variable(s) (described"
     "using [[variableMeasured]]). This is oriented towards scientific and scholarly dataset"
     "publication but may have broader applicability; it is not intended as a full representation"
     "of measurement, but rather as a high level summary for dataset discovery. For example,"
     "if [[variableMeasured]] is: molecule concentration, [[measurementTechnique]]"
     "could be: \"mass spectrometry\" or \"nmr spectroscopy\" or \"colorimetry\" or \"immunofluorescence\"."
     "If the [[variableMeasured]] is \"depression rating\", the [[measurementTechnique]]"
     "could be \"Zung Scale\" or \"HAM-D\" or \"Beck Depression Inventory\". If there are"
     "several [[variableMeasured]] properties recorded for some given data object, use"
     "a [[PropertyValue]] for each [[variableMeasured]] and attach the corresponding [[measurementTechnique]].",
    )
    unitCode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL."
     "Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.",
    )
    maxValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The upper value of some characteristic or property.",
    )
    unitText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A string or text indicating the unit of measurement. Useful if you cannot provide a standard"
     "unit code for <a href='unitCode'>unitCode</a>.",
    )
    propertyID: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A commonly used identifier for the characteristic represented by the property, e.g."
     "a manufacturer or a standard code for a property. propertyID can be (1) a prefixed string,"
     "mainly meant to be used with standards for product properties; (2) a site-specific,"
     "non-prefixed string (e.g. the primary key of the property or the vendor-specific ID"
     "of the property), or (3) a URL indicating the type of the property, either pointing to"
     "an external vocabulary, or a Web resource that describes the property (e.g. a glossary"
     "entry). Standards bodies should promote a standard prefix for the identifiers of properties"
     "from their standards.",
    )
    minValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The lower value of some characteristic or property.",
    )
    



class LocationFeatureSpecification(PropertyValue):
    """Specifies a location feature by providing a structured value representing a feature"
     "of an accommodation as a property-value pair of varying degrees of formality.

    See: https://schema.org/LocationFeatureSpecification
    Model depth: 5
    """
    type_: str = Field(default="LocationFeatureSpecification", alias='@type', const=True)
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    hoursAvailable: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="The hours during which this service or contact is available.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    



class RemixAlbum(MusicAlbumProductionType):
    """RemixAlbum.

    See: https://schema.org/RemixAlbum
    Model depth: 5
    """
    type_: str = Field(default="RemixAlbum", alias='@type', const=True)
    



class Date(DataType):
    """A date value in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).

    See: https://schema.org/Date
    Model depth: 5
    """
    type_: str = Field(default="Date", alias='@type', const=True)
    



class DrugPrescriptionStatus(MedicalEnumeration):
    """Indicates whether this drug is available by prescription or over-the-counter.

    See: https://schema.org/DrugPrescriptionStatus
    Model depth: 5
    """
    type_: str = Field(default="DrugPrescriptionStatus", alias='@type', const=True)
    



class OTC(DrugPrescriptionStatus):
    """The character of a medical substance, typically a medicine, of being available over"
     "the counter or not.

    See: https://schema.org/OTC
    Model depth: 6
    """
    type_: str = Field(default="OTC", alias='@type', const=True)
    



class Taxon(Thing):
    """A set of organisms asserted to represent a natural cohesive biological unit.

    See: https://schema.org/Taxon
    Model depth: 2
    """
    type_: str = Field(default="Taxon", alias='@type', const=True)
    parentTaxon: Optional[Union[List[Union[AnyUrl, URL, str, Text, Taxon]], AnyUrl, URL, str, Text, Taxon]] = Field(
        default=None,
        description="Closest parent taxon of the taxon in question.",
    )
    taxonRank: Optional[Union[List[Union[AnyUrl, URL, str, Text, PropertyValue]], AnyUrl, URL, str, Text, PropertyValue]] = Field(
        default=None,
        description="The taxonomic rank of this taxon given preferably as a URI from a controlled vocabulary"
     "– typically the ranks from TDWG TaxonRank ontology or equivalent Wikidata URIs.",
    )
    childTaxon: Optional[Union[List[Union[AnyUrl, URL, str, Text, Taxon]], AnyUrl, URL, str, Text, Taxon]] = Field(
        default=None,
        description="Closest child taxa of the taxon in question.",
    )
    hasDefinedTerm: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="A Defined Term contained in this term set.",
    )
    



class AccountingService(FinancialService):
    """Accountancy business. As a [[LocalBusiness]] it can be described as a [[provider]]"
     "of one or more [[Service]]\(s).

    See: https://schema.org/AccountingService
    Model depth: 5
    """
    type_: str = Field(default="AccountingService", alias='@type', const=True)
    



class EventScheduled(EventStatusType):
    """The event is taking place or has taken place on the startDate as scheduled. Use of this"
     "value is optional, as it is assumed by default.

    See: https://schema.org/EventScheduled
    Model depth: 6
    """
    type_: str = Field(default="EventScheduled", alias='@type', const=True)
    



class WearableMeasurementSleeve(WearableMeasurementTypeEnumeration):
    """Measurement of the sleeve length, for example of a shirt

    See: https://schema.org/WearableMeasurementSleeve
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementSleeve", alias='@type', const=True)
    



class ListPrice(PriceTypeEnumeration):
    """Represents the list price (the price a product is actually advertised for) of an offered"
     "product.

    See: https://schema.org/ListPrice
    Model depth: 5
    """
    type_: str = Field(default="ListPrice", alias='@type', const=True)
    



class WebApplication(SoftwareApplication):
    """Web applications.

    See: https://schema.org/WebApplication
    Model depth: 4
    """
    type_: str = Field(default="WebApplication", alias='@type', const=True)
    browserRequirements: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Specifies browser requirements in human-readable text. For example, 'requires HTML5"
     "support'.",
    )
    



class Suspended(MedicalStudyStatus):
    """Suspended.

    See: https://schema.org/Suspended
    Model depth: 6
    """
    type_: str = Field(default="Suspended", alias='@type', const=True)
    



class Subscription(PriceComponentTypeEnumeration):
    """Represents the subscription pricing component of the total price for an offered product.

    See: https://schema.org/Subscription
    Model depth: 5
    """
    type_: str = Field(default="Subscription", alias='@type', const=True)
    



class FreeReturn(ReturnFeesEnumeration):
    """Specifies that product returns are free of charge for the customer.

    See: https://schema.org/FreeReturn
    Model depth: 5
    """
    type_: str = Field(default="FreeReturn", alias='@type', const=True)
    



class HowToItem(ListItem):
    """An item used as either a tool or supply when performing the instructions for how to achieve"
     "a result.

    See: https://schema.org/HowToItem
    Model depth: 4
    """
    type_: str = Field(default="HowToItem", alias='@type', const=True)
    requiredQuantity: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, QuantitativeValue]], StrictInt, StrictFloat, Number, str, Text, QuantitativeValue]] = Field(
        default=None,
        description="The required quantity of the item(s).",
    )
    



class HowToTool(HowToItem):
    """A tool used (but not consumed) when performing instructions for how to achieve a result.

    See: https://schema.org/HowToTool
    Model depth: 5
    """
    type_: str = Field(default="HowToTool", alias='@type', const=True)
    



class InvestmentFund(InvestmentOrDeposit):
    """A company or fund that gathers capital from a number of investors to create a pool of money"
     "that is then re-invested into stocks, bonds and other assets.

    See: https://schema.org/InvestmentFund
    Model depth: 6
    """
    type_: str = Field(default="InvestmentFund", alias='@type', const=True)
    



class FailedActionStatus(ActionStatusType):
    """An action that failed to complete. The action's error property and the HTTP return code"
     "contain more information about the failure.

    See: https://schema.org/FailedActionStatus
    Model depth: 6
    """
    type_: str = Field(default="FailedActionStatus", alias='@type', const=True)
    



class RealEstateAgent(LocalBusiness):
    """A real-estate agent.

    See: https://schema.org/RealEstateAgent
    Model depth: 4
    """
    type_: str = Field(default="RealEstateAgent", alias='@type', const=True)
    



class AdvertiserContentArticle(Article):
    """An [[Article]] that an external entity has paid to place or to produce to its specifications."
     "Includes [advertorials](https://en.wikipedia.org/wiki/Advertorial), sponsored"
     "content, native advertising and other paid content.

    See: https://schema.org/AdvertiserContentArticle
    Model depth: 4
    """
    type_: str = Field(default="AdvertiserContentArticle", alias='@type', const=True)
    



class Drawing(CreativeWork):
    """A picture or diagram made with a pencil, pen, or crayon rather than paint.

    See: https://schema.org/Drawing
    Model depth: 3
    """
    type_: str = Field(default="Drawing", alias='@type', const=True)
    



class RegisterAction(InteractAction):
    """The act of registering to be a user of a service, product or web page. Related actions:"
     "* [[JoinAction]]: Unlike JoinAction, RegisterAction implies you are registering"
     "to be a user of a service, *not* a group/team of people. * [[FollowAction]]: Unlike FollowAction,"
     "RegisterAction doesn't imply that the agent is expecting to poll for updates from the"
     "object. * [[SubscribeAction]]: Unlike SubscribeAction, RegisterAction doesn't"
     "imply that the agent is expecting updates from the object.

    See: https://schema.org/RegisterAction
    Model depth: 4
    """
    type_: str = Field(default="RegisterAction", alias='@type', const=True)
    



class CommunityHealth(MedicalSpecialty, MedicalBusiness):
    """A field of public health focusing on improving health characteristics of a defined population"
     "in relation with their geographical or environment areas.

    See: https://schema.org/CommunityHealth
    Model depth: 5
    """
    type_: str = Field(default="CommunityHealth", alias='@type', const=True)
    



class LoanOrCredit(FinancialProduct):
    """A financial product for the loaning of an amount of money, or line of credit, under agreed"
     "terms and charges.

    See: https://schema.org/LoanOrCredit
    Model depth: 5
    """
    type_: str = Field(default="LoanOrCredit", alias='@type', const=True)
    requiredCollateral: Optional[Union[List[Union[str, Text, Thing]], str, Text, Thing]] = Field(
        default=None,
        description="Assets required to secure loan or credit repayments. It may take form of third party pledge,"
     "goods, financial instruments (cash, securities, etc.)",
    )
    loanType: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The type of a loan or credit.",
    )
    currency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217"
     "currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. \"USD\"; [Ticker"
     "symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,"
     "e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    renegotiableLoan: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether the terms for payment of interest can be renegotiated during the life of the loan.",
    )
    gracePeriod: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The period of time after any due date that the borrower has to fulfil its obligations before"
     "a default (failure to pay) is deemed to have occurred.",
    )
    loanTerm: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The duration of the loan or credit agreement.",
    )
    amount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money.",
    )
    loanRepaymentForm: Optional[Union[List[Union[RepaymentSpecification, str]], RepaymentSpecification, str]] = Field(
        default=None,
        description="A form of paying back money previously borrowed from a lender. Repayment usually takes"
     "the form of periodic payments that normally include part principal plus interest in"
     "each payment.",
    )
    recourseLoan: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="The only way you get the money back in the event of default is the security. Recourse is"
     "where you still have the opportunity to go back to the borrower for the rest of the money.",
    )
    



class MortgageLoan(LoanOrCredit):
    """A loan in which property or real estate is used as collateral. (A loan securitized against"
     "some real estate.)

    See: https://schema.org/MortgageLoan
    Model depth: 6
    """
    type_: str = Field(default="MortgageLoan", alias='@type', const=True)
    loanMortgageMandateAmount: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="Amount of mortgage mandate that can be converted into a proper mortgage at a later stage.",
    )
    domiciledMortgage: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether borrower is a resident of the jurisdiction where the property is located.",
    )
    



class Comment(CreativeWork):
    """A comment on an item - for example, a comment on a blog post. The comment's content is expressed"
     "via the [[text]] property, and its topic via [[about]], properties shared with all CreativeWorks.

    See: https://schema.org/Comment
    Model depth: 3
    """
    type_: str = Field(default="Comment", alias='@type', const=True)
    parentItem: Optional[Union[List[Union[Comment, str]], Comment, str]] = Field(
        default=None,
        description="The parent of a question, answer or item in general.",
    )
    downvoteCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of downvotes this question, answer or comment has received from the community.",
    )
    upvoteCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of upvotes this question, answer or comment has received from the community.",
    )
    



class CorrectionComment(Comment):
    """A [[comment]] that corrects [[CreativeWork]].

    See: https://schema.org/CorrectionComment
    Model depth: 4
    """
    type_: str = Field(default="CorrectionComment", alias='@type', const=True)
    



class BusStop(CivicStructure):
    """A bus stop.

    See: https://schema.org/BusStop
    Model depth: 4
    """
    type_: str = Field(default="BusStop", alias='@type', const=True)
    



class OfficeEquipmentStore(Store):
    """An office equipment store.

    See: https://schema.org/OfficeEquipmentStore
    Model depth: 5
    """
    type_: str = Field(default="OfficeEquipmentStore", alias='@type', const=True)
    



class MisconceptionsHealthAspect(HealthAspectEnumeration):
    """Content about common misconceptions and myths that are related to a topic.

    See: https://schema.org/MisconceptionsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="MisconceptionsHealthAspect", alias='@type', const=True)
    



class WearableMeasurementHeight(WearableMeasurementTypeEnumeration):
    """Measurement of the height, for example the heel height of a shoe

    See: https://schema.org/WearableMeasurementHeight
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementHeight", alias='@type', const=True)
    



class PrependAction(InsertAction):
    """The act of inserting at the beginning if an ordered collection.

    See: https://schema.org/PrependAction
    Model depth: 6
    """
    type_: str = Field(default="PrependAction", alias='@type', const=True)
    



class Appearance(PhysicalExam):
    """Appearance assessment with clinical examination.

    See: https://schema.org/Appearance
    Model depth: 5
    """
    type_: str = Field(default="Appearance", alias='@type', const=True)
    



class Resort(LodgingBusiness):
    """A resort is a place used for relaxation or recreation, attracting visitors for holidays"
     "or vacations. Resorts are places, towns or sometimes commercial establishments operated"
     "by a single company (source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/Resort\">http://en.wikipedia.org/wiki/Resort</a>)."
     "<br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated document on the"
     "use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Resort
    Model depth: 5
    """
    type_: str = Field(default="Resort", alias='@type', const=True)
    



class SkiResort(Resort, SportsActivityLocation):
    """A ski resort.

    See: https://schema.org/SkiResort
    Model depth: 5
    """
    type_: str = Field(default="SkiResort", alias='@type', const=True)
    



class MedicalTrial(MedicalStudy):
    """A medical trial is a type of medical study that uses a scientific process to compare the"
     "safety and efficacy of medical therapies or medical procedures. In general, medical"
     "trials are controlled and subjects are allocated at random to the different treatment"
     "and/or control groups.

    See: https://schema.org/MedicalTrial
    Model depth: 4
    """
    type_: str = Field(default="MedicalTrial", alias='@type', const=True)
    trialDesign: Optional[Union[List[Union[MedicalTrialDesign, str]], MedicalTrialDesign, str]] = Field(
        default=None,
        description="Specifics about the trial design (enumerated).",
    )
    



class Nonprofit501c7(USNonprofitType):
    """Nonprofit501c7: Non-profit type referring to Social and Recreational Clubs.

    See: https://schema.org/Nonprofit501c7
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c7", alias='@type', const=True)
    



class DanceGroup(PerformingGroup):
    """A dance group&#x2014;for example, the Alvin Ailey Dance Theater or Riverdance.

    See: https://schema.org/DanceGroup
    Model depth: 4
    """
    type_: str = Field(default="DanceGroup", alias='@type', const=True)
    



class Photograph(CreativeWork):
    """A photograph.

    See: https://schema.org/Photograph
    Model depth: 3
    """
    type_: str = Field(default="Photograph", alias='@type', const=True)
    



class HousePainter(HomeAndConstructionBusiness):
    """A house painting service.

    See: https://schema.org/HousePainter
    Model depth: 5
    """
    type_: str = Field(default="HousePainter", alias='@type', const=True)
    



class OrderProblem(OrderStatus):
    """OrderStatus representing that there is a problem with the order.

    See: https://schema.org/OrderProblem
    Model depth: 6
    """
    type_: str = Field(default="OrderProblem", alias='@type', const=True)
    



class Nonprofit501a(USNonprofitType):
    """Nonprofit501a: Non-profit type referring to Farmers’ Cooperative Associations.

    See: https://schema.org/Nonprofit501a
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501a", alias='@type', const=True)
    



class DiscussionForumPosting(SocialMediaPosting):
    """A posting to a discussion forum.

    See: https://schema.org/DiscussionForumPosting
    Model depth: 5
    """
    type_: str = Field(default="DiscussionForumPosting", alias='@type', const=True)
    



class CohortStudy(MedicalObservationalStudyDesign):
    """Also known as a panel study. A cohort study is a form of longitudinal study used in medicine"
     "and social science. It is one type of study design and should be compared with a cross-sectional"
     "study. A cohort is a group of people who share a common characteristic or experience within"
     "a defined period (e.g., are born, leave school, lose their job, are exposed to a drug or"
     "a vaccine, etc.). The comparison group may be the general population from which the cohort"
     "is drawn, or it may be another cohort of persons thought to have had little or no exposure"
     "to the substance under investigation, but otherwise similar. Alternatively, subgroups"
     "within the cohort may be compared with each other.

    See: https://schema.org/CohortStudy
    Model depth: 6
    """
    type_: str = Field(default="CohortStudy", alias='@type', const=True)
    



class Wednesday(DayOfWeek):
    """The day of the week between Tuesday and Thursday.

    See: https://schema.org/Wednesday
    Model depth: 5
    """
    type_: str = Field(default="Wednesday", alias='@type', const=True)
    



class UnclassifiedAdultConsideration(AdultOrientedEnumeration):
    """The item is suitable only for adults, without indicating why. Due to widespread use of"
     "\"adult\" as a euphemism for \"sexual\", many such items are likely suited also for the"
     "SexualContentConsideration code.

    See: https://schema.org/UnclassifiedAdultConsideration
    Model depth: 5
    """
    type_: str = Field(default="UnclassifiedAdultConsideration", alias='@type', const=True)
    



class TransitMap(MapCategoryType):
    """A transit map.

    See: https://schema.org/TransitMap
    Model depth: 5
    """
    type_: str = Field(default="TransitMap", alias='@type', const=True)
    



class RealEstateListing(WebPage):
    """A [[RealEstateListing]] is a listing that describes one or more real-estate [[Offer]]s"
     "(whose [[businessFunction]] is typically to lease out, or to sell). The [[RealEstateListing]]"
     "type itself represents the overall listing, as manifested in some [[WebPage]].

    See: https://schema.org/RealEstateListing
    Model depth: 4
    """
    type_: str = Field(default="RealEstateListing", alias='@type', const=True)
    leaseLength: Optional[Union[List[Union[Duration, QuantitativeValue, str]], Duration, QuantitativeValue, str]] = Field(
        default=None,
        description="Length of the lease for some [[Accommodation]], either particular to some [[Offer]]"
     "or in some cases intrinsic to the property.",
    )
    datePosted: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Publication date of an online listing.",
    )
    



class SellAction(TradeAction):
    """The act of taking money from a buyer in exchange for goods or services rendered. An agent"
     "sells an object, product, or service to a buyer for a price. Reciprocal of BuyAction.

    See: https://schema.org/SellAction
    Model depth: 4
    """
    type_: str = Field(default="SellAction", alias='@type', const=True)
    buyer: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant/person/organization that bought the"
     "object.",
    )
    warrantyPromise: Optional[Union[List[Union[WarrantyPromise, str]], WarrantyPromise, str]] = Field(
        default=None,
        description="The warranty promise(s) included in the offer.",
    )
    



class ShareAction(CommunicateAction):
    """The act of distributing content to people for their amusement or edification.

    See: https://schema.org/ShareAction
    Model depth: 5
    """
    type_: str = Field(default="ShareAction", alias='@type', const=True)
    



class Bakery(FoodEstablishment):
    """A bakery.

    See: https://schema.org/Bakery
    Model depth: 5
    """
    type_: str = Field(default="Bakery", alias='@type', const=True)
    



class WholesaleStore(Store):
    """A wholesale store.

    See: https://schema.org/WholesaleStore
    Model depth: 5
    """
    type_: str = Field(default="WholesaleStore", alias='@type', const=True)
    



class AllocateAction(OrganizeAction):
    """The act of organizing tasks/objects/events by associating resources to it.

    See: https://schema.org/AllocateAction
    Model depth: 4
    """
    type_: str = Field(default="AllocateAction", alias='@type', const=True)
    



class RejectAction(AllocateAction):
    """The act of rejecting to/adopting an object. Related actions: * [[AcceptAction]]: The"
     "antonym of RejectAction.

    See: https://schema.org/RejectAction
    Model depth: 5
    """
    type_: str = Field(default="RejectAction", alias='@type', const=True)
    



class WarrantyScope(Enumeration):
    """A range of services that will be provided to a customer free of charge in case of a defect"
     "or malfunction of a product. Commonly used values: * http://purl.org/goodrelations/v1#Labor-BringIn"
     "* http://purl.org/goodrelations/v1#PartsAndLabor-BringIn * http://purl.org/goodrelations/v1#PartsAndLabor-PickUp

    See: https://schema.org/WarrantyScope
    Model depth: 4
    """
    type_: str = Field(default="WarrantyScope", alias='@type', const=True)
    



class SpeakableSpecification(Intangible):
    """A SpeakableSpecification indicates (typically via [[xpath]] or [[cssSelector]])"
     "sections of a document that are highlighted as particularly [[speakable]]. Instances"
     "of this type are expected to be used primarily as values of the [[speakable]] property.

    See: https://schema.org/SpeakableSpecification
    Model depth: 3
    """
    type_: str = Field(default="SpeakableSpecification", alias='@type', const=True)
    xpath: Optional[Union[List[Union[str, XPathType]], str, XPathType]] = Field(
        default=None,
        description="An XPath, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the latter"
     "case, multiple matches within a page can constitute a single conceptual \"Web page element\".",
    )
    cssSelector: Optional[Union[List[Union[str, CssSelectorType]], str, CssSelectorType]] = Field(
        default=None,
        description="A CSS selector, e.g. of a [[SpeakableSpecification]] or [[WebPageElement]]. In the"
     "latter case, multiple matches within a page can constitute a single conceptual \"Web"
     "page element\".",
    )
    



class DepartmentStore(Store):
    """A department store.

    See: https://schema.org/DepartmentStore
    Model depth: 5
    """
    type_: str = Field(default="DepartmentStore", alias='@type', const=True)
    



class GasStation(AutomotiveBusiness):
    """A gas station.

    See: https://schema.org/GasStation
    Model depth: 5
    """
    type_: str = Field(default="GasStation", alias='@type', const=True)
    



class MotorcycleDealer(AutomotiveBusiness):
    """A motorcycle dealer.

    See: https://schema.org/MotorcycleDealer
    Model depth: 5
    """
    type_: str = Field(default="MotorcycleDealer", alias='@type', const=True)
    



class OfferCatalog(ItemList):
    """An OfferCatalog is an ItemList that contains related Offers and/or further OfferCatalogs"
     "that are offeredBy the same provider.

    See: https://schema.org/OfferCatalog
    Model depth: 4
    """
    type_: str = Field(default="OfferCatalog", alias='@type', const=True)
    



class GeneralContractor(HomeAndConstructionBusiness):
    """A general contractor.

    See: https://schema.org/GeneralContractor
    Model depth: 5
    """
    type_: str = Field(default="GeneralContractor", alias='@type', const=True)
    



class Online(GameServerStatus):
    """Game server status: Online. Server is available.

    See: https://schema.org/Online
    Model depth: 6
    """
    type_: str = Field(default="Online", alias='@type', const=True)
    



class Observation(Intangible):
    """Instances of the class [[Observation]] are used to specify observations about an entity"
     "(which may or may not be an instance of a [[StatisticalPopulation]]), at a particular"
     "time. The principal properties of an [[Observation]] are [[observedNode]], [[measuredProperty]],"
     "[[measuredValue]] (or [[median]], etc.) and [[observationDate]] ([[measuredProperty]]"
     "properties can, but need not always, be W3C RDF Data Cube \"measure properties\", as"
     "in the [lifeExpectancy example](https://www.w3.org/TR/vocab-data-cube/#dsd-example))."
     "See also [[StatisticalPopulation]], and the [data and datasets](/docs/data-and-datasets.html)"
     "overview for more details.

    See: https://schema.org/Observation
    Model depth: 3
    """
    type_: str = Field(default="Observation", alias='@type', const=True)
    observedNode: Optional[Union[List[Union[StatisticalPopulation, str]], StatisticalPopulation, str]] = Field(
        default=None,
        description="The observedNode of an [[Observation]], often a [[StatisticalPopulation]].",
    )
    marginOfError: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="A marginOfError for an [[Observation]].",
    )
    measuredValue: Optional[Union[List[Union[DataType, str]], DataType, str]] = Field(
        default=None,
        description="The measuredValue of an [[Observation]].",
    )
    observationDate: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The observationDate of an [[Observation]].",
    )
    measuredProperty: Optional[Union[List[Union[Property, str]], Property, str]] = Field(
        default=None,
        description="The measuredProperty of an [[Observation]], either a schema.org property, a property"
     "from other RDF-compatible systems, e.g. W3C RDF Data Cube, or schema.org extensions"
     "such as [GS1's](https://www.gs1.org/voc/?show=properties).",
    )
    



class DefinedTerm(Intangible):
    """A word, name, acronym, phrase, etc. with a formal definition. Often used in the context"
     "of category or subject classification, glossaries or dictionaries, product or creative"
     "work types, etc. Use the name property for the term being defined, use termCode if the"
     "term has an alpha-numeric code allocated, use description to provide the definition"
     "of the term.

    See: https://schema.org/DefinedTerm
    Model depth: 3
    """
    type_: str = Field(default="DefinedTerm", alias='@type', const=True)
    inDefinedTermSet: Optional[Union[List[Union[AnyUrl, URL, DefinedTermSet, str]], AnyUrl, URL, DefinedTermSet, str]] = Field(
        default=None,
        description="A [[DefinedTermSet]] that contains this term.",
    )
    termCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A code that identifies this [[DefinedTerm]] within a [[DefinedTermSet]]",
    )
    



class CategoryCode(DefinedTerm):
    """A Category Code.

    See: https://schema.org/CategoryCode
    Model depth: 4
    """
    type_: str = Field(default="CategoryCode", alias='@type', const=True)
    codeValue: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short textual code that uniquely identifies the value.",
    )
    inCodeSet: Optional[Union[List[Union[AnyUrl, URL, CategoryCodeSet, str]], AnyUrl, URL, CategoryCodeSet, str]] = Field(
        default=None,
        description="A [[CategoryCodeSet]] that contains this category code.",
    )
    



class DrinkAction(ConsumeAction):
    """The act of swallowing liquids.

    See: https://schema.org/DrinkAction
    Model depth: 4
    """
    type_: str = Field(default="DrinkAction", alias='@type', const=True)
    



class Nonprofit501c28(USNonprofitType):
    """Nonprofit501c28: Non-profit type referring to National Railroad Retirement Investment"
     "Trusts.

    See: https://schema.org/Nonprofit501c28
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c28", alias='@type', const=True)
    



class Report(Article):
    """A Report generated by governmental or non-governmental organization.

    See: https://schema.org/Report
    Model depth: 4
    """
    type_: str = Field(default="Report", alias='@type', const=True)
    reportNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The number or other unique designator assigned to a Report by the publishing organization.",
    )
    



class OriginalShippingFees(ReturnFeesEnumeration):
    """Specifies that the customer must pay the original shipping costs when returning a product.

    See: https://schema.org/OriginalShippingFees
    Model depth: 5
    """
    type_: str = Field(default="OriginalShippingFees", alias='@type', const=True)
    



class DaySpa(HealthAndBeautyBusiness):
    """A day spa.

    See: https://schema.org/DaySpa
    Model depth: 5
    """
    type_: str = Field(default="DaySpa", alias='@type', const=True)
    



class Geriatric(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that is concerned with the diagnosis and treatment"
     "of diseases, debilities and provision of care to the aged.

    See: https://schema.org/Geriatric
    Model depth: 5
    """
    type_: str = Field(default="Geriatric", alias='@type', const=True)
    



class AppendAction(InsertAction):
    """The act of inserting at the end if an ordered collection.

    See: https://schema.org/AppendAction
    Model depth: 6
    """
    type_: str = Field(default="AppendAction", alias='@type', const=True)
    



class WearableSizeGroupWomens(WearableSizeGroupEnumeration):
    """Size group \"Womens\" for wearables.

    See: https://schema.org/WearableSizeGroupWomens
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupWomens", alias='@type', const=True)
    



class Occupation(Intangible):
    """A profession, may involve prolonged training and/or a formal qualification.

    See: https://schema.org/Occupation
    Model depth: 3
    """
    type_: str = Field(default="Occupation", alias='@type', const=True)
    occupationLocation: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The region/country for which this occupational description is appropriate. Note that"
     "educational requirements and qualifications can vary between jurisdictions.",
    )
    skills: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="A statement of knowledge, skill, ability, task or any other assertion expressing a competency"
     "that is desired or required to fulfill this role or to work in this occupation.",
    )
    experienceRequirements: Optional[Union[List[Union[str, Text, OccupationalExperienceRequirements]], str, Text, OccupationalExperienceRequirements]] = Field(
        default=None,
        description="Description of skills and experience needed for the position or Occupation.",
    )
    qualifications: Optional[Union[List[Union[str, Text, EducationalOccupationalCredential]], str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="Specific qualifications required for this role or Occupation.",
    )
    educationRequirements: Optional[Union[List[Union[str, Text, EducationalOccupationalCredential]], str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="Educational background needed for the position or Occupation.",
    )
    estimatedSalary: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmountDistribution, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmountDistribution, MonetaryAmount, str]] = Field(
        default=None,
        description="An estimated salary for a job posting or occupation, based on a variety of variables including,"
     "but not limited to industry, job title, and location. Estimated salaries are often computed"
     "by outside organizations rather than the hiring organization, who may not have committed"
     "to the estimated value.",
    )
    occupationalCategory: Optional[Union[List[Union[str, Text, CategoryCode]], str, Text, CategoryCode]] = Field(
        default=None,
        description="A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html),"
     "[ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or"
     "similar, with the property repeated for each applicable value. Ideally the taxonomy"
     "should be identified, and both the textual label and formal code for the category should"
     "be provided. Note: for historical reasons, any textual label and formal code provided"
     "as a literal may be assumed to be from O*NET-SOC.",
    )
    responsibilities: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Responsibilities associated with this role or Occupation.",
    )
    



class RadiationTherapy(MedicalTherapy):
    """A process of care using radiation aimed at improving a health condition.

    See: https://schema.org/RadiationTherapy
    Model depth: 6
    """
    type_: str = Field(default="RadiationTherapy", alias='@type', const=True)
    



class BodyMeasurementHeight(BodyMeasurementTypeEnumeration):
    """Body height (measured between crown of head and soles of feet). Used, for example, to"
     "fit jackets.

    See: https://schema.org/BodyMeasurementHeight
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementHeight", alias='@type', const=True)
    



class OfferShippingDetails(StructuredValue):
    """OfferShippingDetails represents information about shipping destinations. Multiple"
     "of these entities can be used to represent different shipping rates for different destinations:"
     "One entity for Alaska/Hawaii. A different one for continental US. A different one for"
     "all France. Multiple of these entities can be used to represent different shipping costs"
     "and delivery times. Two entities that are identical but differ in rate and time: E.g."
     "Cheaper and slower: $5 in 5-7 days or Fast and expensive: $15 in 1-2 days.

    See: https://schema.org/OfferShippingDetails
    Model depth: 4
    """
    type_: str = Field(default="OfferShippingDetails", alias='@type', const=True)
    width: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The width of the item.",
    )
    shippingSettingsLink: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Link to a page containing [[ShippingRateSettings]] and [[DeliveryTimeSettings]]"
     "details.",
    )
    depth: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The depth of the item.",
    )
    shippingDestination: Optional[Union[List[Union[DefinedRegion, str]], DefinedRegion, str]] = Field(
        default=None,
        description="indicates (possibly multiple) shipping destinations. These can be defined in several"
     "ways, e.g. postalCode ranges.",
    )
    shippingLabel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within"
     "the context of a [[shippingSettingsLink]] cross-reference).",
    )
    height: Optional[Union[List[Union[QuantitativeValue, Distance, str]], QuantitativeValue, Distance, str]] = Field(
        default=None,
        description="The height of the item.",
    )
    doesNotShip: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates when shipping to a particular [[shippingDestination]] is not available.",
    )
    weight: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The weight of the product or person.",
    )
    deliveryTime: Optional[Union[List[Union[ShippingDeliveryTime, str]], ShippingDeliveryTime, str]] = Field(
        default=None,
        description="The total delay between the receipt of the order and the goods reaching the final customer.",
    )
    shippingOrigin: Optional[Union[List[Union[DefinedRegion, str]], DefinedRegion, str]] = Field(
        default=None,
        description="Indicates the origin of a shipment, i.e. where it should be coming from.",
    )
    transitTimeLabel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Label to match an [[OfferShippingDetails]] with a [[DeliveryTimeSettings]] (within"
     "the context of a [[shippingSettingsLink]] cross-reference).",
    )
    shippingRate: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="The shipping rate is the cost of shipping to the specified destination. Typically, the"
     "maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.",
    )
    



class Nonprofit501c5(USNonprofitType):
    """Nonprofit501c5: Non-profit type referring to Labor, Agricultural and Horticultural"
     "Organizations.

    See: https://schema.org/Nonprofit501c5
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c5", alias='@type', const=True)
    



class Nonprofit501c25(USNonprofitType):
    """Nonprofit501c25: Non-profit type referring to Real Property Title-Holding Corporations"
     "or Trusts with Multiple Parents.

    See: https://schema.org/Nonprofit501c25
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c25", alias='@type', const=True)
    



class MedicalResearcher(MedicalAudienceType):
    """Medical researchers.

    See: https://schema.org/MedicalResearcher
    Model depth: 6
    """
    type_: str = Field(default="MedicalResearcher", alias='@type', const=True)
    



class RadioSeries(CreativeWorkSeries):
    """CreativeWorkSeries dedicated to radio broadcast and associated online delivery.

    See: https://schema.org/RadioSeries
    Model depth: 4
    """
    type_: str = Field(default="RadioSeries", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    containsSeason: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season that is part of the media series.",
    )
    numberOfSeasons: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of seasons in this series.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    season: Optional[Union[List[Union[AnyUrl, URL, CreativeWorkSeason, str]], AnyUrl, URL, CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    episodes: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV/radio series or season.",
    )
    seasons: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    episode: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV, radio or game media within a series or season.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    numberOfEpisodes: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of episodes in this season or series.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class MedicalSymptom(MedicalSignOrSymptom):
    """Any complaint sensed and expressed by the patient (therefore defined as subjective)"
     "like stomachache, lower-back pain, or fatigue.

    See: https://schema.org/MedicalSymptom
    Model depth: 5
    """
    type_: str = Field(default="MedicalSymptom", alias='@type', const=True)
    



class Nonprofit501c1(USNonprofitType):
    """Nonprofit501c1: Non-profit type referring to Corporations Organized Under Act of"
     "Congress, including Federal Credit Unions and National Farm Loan Associations.

    See: https://schema.org/Nonprofit501c1
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c1", alias='@type', const=True)
    



class TechArticle(Article):
    """A technical article - Example: How-to (task) topics, step-by-step, procedural troubleshooting,"
     "specifications, etc.

    See: https://schema.org/TechArticle
    Model depth: 4
    """
    type_: str = Field(default="TechArticle", alias='@type', const=True)
    proficiencyLevel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Proficiency needed for this content; expected values: 'Beginner', 'Expert'.",
    )
    dependencies: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Prerequisites needed to fulfill steps in article.",
    )
    



class APIReference(TechArticle):
    """Reference documentation for application programming interfaces (APIs).

    See: https://schema.org/APIReference
    Model depth: 5
    """
    type_: str = Field(default="APIReference", alias='@type', const=True)
    programmingModel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates whether API is managed or unmanaged.",
    )
    targetPlatform: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Type of app development: phone, Metro style, desktop, XBox, etc.",
    )
    assembly: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Library file name, e.g., mscorlib.dll, system.web.dll.",
    )
    assemblyVersion: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Associated product/technology version. E.g., .NET Framework 4.5.",
    )
    executableLibraryName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Library file name, e.g., mscorlib.dll, system.web.dll.",
    )
    



class Fungus(InfectiousAgentClass):
    """Pathogenic fungus.

    See: https://schema.org/Fungus
    Model depth: 6
    """
    type_: str = Field(default="Fungus", alias='@type', const=True)
    



class MedicalRiskEstimator(MedicalEntity):
    """Any rule set or interactive tool for estimating the risk of developing a complication"
     "or condition.

    See: https://schema.org/MedicalRiskEstimator
    Model depth: 3
    """
    type_: str = Field(default="MedicalRiskEstimator", alias='@type', const=True)
    estimatesRiskOf: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="The condition, complication, or symptom whose risk is being estimated.",
    )
    includedRiskFactor: Optional[Union[List[Union[MedicalRiskFactor, str]], MedicalRiskFactor, str]] = Field(
        default=None,
        description="A modifiable or non-modifiable risk factor included in the calculation, e.g. age, coexisting"
     "condition.",
    )
    



class MedicalRiskScore(MedicalRiskEstimator):
    """A simple system that adds up the number of risk factors to yield a score that is associated"
     "with prognosis, e.g. CHAD score, TIMI risk score.

    See: https://schema.org/MedicalRiskScore
    Model depth: 4
    """
    type_: str = Field(default="MedicalRiskScore", alias='@type', const=True)
    algorithm: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The algorithm or rules to follow to compute the score.",
    )
    



class Hotel(LodgingBusiness):
    """A hotel is an establishment that provides lodging paid on a short-term basis (source:"
     "Wikipedia, the free encyclopedia, see http://en.wikipedia.org/wiki/Hotel). <br"
     "/><br /> See also the <a href=\"/docs/hotels.html\">dedicated document on the use"
     "of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Hotel
    Model depth: 5
    """
    type_: str = Field(default="Hotel", alias='@type', const=True)
    



class AskAction(CommunicateAction):
    """The act of posing a question / favor to someone. Related actions: * [[ReplyAction]]:"
     "Appears generally as a response to AskAction.

    See: https://schema.org/AskAction
    Model depth: 5
    """
    type_: str = Field(default="AskAction", alias='@type', const=True)
    question: Optional[Union[List[Union[Question, str]], Question, str]] = Field(
        default=None,
        description="A sub property of object. A question.",
    )
    



class MediaGallery(CollectionPage):
    """Web page type: Media gallery page. A mixed-media page that can contain media such as images,"
     "videos, and other multimedia.

    See: https://schema.org/MediaGallery
    Model depth: 5
    """
    type_: str = Field(default="MediaGallery", alias='@type', const=True)
    



class BodyMeasurementHand(BodyMeasurementTypeEnumeration):
    """Maximum hand girth (measured over the knuckles of the open right hand excluding thumb,"
     "fingers together). Used, for example, to fit gloves.

    See: https://schema.org/BodyMeasurementHand
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementHand", alias='@type', const=True)
    



class SchoolDistrict(AdministrativeArea):
    """A School District is an administrative area for the administration of schools.

    See: https://schema.org/SchoolDistrict
    Model depth: 4
    """
    type_: str = Field(default="SchoolDistrict", alias='@type', const=True)
    



class LinkRole(Role):
    """A Role that represents a Web link, e.g. as expressed via the 'url' property. Its linkRelationship"
     "property can indicate URL-based and plain textual link types, e.g. those in IANA link"
     "registry or others such as 'amphtml'. This structure provides a placeholder where details"
     "from HTML's link element can be represented outside of HTML, e.g. in JSON-LD feeds.

    See: https://schema.org/LinkRole
    Model depth: 4
    """
    type_: str = Field(default="LinkRole", alias='@type', const=True)
    linkRelationship: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Indicates the relationship type of a Web link.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    



class TVEpisode(Episode):
    """A TV episode which can be part of a series or season.

    See: https://schema.org/TVEpisode
    Model depth: 4
    """
    type_: str = Field(default="TVEpisode", alias='@type', const=True)
    partOfTVSeries: Optional[Union[List[Union[TVSeries, str]], TVSeries, str]] = Field(
        default=None,
        description="The TV series to which this episode or season belongs.",
    )
    titleEIDR: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]]"
     "representing at the most general/abstract level, a work of film or television. For example,"
     "the motion picture known as \"Ghostbusters\" has a titleEIDR of \"10.5240/7EC7-228A-510A-053E-CBB8-J\"."
     "This title (or work) may have several variants, which EIDR calls \"edits\". See [[editEIDR]]."
     "Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and"
     "their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general"
     "description), or alongside [[editEIDR]] for a more edit-specific description.",
    )
    subtitleLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    



class FMRadioChannel(RadioChannel):
    """A radio channel that uses FM.

    See: https://schema.org/FMRadioChannel
    Model depth: 5
    """
    type_: str = Field(default="FMRadioChannel", alias='@type', const=True)
    



class WritePermission(DigitalDocumentPermissionType):
    """Permission to write or edit the document.

    See: https://schema.org/WritePermission
    Model depth: 5
    """
    type_: str = Field(default="WritePermission", alias='@type', const=True)
    



class Menu(CreativeWork):
    """A structured representation of food or drink items available from a FoodEstablishment.

    See: https://schema.org/Menu
    Model depth: 3
    """
    type_: str = Field(default="Menu", alias='@type', const=True)
    hasMenuSection: Optional[Union[List[Union[MenuSection, str]], MenuSection, str]] = Field(
        default=None,
        description="A subgrouping of the menu (by dishes, course, serving time period, etc.).",
    )
    hasMenuItem: Optional[Union[List[Union[MenuItem, str]], MenuItem, str]] = Field(
        default=None,
        description="A food or drink item contained in a menu or menu section.",
    )
    



class DownloadAction(TransferAction):
    """The act of downloading an object.

    See: https://schema.org/DownloadAction
    Model depth: 4
    """
    type_: str = Field(default="DownloadAction", alias='@type', const=True)
    



class UserTweets(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserTweets
    Model depth: 4
    """
    type_: str = Field(default="UserTweets", alias='@type', const=True)
    



class Anesthesia(MedicalSpecialty):
    """A specific branch of medical science that pertains to study of anesthetics and their"
     "application.

    See: https://schema.org/Anesthesia
    Model depth: 6
    """
    type_: str = Field(default="Anesthesia", alias='@type', const=True)
    



class WearableSizeSystemCN(WearableSizeSystemEnumeration):
    """Chinese size system for wearables.

    See: https://schema.org/WearableSizeSystemCN
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemCN", alias='@type', const=True)
    



class VinylFormat(MusicReleaseFormatType):
    """VinylFormat.

    See: https://schema.org/VinylFormat
    Model depth: 5
    """
    type_: str = Field(default="VinylFormat", alias='@type', const=True)
    



class FourWheelDriveConfiguration(DriveWheelConfigurationValue):
    """Four-wheel drive is a transmission layout where the engine primarily drives two wheels"
     "with a part-time four-wheel drive capability.

    See: https://schema.org/FourWheelDriveConfiguration
    Model depth: 6
    """
    type_: str = Field(default="FourWheelDriveConfiguration", alias='@type', const=True)
    



class PerformingArtsTheater(CivicStructure):
    """A theater or other performing art center.

    See: https://schema.org/PerformingArtsTheater
    Model depth: 4
    """
    type_: str = Field(default="PerformingArtsTheater", alias='@type', const=True)
    



class MedicalDevicePurpose(MedicalEnumeration):
    """Categories of medical devices, organized by the purpose or intended use of the device.

    See: https://schema.org/MedicalDevicePurpose
    Model depth: 5
    """
    type_: str = Field(default="MedicalDevicePurpose", alias='@type', const=True)
    



class Zoo(CivicStructure):
    """A zoo.

    See: https://schema.org/Zoo
    Model depth: 4
    """
    type_: str = Field(default="Zoo", alias='@type', const=True)
    



class BasicIncome(GovernmentBenefitsType):
    """BasicIncome: this is a benefit for basic income.

    See: https://schema.org/BasicIncome
    Model depth: 5
    """
    type_: str = Field(default="BasicIncome", alias='@type', const=True)
    



class Flexibility(PhysicalActivityCategory):
    """Physical activity that is engaged in to improve joint and muscle flexibility.

    See: https://schema.org/Flexibility
    Model depth: 5
    """
    type_: str = Field(default="Flexibility", alias='@type', const=True)
    



class JoinAction(InteractAction):
    """An agent joins an event/group with participants/friends at a location. Related actions:"
     "* [[RegisterAction]]: Unlike RegisterAction, JoinAction refers to joining a group/team"
     "of people. * [[SubscribeAction]]: Unlike SubscribeAction, JoinAction does not imply"
     "that you'll be receiving updates. * [[FollowAction]]: Unlike FollowAction, JoinAction"
     "does not imply that you'll be polling for updates.

    See: https://schema.org/JoinAction
    Model depth: 4
    """
    type_: str = Field(default="JoinAction", alias='@type', const=True)
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    



class IceCreamShop(FoodEstablishment):
    """An ice cream shop.

    See: https://schema.org/IceCreamShop
    Model depth: 5
    """
    type_: str = Field(default="IceCreamShop", alias='@type', const=True)
    



class HinduTemple(PlaceOfWorship):
    """A Hindu temple.

    See: https://schema.org/HinduTemple
    Model depth: 5
    """
    type_: str = Field(default="HinduTemple", alias='@type', const=True)
    



class NarcoticConsideration(AdultOrientedEnumeration):
    """Item is a narcotic as defined by the [1961 UN convention](https://www.incb.org/incb/en/narcotic-drugs/Yellowlist/yellow-list.html),"
     "for example marijuana or heroin.

    See: https://schema.org/NarcoticConsideration
    Model depth: 5
    """
    type_: str = Field(default="NarcoticConsideration", alias='@type', const=True)
    



class CancelAction(PlanAction):
    """The act of asserting that a future event/action is no longer going to happen. Related"
     "actions: * [[ConfirmAction]]: The antonym of CancelAction.

    See: https://schema.org/CancelAction
    Model depth: 5
    """
    type_: str = Field(default="CancelAction", alias='@type', const=True)
    



class RadioSeason(CreativeWorkSeason):
    """Season dedicated to radio broadcast and associated online delivery.

    See: https://schema.org/RadioSeason
    Model depth: 4
    """
    type_: str = Field(default="RadioSeason", alias='@type', const=True)
    



class Dentist(MedicalBusiness, MedicalOrganization, LocalBusiness):
    """A dentist.

    See: https://schema.org/Dentist
    Model depth: 4
    """
    type_: str = Field(default="Dentist", alias='@type', const=True)
    



class Nonprofit501c11(USNonprofitType):
    """Nonprofit501c11: Non-profit type referring to Teachers' Retirement Fund Associations.

    See: https://schema.org/Nonprofit501c11
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c11", alias='@type', const=True)
    



class DrugClass(MedicalEntity):
    """A class of medical drugs, e.g., statins. Classes can represent general pharmacological"
     "class, common mechanisms of action, common physiological effects, etc.

    See: https://schema.org/DrugClass
    Model depth: 3
    """
    type_: str = Field(default="DrugClass", alias='@type', const=True)
    drug: Optional[Union[List[Union[Drug, str]], Drug, str]] = Field(
        default=None,
        description="Specifying a drug or medicine used in a medication procedure.",
    )
    



class Musculoskeletal(MedicalSpecialty):
    """A specific branch of medical science that pertains to diagnosis and treatment of disorders"
     "of muscles, ligaments and skeletal system.

    See: https://schema.org/Musculoskeletal
    Model depth: 6
    """
    type_: str = Field(default="Musculoskeletal", alias='@type', const=True)
    



class CityHall(GovernmentBuilding):
    """A city hall.

    See: https://schema.org/CityHall
    Model depth: 5
    """
    type_: str = Field(default="CityHall", alias='@type', const=True)
    



class PharmacySpecialty(MedicalSpecialty):
    """The practice or art and science of preparing and dispensing drugs and medicines.

    See: https://schema.org/PharmacySpecialty
    Model depth: 6
    """
    type_: str = Field(default="PharmacySpecialty", alias='@type', const=True)
    



class HowToDirection(ListItem, CreativeWork):
    """A direction indicating a single action to do in the instructions for how to achieve a result.

    See: https://schema.org/HowToDirection
    Model depth: 3
    """
    type_: str = Field(default="HowToDirection", alias='@type', const=True)
    prepTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The length of time it takes to prepare the items to be used in instructions or a direction,"
     "in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    afterMedia: Optional[Union[List[Union[AnyUrl, URL, MediaObject, str]], AnyUrl, URL, MediaObject, str]] = Field(
        default=None,
        description="A media object representing the circumstances after performing this direction.",
    )
    beforeMedia: Optional[Union[List[Union[AnyUrl, URL, MediaObject, str]], AnyUrl, URL, MediaObject, str]] = Field(
        default=None,
        description="A media object representing the circumstances before performing this direction.",
    )
    tool: Optional[Union[List[Union[str, Text, HowToTool]], str, Text, HowToTool]] = Field(
        default=None,
        description="A sub property of instrument. An object used (but not consumed) when performing instructions"
     "or a direction.",
    )
    duringMedia: Optional[Union[List[Union[AnyUrl, URL, MediaObject, str]], AnyUrl, URL, MediaObject, str]] = Field(
        default=None,
        description="A media object representing the circumstances while performing this direction.",
    )
    performTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The length of time it takes to perform instructions or a direction (not including time"
     "to prepare the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    supply: Optional[Union[List[Union[str, Text, HowToSupply]], str, Text, HowToSupply]] = Field(
        default=None,
        description="A sub-property of instrument. A supply consumed when performing instructions or a direction.",
    )
    totalTime: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The total time required to perform instructions or a direction (including time to prepare"
     "the supplies), in [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    



class BuyAction(TradeAction):
    """The act of giving money to a seller in exchange for goods or services rendered. An agent"
     "buys an object, product, or service from a seller for a price. Reciprocal of SellAction.

    See: https://schema.org/BuyAction
    Model depth: 4
    """
    type_: str = Field(default="BuyAction", alias='@type', const=True)
    seller: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity which offers (sells / leases / lends / loans) the services / goods. A seller may"
     "also be a provider.",
    )
    warrantyPromise: Optional[Union[List[Union[WarrantyPromise, str]], WarrantyPromise, str]] = Field(
        default=None,
        description="The warranty promise(s) included in the offer.",
    )
    vendor: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="'vendor' is an earlier term for 'seller'.",
    )
    



class Nonprofit501e(USNonprofitType):
    """Nonprofit501e: Non-profit type referring to Cooperative Hospital Service Organizations.

    See: https://schema.org/Nonprofit501e
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501e", alias='@type', const=True)
    



class HearingImpairedSupported(ContactPointOption):
    """Uses devices to support users with hearing impairments.

    See: https://schema.org/HearingImpairedSupported
    Model depth: 5
    """
    type_: str = Field(default="HearingImpairedSupported", alias='@type', const=True)
    



class Nonprofit501c3(USNonprofitType):
    """Nonprofit501c3: Non-profit type referring to Religious, Educational, Charitable,"
     "Scientific, Literary, Testing for Public Safety, Fostering National or International"
     "Amateur Sports Competition, or Prevention of Cruelty to Children or Animals Organizations.

    See: https://schema.org/Nonprofit501c3
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c3", alias='@type', const=True)
    



class Manuscript(CreativeWork):
    """A book, document, or piece of music written by hand rather than typed or printed.

    See: https://schema.org/Manuscript
    Model depth: 3
    """
    type_: str = Field(default="Manuscript", alias='@type', const=True)
    



class CompilationAlbum(MusicAlbumProductionType):
    """CompilationAlbum.

    See: https://schema.org/CompilationAlbum
    Model depth: 5
    """
    type_: str = Field(default="CompilationAlbum", alias='@type', const=True)
    



class BookSeries(CreativeWorkSeries):
    """A series of books. Included books can be indicated with the hasPart property.

    See: https://schema.org/BookSeries
    Model depth: 4
    """
    type_: str = Field(default="BookSeries", alias='@type', const=True)
    



class ReturnAtKiosk(ReturnMethodEnumeration):
    """Specifies that product returns must be made at a kiosk.

    See: https://schema.org/ReturnAtKiosk
    Model depth: 5
    """
    type_: str = Field(default="ReturnAtKiosk", alias='@type', const=True)
    



class TouristDestination(Place):
    """A tourist destination. In principle any [[Place]] can be a [[TouristDestination]]"
     "from a [[City]], Region or [[Country]] to an [[AmusementPark]] or [[Hotel]]. This Type"
     "can be used on its own to describe a general [[TouristDestination]], or be used as an [[additionalType]]"
     "to add tourist relevant properties to any other [[Place]]. A [[TouristDestination]]"
     "is defined as a [[Place]] that contains, or is colocated with, one or more [[TouristAttraction]]s,"
     "often linked by a similar theme or interest to a particular [[touristType]]. The [UNWTO](http://www2.unwto.org/)"
     "defines Destination (main destination of a tourism trip) as the place visited that is"
     "central to the decision to take the trip. (See examples below.)

    See: https://schema.org/TouristDestination
    Model depth: 3
    """
    type_: str = Field(default="TouristDestination", alias='@type', const=True)
    includesAttraction: Optional[Union[List[Union[TouristAttraction, str]], TouristAttraction, str]] = Field(
        default=None,
        description="Attraction located at destination.",
    )
    touristType: Optional[Union[List[Union[str, Text, Audience]], str, Text, Audience]] = Field(
        default=None,
        description="Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular"
     "country, etc.",
    )
    



class RsvpResponseType(Enumeration):
    """RsvpResponseType is an enumeration type whose instances represent responding to an"
     "RSVP request.

    See: https://schema.org/RsvpResponseType
    Model depth: 4
    """
    type_: str = Field(default="RsvpResponseType", alias='@type', const=True)
    



class BroadcastService(Service):
    """A delivery service through which content is provided via broadcast over the air or online.

    See: https://schema.org/BroadcastService
    Model depth: 4
    """
    type_: str = Field(default="BroadcastService", alias='@type', const=True)
    hasBroadcastChannel: Optional[Union[List[Union[BroadcastChannel, str]], BroadcastChannel, str]] = Field(
        default=None,
        description="A broadcast channel of a broadcast service.",
    )
    parentService: Optional[Union[List[Union[BroadcastService, str]], BroadcastService, str]] = Field(
        default=None,
        description="A broadcast service to which the broadcast service may belong to such as regional variations"
     "of a national channel.",
    )
    broadcastAffiliateOf: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The media network(s) whose content is broadcast on this station.",
    )
    broadcaster: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The organization owning or operating the broadcast service.",
    )
    videoFormat: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).",
    )
    broadcastTimezone: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The timezone in [ISO 8601 format](http://en.wikipedia.org/wiki/ISO_8601) for which"
     "the service bases its broadcasts.",
    )
    broadcastDisplayName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name displayed in the channel guide. For many US affiliates, it is the network name.",
    )
    broadcastFrequency: Optional[Union[List[Union[str, Text, BroadcastFrequencySpecification]], str, Text, BroadcastFrequencySpecification]] = Field(
        default=None,
        description="The frequency used for over-the-air broadcasts. Numeric values or simple ranges, e.g."
     "87-99. In addition a shortcut idiom is supported for frequences of AM and FM radio channels,"
     "e.g. \"87 FM\".",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    area: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The area within which users can expect to reach the broadcast service.",
    )
    callSign: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A [callsign](https://en.wikipedia.org/wiki/Call_sign), as used in broadcasting"
     "and radio communications to identify people, radio and TV stations, or vehicles.",
    )
    



class RadioBroadcastService(BroadcastService):
    """A delivery service through which radio content is provided via broadcast over the air"
     "or online.

    See: https://schema.org/RadioBroadcastService
    Model depth: 5
    """
    type_: str = Field(default="RadioBroadcastService", alias='@type', const=True)
    



class MusicStore(Store):
    """A music store.

    See: https://schema.org/MusicStore
    Model depth: 5
    """
    type_: str = Field(default="MusicStore", alias='@type', const=True)
    



class InstallAction(ConsumeAction):
    """The act of installing an application.

    See: https://schema.org/InstallAction
    Model depth: 4
    """
    type_: str = Field(default="InstallAction", alias='@type', const=True)
    



class Nursing(MedicalSpecialty, MedicalBusiness):
    """A health profession of a person formally educated and trained in the care of the sick or"
     "infirm person.

    See: https://schema.org/Nursing
    Model depth: 5
    """
    type_: str = Field(default="Nursing", alias='@type', const=True)
    



class BarOrPub(FoodEstablishment):
    """A bar or pub.

    See: https://schema.org/BarOrPub
    Model depth: 5
    """
    type_: str = Field(default="BarOrPub", alias='@type', const=True)
    



class IndividualProduct(Product):
    """A single, identifiable product instance (e.g. a laptop with a particular serial number).

    See: https://schema.org/IndividualProduct
    Model depth: 3
    """
    type_: str = Field(default="IndividualProduct", alias='@type', const=True)
    serialNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The serial number or any alphanumeric identifier of a particular product. When attached"
     "to an offer, it is a shortcut for the serial number of the product included in the offer.",
    )
    



class SportsTeam(SportsOrganization):
    """Organization: Sports team.

    See: https://schema.org/SportsTeam
    Model depth: 4
    """
    type_: str = Field(default="SportsTeam", alias='@type', const=True)
    athlete: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person that acts as performing member of a sports team; a player as opposed to a coach.",
    )
    gender: Optional[Union[List[Union[str, Text, GenderType]], str, Text, GenderType]] = Field(
        default=None,
        description="Gender of something, typically a [[Person]], but possibly also fictional characters,"
     "animals, etc. While https://schema.org/Male and https://schema.org/Female may"
     "be used, text strings are also acceptable for people who do not identify as a binary gender."
     "The [[gender]] property can also be used in an extended sense to cover e.g. the gender"
     "of sports teams. As with the gender of individuals, we do not try to enumerate all possibilities."
     "A mixed-gender [[SportsTeam]] can be indicated with a text value of \"Mixed\".",
    )
    coach: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person that acts in a coaching role for a sports team.",
    )
    



class HairSalon(HealthAndBeautyBusiness):
    """A hair salon.

    See: https://schema.org/HairSalon
    Model depth: 5
    """
    type_: str = Field(default="HairSalon", alias='@type', const=True)
    



class UseAction(ConsumeAction):
    """The act of applying an object to its intended purpose.

    See: https://schema.org/UseAction
    Model depth: 4
    """
    type_: str = Field(default="UseAction", alias='@type', const=True)
    



class SoundtrackAlbum(MusicAlbumProductionType):
    """SoundtrackAlbum.

    See: https://schema.org/SoundtrackAlbum
    Model depth: 5
    """
    type_: str = Field(default="SoundtrackAlbum", alias='@type', const=True)
    



class HowToStep(ListItem, ItemList, CreativeWork):
    """A step in the instructions for how to achieve a result. It is an ordered list with HowToDirection"
     "and/or HowToTip items.

    See: https://schema.org/HowToStep
    Model depth: 3
    """
    type_: str = Field(default="HowToStep", alias='@type', const=True)
    



class HardwareStore(Store):
    """A hardware store.

    See: https://schema.org/HardwareStore
    Model depth: 5
    """
    type_: str = Field(default="HardwareStore", alias='@type', const=True)
    



class Virus(InfectiousAgentClass):
    """Pathogenic virus that causes viral infection.

    See: https://schema.org/Virus
    Model depth: 6
    """
    type_: str = Field(default="Virus", alias='@type', const=True)
    



class EndorsementRating(Rating):
    """An EndorsementRating is a rating that expresses some level of endorsement, for example"
     "inclusion in a \"critic's pick\" blog, a \"Like\" or \"+1\" on a social network. It can"
     "be considered the [[result]] of an [[EndorseAction]] in which the [[object]] of the"
     "action is rated positively by some [[agent]]. As is common elsewhere in schema.org,"
     "it is sometimes more useful to describe the results of such an action without explicitly"
     "describing the [[Action]]. An [[EndorsementRating]] may be part of a numeric scale"
     "or organized system, but this is not required: having an explicit type for indicating"
     "a positive, endorsement rating is particularly useful in the absence of numeric scales"
     "as it helps consumers understand that the rating is broadly positive.

    See: https://schema.org/EndorsementRating
    Model depth: 4
    """
    type_: str = Field(default="EndorsementRating", alias='@type', const=True)
    



class Brewery(FoodEstablishment):
    """Brewery.

    See: https://schema.org/Brewery
    Model depth: 5
    """
    type_: str = Field(default="Brewery", alias='@type', const=True)
    



class Country(AdministrativeArea):
    """A country.

    See: https://schema.org/Country
    Model depth: 4
    """
    type_: str = Field(default="Country", alias='@type', const=True)
    



class BoatTerminal(CivicStructure):
    """A terminal for boats, ships, and other water vessels.

    See: https://schema.org/BoatTerminal
    Model depth: 4
    """
    type_: str = Field(default="BoatTerminal", alias='@type', const=True)
    



class Play(CreativeWork):
    """A play is a form of literature, usually consisting of dialogue between characters, intended"
     "for theatrical performance rather than just reading. Note: A performance of a Play would"
     "be a [[TheaterEvent]] or [[BroadcastEvent]] - the *Play* being the [[workPerformed]].

    See: https://schema.org/Play
    Model depth: 3
    """
    type_: str = Field(default="Play", alias='@type', const=True)
    



class ParkingFacility(CivicStructure):
    """A parking lot or other parking facility.

    See: https://schema.org/ParkingFacility
    Model depth: 4
    """
    type_: str = Field(default="ParkingFacility", alias='@type', const=True)
    



class MedicalDevice(MedicalEntity):
    """Any object used in a medical capacity, such as to diagnose or treat a patient.

    See: https://schema.org/MedicalDevice
    Model depth: 3
    """
    type_: str = Field(default="MedicalDevice", alias='@type', const=True)
    postOp: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the postoperative procedures, care, and/or followups for this device.",
    )
    seriousAdverseOutcome: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="A possible serious complication and/or serious side effect of this therapy. Serious"
     "adverse outcomes include those that are life-threatening; result in death, disability,"
     "or permanent damage; require hospitalization or prolong existing hospitalization;"
     "cause congenital anomalies or birth defects; or jeopardize the patient and may require"
     "medical or surgical intervention to prevent one of the outcomes in this definition.",
    )
    preOp: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the workup, testing, and other preparations required before implanting"
     "this device.",
    )
    adverseOutcome: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="A possible complication and/or side effect of this therapy. If it is known that an adverse"
     "outcome is serious (resulting in death, disability, or permanent damage; requiring"
     "hospitalization; or otherwise life-threatening or requiring immediate medical attention),"
     "tag it as a seriousAdverseOutcome instead.",
    )
    procedure: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the procedure involved in setting up, using, and/or installing the"
     "device.",
    )
    contraindication: Optional[Union[List[Union[str, Text, MedicalContraindication]], str, Text, MedicalContraindication]] = Field(
        default=None,
        description="A contraindication for this therapy.",
    )
    



class Winery(FoodEstablishment):
    """A winery.

    See: https://schema.org/Winery
    Model depth: 5
    """
    type_: str = Field(default="Winery", alias='@type', const=True)
    



class CheckOutAction(CommunicateAction):
    """The act of an agent communicating (service provider, social media, etc) their departure"
     "of a previously reserved service (e.g. flight check-in) or place (e.g. hotel). Related"
     "actions: * [[CheckInAction]]: The antonym of CheckOutAction. * [[DepartAction]]:"
     "Unlike DepartAction, CheckOutAction implies that the agent is informing/confirming"
     "the end of a previously reserved service. * [[CancelAction]]: Unlike CancelAction,"
     "CheckOutAction implies that the agent is informing/confirming the end of a previously"
     "reserved service.

    See: https://schema.org/CheckOutAction
    Model depth: 5
    """
    type_: str = Field(default="CheckOutAction", alias='@type', const=True)
    



class ArchiveOrganization(LocalBusiness):
    """An organization with archival holdings. An organization which keeps and preserves"
     "archival material and typically makes it accessible to the public.

    See: https://schema.org/ArchiveOrganization
    Model depth: 4
    """
    type_: str = Field(default="ArchiveOrganization", alias='@type', const=True)
    archiveHeld: Optional[Union[List[Union[ArchiveComponent, str]], ArchiveComponent, str]] = Field(
        default=None,
        description="Collection, [fonds](https://en.wikipedia.org/wiki/Fonds), or item held, kept"
     "or maintained by an [[ArchiveOrganization]].",
    )
    



class PaymentPastDue(PaymentStatusType):
    """The payment is due and considered late.

    See: https://schema.org/PaymentPastDue
    Model depth: 6
    """
    type_: str = Field(default="PaymentPastDue", alias='@type', const=True)
    



class GroceryStore(Store):
    """A grocery store.

    See: https://schema.org/GroceryStore
    Model depth: 5
    """
    type_: str = Field(default="GroceryStore", alias='@type', const=True)
    



class EffectivenessHealthAspect(HealthAspectEnumeration):
    """Content about the effectiveness-related aspects of a health topic.

    See: https://schema.org/EffectivenessHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="EffectivenessHealthAspect", alias='@type', const=True)
    



class OccupationalTherapy(MedicalTherapy):
    """A treatment of people with physical, emotional, or social problems, using purposeful"
     "activity to help them overcome or learn to deal with their problems.

    See: https://schema.org/OccupationalTherapy
    Model depth: 6
    """
    type_: str = Field(default="OccupationalTherapy", alias='@type', const=True)
    



class VenueMap(MapCategoryType):
    """A venue map (e.g. for malls, auditoriums, museums, etc.).

    See: https://schema.org/VenueMap
    Model depth: 5
    """
    type_: str = Field(default="VenueMap", alias='@type', const=True)
    



class EventMovedOnline(EventStatusType):
    """Indicates that the event was changed to allow online participation. See [[eventAttendanceMode]]"
     "for specifics of whether it is now fully or partially online.

    See: https://schema.org/EventMovedOnline
    Model depth: 6
    """
    type_: str = Field(default="EventMovedOnline", alias='@type', const=True)
    



class Barcode(ImageObject):
    """An image of a visual machine-readable code such as a barcode or QR code.

    See: https://schema.org/Barcode
    Model depth: 5
    """
    type_: str = Field(default="Barcode", alias='@type', const=True)
    



class VeterinaryCare(MedicalOrganization):
    """A vet's office.

    See: https://schema.org/VeterinaryCare
    Model depth: 4
    """
    type_: str = Field(default="VeterinaryCare", alias='@type', const=True)
    



class BeautySalon(HealthAndBeautyBusiness):
    """Beauty salon.

    See: https://schema.org/BeautySalon
    Model depth: 5
    """
    type_: str = Field(default="BeautySalon", alias='@type', const=True)
    



class WebSite(CreativeWork):
    """A WebSite is a set of related web pages and other items typically served from a single web"
     "domain and accessible via URLs.

    See: https://schema.org/WebSite
    Model depth: 3
    """
    type_: str = Field(default="WebSite", alias='@type', const=True)
    issn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Serial Number (ISSN) that identifies this serial publication."
     "You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L)"
     "for, this serial publication.",
    )
    



class Electrician(HomeAndConstructionBusiness):
    """An electrician.

    See: https://schema.org/Electrician
    Model depth: 5
    """
    type_: str = Field(default="Electrician", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryE(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class E as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryE
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryE", alias='@type', const=True)
    



class BusinessEntityType(Enumeration):
    """A business entity type is a conceptual entity representing the legal form, the size,"
     "the main line of business, the position in the value chain, or any combination thereof,"
     "of an organization or business person. Commonly used values: * http://purl.org/goodrelations/v1#Business"
     "* http://purl.org/goodrelations/v1#Enduser * http://purl.org/goodrelations/v1#PublicInstitution"
     "* http://purl.org/goodrelations/v1#Reseller

    See: https://schema.org/BusinessEntityType
    Model depth: 4
    """
    type_: str = Field(default="BusinessEntityType", alias='@type', const=True)
    



class ReturnAction(TransferAction):
    """The act of returning to the origin that which was previously received (concrete objects)"
     "or taken (ownership).

    See: https://schema.org/ReturnAction
    Model depth: 4
    """
    type_: str = Field(default="ReturnAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class PerformanceRole(Role):
    """A PerformanceRole is a Role that some entity places with regard to a theatrical performance,"
     "e.g. in a Movie, TVSeries etc.

    See: https://schema.org/PerformanceRole
    Model depth: 4
    """
    type_: str = Field(default="PerformanceRole", alias='@type', const=True)
    characterName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The name of a character played in some acting or performing role, i.e. in a PerformanceRole.",
    )
    



class Protein(BioChemEntity):
    """Protein is here used in its widest possible definition, as classes of amino acid based"
     "molecules. Amyloid-beta Protein in human (UniProt P05067), eukaryota (e.g. an OrthoDB"
     "group) or even a single molecule that one can point to are all of type schema:Protein."
     "A protein can thus be a subclass of another protein, e.g. schema:Protein as a UniProt"
     "record can have multiple isoforms inside it which would also be schema:Protein. They"
     "can be imagined, synthetic, hypothetical or naturally occurring.

    See: https://schema.org/Protein
    Model depth: 3
    """
    type_: str = Field(default="Protein", alias='@type', const=True)
    hasBioPolymerSequence: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A symbolic representation of a BioChemEntity. For example, a nucleotide sequence of"
     "a Gene or an amino acid sequence of a Protein.",
    )
    



class TrackAction(FindAction):
    """An agent tracks an object for updates. Related actions: * [[FollowAction]]: Unlike"
     "FollowAction, TrackAction refers to the interest on the location of innanimates objects."
     "* [[SubscribeAction]]: Unlike SubscribeAction, TrackAction refers to the interest"
     "on the location of innanimate objects.

    See: https://schema.org/TrackAction
    Model depth: 4
    """
    type_: str = Field(default="TrackAction", alias='@type', const=True)
    deliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="A sub property of instrument. The method of delivery.",
    )
    



class DeliveryChargeSpecification(PriceSpecification):
    """The price for the delivery of an offer using a particular delivery method.

    See: https://schema.org/DeliveryChargeSpecification
    Model depth: 5
    """
    type_: str = Field(default="DeliveryChargeSpecification", alias='@type', const=True)
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    eligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "valid. See also [[ineligibleRegion]].",
    )
    appliesToDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="The delivery method(s) to which the delivery charge or payment charge specification"
     "applies.",
    )
    ineligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "not valid, e.g. a region where the transaction is not allowed. See also [[eligibleRegion]].",
    )
    



class PublicationIssue(CreativeWork):
    """A part of a successively published publication such as a periodical or publication volume,"
     "often numbered, usually containing a grouping of works such as articles. See also [blog"
     "post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).

    See: https://schema.org/PublicationIssue
    Model depth: 3
    """
    type_: str = Field(default="PublicationIssue", alias='@type', const=True)
    pageEnd: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work ends; for example \"138\" or \"xvi\".",
    )
    issueNumber: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="Identifies the issue of publication; for example, \"iii\" or \"2\".",
    )
    pagination: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any description of pages that is not separated into pageStart and pageEnd; for example,"
     "\"1-6, 9, 55\" or \"10-12, 46-49\".",
    )
    pageStart: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work starts; for example \"135\" or \"xiii\".",
    )
    



class ComicIssue(PublicationIssue):
    """Individual comic issues are serially published as part of a larger series. For the sake"
     "of consistency, even one-shot issues belong to a series comprised of a single issue."
     "All comic issues can be uniquely identified by: the combination of the name and volume"
     "number of the series to which the issue belongs; the issue number; and the variant description"
     "of the issue (if any).

    See: https://schema.org/ComicIssue
    Model depth: 4
    """
    type_: str = Field(default="ComicIssue", alias='@type', const=True)
    inker: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who traces over the pencil drawings in ink after pencils are complete.",
    )
    letterer: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds lettering, including speech balloons and sound effects, to"
     "artwork.",
    )
    penciler: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who draws the primary narrative artwork.",
    )
    variantCover: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the variant cover for the issue, if the issue is a variant printing. For"
     "example, \"Bryan Hitch Variant Cover\" or \"2nd Printing Variant\".",
    )
    artist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The primary artist for a work in a medium other than pencils or digital line art--for example,"
     "if the primary artwork is done in watercolors or digital paints.",
    )
    colorist: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="The individual who adds color to inked drawings.",
    )
    



class AgreeAction(ReactAction):
    """The act of expressing a consistency of opinion with the object. An agent agrees to/about"
     "an object (a proposition, topic or theme) with participants.

    See: https://schema.org/AgreeAction
    Model depth: 5
    """
    type_: str = Field(default="AgreeAction", alias='@type', const=True)
    



class ActiveNotRecruiting(MedicalStudyStatus):
    """Active, but not recruiting new participants.

    See: https://schema.org/ActiveNotRecruiting
    Model depth: 6
    """
    type_: str = Field(default="ActiveNotRecruiting", alias='@type', const=True)
    



class Tuesday(DayOfWeek):
    """The day of the week between Monday and Wednesday.

    See: https://schema.org/Tuesday
    Model depth: 5
    """
    type_: str = Field(default="Tuesday", alias='@type', const=True)
    



class Protozoa(InfectiousAgentClass):
    """Single-celled organism that causes an infection.

    See: https://schema.org/Protozoa
    Model depth: 6
    """
    type_: str = Field(default="Protozoa", alias='@type', const=True)
    



class LeisureTimeActivity(PhysicalActivityCategory):
    """Any physical activity engaged in for recreational purposes. Examples may include ballroom"
     "dancing, roller skating, canoeing, fishing, etc.

    See: https://schema.org/LeisureTimeActivity
    Model depth: 5
    """
    type_: str = Field(default="LeisureTimeActivity", alias='@type', const=True)
    



class AcceptAction(AllocateAction):
    """The act of committing to/adopting an object. Related actions: * [[RejectAction]]:"
     "The antonym of AcceptAction.

    See: https://schema.org/AcceptAction
    Model depth: 5
    """
    type_: str = Field(default="AcceptAction", alias='@type', const=True)
    



class Nonprofit501c27(USNonprofitType):
    """Nonprofit501c27: Non-profit type referring to State-Sponsored Workers' Compensation"
     "Reinsurance Organizations.

    See: https://schema.org/Nonprofit501c27
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c27", alias='@type', const=True)
    



class AlcoholConsideration(AdultOrientedEnumeration):
    """Item contains alcohol or promotes alcohol consumption.

    See: https://schema.org/AlcoholConsideration
    Model depth: 5
    """
    type_: str = Field(default="AlcoholConsideration", alias='@type', const=True)
    



class CDCPMDRecord(StructuredValue):
    """A CDCPMDRecord is a data structure representing a record in a CDC tabular data format"
     "used for hospital data reporting. See [documentation](/docs/cdc-covid.html) for"
     "details, and the linked CDC materials for authoritative definitions used as the source"
     "here.

    See: https://schema.org/CDCPMDRecord
    Model depth: 4
    """
    type_: str = Field(default="CDCPMDRecord", alias='@type', const=True)
    cvdNumC19MechVentPats: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19mechventpats - HOSPITALIZED and VENTILATED: Patients hospitalized in an NHSN"
     "inpatient care location who have suspected or confirmed COVID-19 and are on a mechanical"
     "ventilator.",
    )
    cvdNumBedsOcc: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numbedsocc - HOSPITAL INPATIENT BED OCCUPANCY: Total number of staffed inpatient beds"
     "that are occupied.",
    )
    cvdNumBeds: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numbeds - HOSPITAL INPATIENT BEDS: Inpatient beds, including all staffed, licensed,"
     "and overflow (surge) beds used for inpatients.",
    )
    cvdNumVentUse: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numventuse - MECHANICAL VENTILATORS IN USE: Total number of ventilators in use.",
    )
    cvdFacilityId: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Identifier of the NHSN facility that this data record applies to. Use [[cvdFacilityCounty]]"
     "to indicate the county. To provide other details, [[healthcareReportingData]] can"
     "be used on a [[Hospital]] entry.",
    )
    cvdNumC19HospPats: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19hosppats - HOSPITALIZED: Patients currently hospitalized in an inpatient care"
     "location who have suspected or confirmed COVID-19.",
    )
    cvdCollectionDate: Optional[Union[List[Union[datetime, DateTime, str, Text]], datetime, DateTime, str, Text]] = Field(
        default=None,
        description="collectiondate - Date for which patient counts are reported.",
    )
    cvdNumTotBeds: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numtotbeds - ALL HOSPITAL BEDS: Total number of all inpatient and outpatient beds, including"
     "all staffed, ICU, licensed, and overflow (surge) beds used for inpatients or outpatients.",
    )
    cvdFacilityCounty: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Name of the County of the NHSN facility that this data record applies to. Use [[cvdFacilityId]]"
     "to identify the facility. To provide other details, [[healthcareReportingData]]"
     "can be used on a [[Hospital]] entry.",
    )
    cvdNumC19Died: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19died - DEATHS: Patients with suspected or confirmed COVID-19 who died in the hospital,"
     "ED, or any overflow location.",
    )
    cvdNumVent: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numvent - MECHANICAL VENTILATORS: Total number of ventilators available.",
    )
    datePosted: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Publication date of an online listing.",
    )
    cvdNumICUBeds: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numicubeds - ICU BEDS: Total number of staffed inpatient intensive care unit (ICU) beds.",
    )
    cvdNumC19OverflowPats: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19overflowpats - ED/OVERFLOW: Patients with suspected or confirmed COVID-19"
     "who are in the ED or any overflow location awaiting an inpatient bed.",
    )
    cvdNumC19HOPats: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19hopats - HOSPITAL ONSET: Patients hospitalized in an NHSN inpatient care location"
     "with onset of suspected or confirmed COVID-19 14 or more days after hospitalization.",
    )
    cvdNumC19OFMechVentPats: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numc19ofmechventpats - ED/OVERFLOW and VENTILATED: Patients with suspected or confirmed"
     "COVID-19 who are in the ED or any overflow location awaiting an inpatient bed and on a mechanical"
     "ventilator.",
    )
    cvdNumICUBedsOcc: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="numicubedsocc - ICU BED OCCUPANCY: Total number of staffed inpatient ICU beds that are"
     "occupied.",
    )
    



class MensClothingStore(Store):
    """A men's clothing store.

    See: https://schema.org/MensClothingStore
    Model depth: 5
    """
    type_: str = Field(default="MensClothingStore", alias='@type', const=True)
    



class CollegeOrUniversity(EducationalOrganization):
    """A college, university, or other third-level educational institution.

    See: https://schema.org/CollegeOrUniversity
    Model depth: 4
    """
    type_: str = Field(default="CollegeOrUniversity", alias='@type', const=True)
    



class SheetMusic(CreativeWork):
    """Printed music, as opposed to performed or recorded music.

    See: https://schema.org/SheetMusic
    Model depth: 3
    """
    type_: str = Field(default="SheetMusic", alias='@type', const=True)
    



class WPAdBlock(WebPageElement):
    """An advertising section of the page.

    See: https://schema.org/WPAdBlock
    Model depth: 4
    """
    type_: str = Field(default="WPAdBlock", alias='@type', const=True)
    



class UserBlocks(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserBlocks
    Model depth: 4
    """
    type_: str = Field(default="UserBlocks", alias='@type', const=True)
    



class SeaBodyOfWater(BodyOfWater):
    """A sea (for example, the Caspian sea).

    See: https://schema.org/SeaBodyOfWater
    Model depth: 5
    """
    type_: str = Field(default="SeaBodyOfWater", alias='@type', const=True)
    



class WearableMeasurementWidth(WearableMeasurementTypeEnumeration):
    """Measurement of the width, for example of shoes

    See: https://schema.org/WearableMeasurementWidth
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementWidth", alias='@type', const=True)
    



class VisualArtsEvent(Event):
    """Event type: Visual arts event.

    See: https://schema.org/VisualArtsEvent
    Model depth: 3
    """
    type_: str = Field(default="VisualArtsEvent", alias='@type', const=True)
    



class Language(Intangible):
    """Natural languages such as Spanish, Tamil, Hindi, English, etc. Formal language code"
     "tags expressed in [BCP 47](https://en.wikipedia.org/wiki/IETF_language_tag)"
     "can be used via the [[alternateName]] property. The Language type previously also covered"
     "programming languages such as Scheme and Lisp, which are now best represented using"
     "[[ComputerLanguage]].

    See: https://schema.org/Language
    Model depth: 3
    """
    type_: str = Field(default="Language", alias='@type', const=True)
    



class TollFree(ContactPointOption):
    """The associated telephone number is toll free.

    See: https://schema.org/TollFree
    Model depth: 5
    """
    type_: str = Field(default="TollFree", alias='@type', const=True)
    



class PathologyTest(MedicalTest):
    """A medical test performed by a laboratory that typically involves examination of a tissue"
     "sample by a pathologist.

    See: https://schema.org/PathologyTest
    Model depth: 4
    """
    type_: str = Field(default="PathologyTest", alias='@type', const=True)
    tissueSample: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of tissue sample required for the test.",
    )
    



class DrivingSchoolVehicleUsage(CarUsageType):
    """Indicates the usage of the vehicle for driving school.

    See: https://schema.org/DrivingSchoolVehicleUsage
    Model depth: 5
    """
    type_: str = Field(default="DrivingSchoolVehicleUsage", alias='@type', const=True)
    



class VideoGameSeries(CreativeWorkSeries):
    """A video game series.

    See: https://schema.org/VideoGameSeries
    Model depth: 4
    """
    type_: str = Field(default="VideoGameSeries", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    containsSeason: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season that is part of the media series.",
    )
    characterAttribute: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="A piece of data that represents a particular aspect of a fictional character (skill,"
     "power, character points, advantage, disadvantage).",
    )
    numberOfSeasons: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of seasons in this series.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    cheatCode: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Cheat codes to the game.",
    )
    season: Optional[Union[List[Union[AnyUrl, URL, CreativeWorkSeason, str]], AnyUrl, URL, CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    gameLocation: Optional[Union[List[Union[AnyUrl, URL, Place, PostalAddress, str]], AnyUrl, URL, Place, PostalAddress, str]] = Field(
        default=None,
        description="Real or fictional location of the game (or part of game).",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    episodes: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV/radio series or season.",
    )
    gamePlatform: Optional[Union[List[Union[AnyUrl, URL, str, Text, Thing]], AnyUrl, URL, str, Text, Thing]] = Field(
        default=None,
        description="The electronic systems used to play <a href=\"http://en.wikipedia.org/wiki/Category:Video_game_platforms\">video"
     "games</a>.",
    )
    numberOfPlayers: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicate how many people can play this game (minimum, maximum, or range).",
    )
    seasons: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    gameItem: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="An item is an object within the game world that can be collected by a player or, occasionally,"
     "a non-player character.",
    )
    episode: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV, radio or game media within a series or season.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    numberOfEpisodes: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of episodes in this season or series.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    quest: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="The task that a player-controlled character, or group of characters may complete in"
     "order to gain a reward.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    playMode: Optional[Union[List[Union[GamePlayMode, str]], GamePlayMode, str]] = Field(
        default=None,
        description="Indicates whether this game is multi-player, co-op or single-player. The game can be"
     "marked as multi-player, co-op and single-player at the same time.",
    )
    



class OnDemandEvent(PublicationEvent):
    """A publication event, e.g. catch-up TV or radio podcast, during which a program is available"
     "on-demand.

    See: https://schema.org/OnDemandEvent
    Model depth: 4
    """
    type_: str = Field(default="OnDemandEvent", alias='@type', const=True)
    



class Pulmonary(MedicalSpecialty):
    """A specific branch of medical science that pertains to the study of the respiratory system"
     "and its respective disease states.

    See: https://schema.org/Pulmonary
    Model depth: 6
    """
    type_: str = Field(default="Pulmonary", alias='@type', const=True)
    



class HealthClub(HealthAndBeautyBusiness, SportsActivityLocation):
    """A health club.

    See: https://schema.org/HealthClub
    Model depth: 5
    """
    type_: str = Field(default="HealthClub", alias='@type', const=True)
    



class StagedContent(MediaManipulationRatingEnumeration):
    """Content coded 'staged content' in a [[MediaReview]], considered in the context of how"
     "it was published or shared. For a [[VideoObject]] to be 'staged content': A video that"
     "has been created using actors or similarly contrived. For an [[ImageObject]] to be 'staged"
     "content': An image that was created using actors or similarly contrived, such as a screenshot"
     "of a fake tweet. For an [[ImageObject]] with embedded text to be 'staged content': An"
     "image that was created using actors or similarly contrived, such as a screenshot of a"
     "fake tweet. For an [[AudioObject]] to be 'staged content': Audio that has been created"
     "using actors or similarly contrived.

    See: https://schema.org/StagedContent
    Model depth: 5
    """
    type_: str = Field(default="StagedContent", alias='@type', const=True)
    



class Nonprofit501c9(USNonprofitType):
    """Nonprofit501c9: Non-profit type referring to Voluntary Employee Beneficiary Associations.

    See: https://schema.org/Nonprofit501c9
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c9", alias='@type', const=True)
    



class FastFoodRestaurant(FoodEstablishment):
    """A fast-food restaurant.

    See: https://schema.org/FastFoodRestaurant
    Model depth: 5
    """
    type_: str = Field(default="FastFoodRestaurant", alias='@type', const=True)
    



class BusinessFunction(Enumeration):
    """The business function specifies the type of activity or access (i.e., the bundle of rights)"
     "offered by the organization or business person through the offer. Typical are sell,"
     "rental or lease, maintenance or repair, manufacture / produce, recycle / dispose, engineering"
     "/ construction, or installation. Proprietary specifications of access rights are"
     "also instances of this class. Commonly used values: * http://purl.org/goodrelations/v1#ConstructionInstallation"
     "* http://purl.org/goodrelations/v1#Dispose * http://purl.org/goodrelations/v1#LeaseOut"
     "* http://purl.org/goodrelations/v1#Maintain * http://purl.org/goodrelations/v1#ProvideService"
     "* http://purl.org/goodrelations/v1#Repair * http://purl.org/goodrelations/v1#Sell"
     "* http://purl.org/goodrelations/v1#Buy

    See: https://schema.org/BusinessFunction
    Model depth: 4
    """
    type_: str = Field(default="BusinessFunction", alias='@type', const=True)
    



class Dermatologic(MedicalSpecialty):
    """Something relating to or practicing dermatology.

    See: https://schema.org/Dermatologic
    Model depth: 6
    """
    type_: str = Field(default="Dermatologic", alias='@type', const=True)
    



class PaymentDue(PaymentStatusType):
    """The payment is due, but still within an acceptable time to be received.

    See: https://schema.org/PaymentDue
    Model depth: 6
    """
    type_: str = Field(default="PaymentDue", alias='@type', const=True)
    



class DJMixAlbum(MusicAlbumProductionType):
    """DJMixAlbum.

    See: https://schema.org/DJMixAlbum
    Model depth: 5
    """
    type_: str = Field(default="DJMixAlbum", alias='@type', const=True)
    



class URL(Text):
    """Data type: URL.

    See: https://schema.org/URL
    Model depth: 6
    """
    type_: str = Field(default="URL", alias='@type', const=True)
    



class EducationalAudience(Audience):
    """An EducationalAudience.

    See: https://schema.org/EducationalAudience
    Model depth: 4
    """
    type_: str = Field(default="EducationalAudience", alias='@type', const=True)
    educationalRole: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An educationalRole of an EducationalAudience.",
    )
    



class GamePlayMode(Enumeration):
    """Indicates whether this game is multi-player, co-op or single-player.

    See: https://schema.org/GamePlayMode
    Model depth: 4
    """
    type_: str = Field(default="GamePlayMode", alias='@type', const=True)
    



class SinglePlayer(GamePlayMode):
    """Play mode: SinglePlayer. Which is played by a lone player.

    See: https://schema.org/SinglePlayer
    Model depth: 5
    """
    type_: str = Field(default="SinglePlayer", alias='@type', const=True)
    



class HealthCare(GovernmentBenefitsType):
    """HealthCare: this is a benefit for health care.

    See: https://schema.org/HealthCare
    Model depth: 5
    """
    type_: str = Field(default="HealthCare", alias='@type', const=True)
    



class PreventionHealthAspect(HealthAspectEnumeration):
    """Information about actions or measures that can be taken to avoid getting the topic or"
     "reaching a critical situation related to the topic.

    See: https://schema.org/PreventionHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="PreventionHealthAspect", alias='@type', const=True)
    



class DepartAction(MoveAction):
    """The act of departing from a place. An agent departs from a fromLocation for a destination,"
     "optionally with participants.

    See: https://schema.org/DepartAction
    Model depth: 4
    """
    type_: str = Field(default="DepartAction", alias='@type', const=True)
    



class EnergyConsumptionDetails(Intangible):
    """EnergyConsumptionDetails represents information related to the energy efficiency"
     "of a product that consumes energy. The information that can be provided is based on international"
     "regulations such as for example [EU directive 2017/1369](https://eur-lex.europa.eu/eli/reg/2017/1369/oj)"
     "for energy labeling and the [Energy labeling rule](https://www.ftc.gov/enforcement/rules/rulemaking-regulatory-reform-proceedings/energy-water-use-labeling-consumer)"
     "under the Energy Policy and Conservation Act (EPCA) in the US.

    See: https://schema.org/EnergyConsumptionDetails
    Model depth: 3
    """
    type_: str = Field(default="EnergyConsumptionDetails", alias='@type', const=True)
    hasEnergyEfficiencyCategory: Optional[Union[List[Union[EnergyEfficiencyEnumeration, str]], EnergyEfficiencyEnumeration, str]] = Field(
        default=None,
        description="Defines the energy efficiency Category (which could be either a rating out of range of"
     "values or a yes/no certification) for a product according to an international energy"
     "efficiency standard.",
    )
    energyEfficiencyScaleMin: Optional[Union[List[Union[EUEnergyEfficiencyEnumeration, str]], EUEnergyEfficiencyEnumeration, str]] = Field(
        default=None,
        description="Specifies the least energy efficient class on the regulated EU energy consumption scale"
     "for the product category a product belongs to. For example, energy consumption for televisions"
     "placed on the market after January 1, 2020 is scaled from D to A+++.",
    )
    energyEfficiencyScaleMax: Optional[Union[List[Union[EUEnergyEfficiencyEnumeration, str]], EUEnergyEfficiencyEnumeration, str]] = Field(
        default=None,
        description="Specifies the most energy efficient class on the regulated EU energy consumption scale"
     "for the product category a product belongs to. For example, energy consumption for televisions"
     "placed on the market after January 1, 2020 is scaled from D to A+++.",
    )
    



class Painting(CreativeWork):
    """A painting.

    See: https://schema.org/Painting
    Model depth: 3
    """
    type_: str = Field(default="Painting", alias='@type', const=True)
    



class MultiPlayer(GamePlayMode):
    """Play mode: MultiPlayer. Requiring or allowing multiple human players to play simultaneously.

    See: https://schema.org/MultiPlayer
    Model depth: 5
    """
    type_: str = Field(default="MultiPlayer", alias='@type', const=True)
    



class CreditCard(LoanOrCredit, PaymentCard):
    """A card payment method of a particular brand or name. Used to mark up a particular payment"
     "method and/or the financial product/service that supplies the card account. Commonly"
     "used values: * http://purl.org/goodrelations/v1#AmericanExpress * http://purl.org/goodrelations/v1#DinersClub"
     "* http://purl.org/goodrelations/v1#Discover * http://purl.org/goodrelations/v1#JCB"
     "* http://purl.org/goodrelations/v1#MasterCard * http://purl.org/goodrelations/v1#VISA

    See: https://schema.org/CreditCard
    Model depth: 6
    """
    type_: str = Field(default="CreditCard", alias='@type', const=True)
    



class LimitedAvailability(ItemAvailability):
    """Indicates that the item has limited availability.

    See: https://schema.org/LimitedAvailability
    Model depth: 5
    """
    type_: str = Field(default="LimitedAvailability", alias='@type', const=True)
    



class VeganDiet(RestrictedDiet):
    """A diet exclusive of all animal products.

    See: https://schema.org/VeganDiet
    Model depth: 5
    """
    type_: str = Field(default="VeganDiet", alias='@type', const=True)
    



class ApplyAction(OrganizeAction):
    """The act of registering to an organization/service without the guarantee to receive"
     "it. Related actions: * [[RegisterAction]]: Unlike RegisterAction, ApplyAction has"
     "no guarantees that the application will be accepted.

    See: https://schema.org/ApplyAction
    Model depth: 4
    """
    type_: str = Field(default="ApplyAction", alias='@type', const=True)
    



class ParkingMap(MapCategoryType):
    """A parking map.

    See: https://schema.org/ParkingMap
    Model depth: 5
    """
    type_: str = Field(default="ParkingMap", alias='@type', const=True)
    



class GiveAction(TransferAction):
    """The act of transferring ownership of an object to a destination. Reciprocal of TakeAction."
     "Related actions: * [[TakeAction]]: Reciprocal of GiveAction. * [[SendAction]]: Unlike"
     "SendAction, GiveAction implies that ownership is being transferred (e.g. I may send"
     "my laptop to you, but that doesn't mean I'm giving it to you).

    See: https://schema.org/GiveAction
    Model depth: 4
    """
    type_: str = Field(default="GiveAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class Ayurvedic(MedicineSystem):
    """A system of medicine that originated in India over thousands of years and that focuses"
     "on integrating and balancing the body, mind, and spirit.

    See: https://schema.org/Ayurvedic
    Model depth: 6
    """
    type_: str = Field(default="Ayurvedic", alias='@type', const=True)
    



class WearableSizeGroupExtraTall(WearableSizeGroupEnumeration):
    """Size group \"Extra Tall\" for wearables.

    See: https://schema.org/WearableSizeGroupExtraTall
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupExtraTall", alias='@type', const=True)
    



class TVSeries(CreativeWorkSeries, CreativeWork):
    """CreativeWorkSeries dedicated to TV broadcast and associated online delivery.

    See: https://schema.org/TVSeries
    Model depth: 3
    """
    type_: str = Field(default="TVSeries", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    containsSeason: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season that is part of the media series.",
    )
    numberOfSeasons: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of seasons in this series.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    season: Optional[Union[List[Union[AnyUrl, URL, CreativeWorkSeason, str]], AnyUrl, URL, CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    episodes: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV/radio series or season.",
    )
    seasons: Optional[Union[List[Union[CreativeWorkSeason, str]], CreativeWorkSeason, str]] = Field(
        default=None,
        description="A season in a media series.",
    )
    episode: Optional[Union[List[Union[Episode, str]], Episode, str]] = Field(
        default=None,
        description="An episode of a TV, radio or game media within a series or season.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    numberOfEpisodes: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of episodes in this season or series.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class FloorPlan(Intangible):
    """A FloorPlan is an explicit representation of a collection of similar accommodations,"
     "allowing the provision of common information (room counts, sizes, layout diagrams)"
     "and offers for rental or sale. In typical use, some [[ApartmentComplex]] has an [[accommodationFloorPlan]]"
     "which is a [[FloorPlan]]. A FloorPlan is always in the context of a particular place,"
     "either a larger [[ApartmentComplex]] or a single [[Apartment]]. The visual/spatial"
     "aspects of a floor plan (i.e. room layout, [see wikipedia](https://en.wikipedia.org/wiki/Floor_plan))"
     "can be indicated using [[image]].

    See: https://schema.org/FloorPlan
    Model depth: 3
    """
    type_: str = Field(default="FloorPlan", alias='@type', const=True)
    floorSize: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The size of the accommodation, e.g. in square meter or squarefoot. Typical unit code(s):"
     "MTK for square meter, FTK for square foot, or YDK for square yard",
    )
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    layoutImage: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="A schematic image showing the floorplan layout.",
    )
    numberOfFullBathrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Number of full bathrooms - The total number of full and ¾ bathrooms in an [[Accommodation]]."
     "This corresponds to the [BathroomsFull field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsFull+Field).",
    )
    amenityFeature: Optional[Union[List[Union[LocationFeatureSpecification, str]], LocationFeatureSpecification, str]] = Field(
        default=None,
        description="An amenity feature (e.g. a characteristic or service) of the Accommodation. This generic"
     "property does not make a statement about whether the feature is included in an offer for"
     "the main accommodation or available at extra costs.",
    )
    numberOfBathroomsTotal: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The total integer number of bathrooms in some [[Accommodation]], following real estate"
     "conventions as [documented in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsTotalInteger+Field):"
     "\"The simple sum of the number of bathrooms. For example for a property with two Full Bathrooms"
     "and one Half Bathroom, the Bathrooms Total Integer will be 3.\". See also [[numberOfRooms]].",
    )
    numberOfBedrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The total integer number of bedrooms in a some [[Accommodation]], [[ApartmentComplex]]"
     "or [[FloorPlan]].",
    )
    numberOfAvailableAccommodationUnits: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicates the number of available accommodation units in an [[ApartmentComplex]],"
     "or the number of accommodation units for a specific [[FloorPlan]] (within its specific"
     "[[ApartmentComplex]]). See also [[numberOfAccommodationUnits]].",
    )
    numberOfAccommodationUnits: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="Indicates the total (available plus unavailable) number of accommodation units in"
     "an [[ApartmentComplex]], or the number of accommodation units for a specific [[FloorPlan]]"
     "(within its specific [[ApartmentComplex]]). See also [[numberOfAvailableAccommodationUnits]].",
    )
    petsAllowed: Optional[Union[List[Union[str, Text, StrictBool, Boolean]], str, Text, StrictBool, Boolean]] = Field(
        default=None,
        description="Indicates whether pets are allowed to enter the accommodation or lodging business."
     "More detailed information can be put in a text value.",
    )
    isPlanForApartment: Optional[Union[List[Union[Accommodation, str]], Accommodation, str]] = Field(
        default=None,
        description="Indicates some accommodation that this floor plan describes.",
    )
    numberOfPartialBathrooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Number of partial bathrooms - The total number of half and ¼ bathrooms in an [[Accommodation]]."
     "This corresponds to the [BathroomsPartial field in RESO](https://ddwiki.reso.org/display/DDW17/BathroomsPartial+Field).",
    )
    



class NotInForce(LegalForceStatus):
    """Indicates that a legislation is currently not in force.

    See: https://schema.org/NotInForce
    Model depth: 6
    """
    type_: str = Field(default="NotInForce", alias='@type', const=True)
    



class Radiography(MedicalImagingTechnique, MedicalSpecialty):
    """Radiography is an imaging technique that uses electromagnetic radiation other than"
     "visible light, especially X-rays, to view the internal structure of a non-uniformly"
     "composed and opaque object such as the human body.

    See: https://schema.org/Radiography
    Model depth: 6
    """
    type_: str = Field(default="Radiography", alias='@type', const=True)
    



class CoOp(GamePlayMode):
    """Play mode: CoOp. Co-operative games, where you play on the same team with friends.

    See: https://schema.org/CoOp
    Model depth: 5
    """
    type_: str = Field(default="CoOp", alias='@type', const=True)
    



class _3DModel(MediaObject):
    """A 3D model represents some kind of 3D content, which may have [[encoding]]s in one or more"
     "[[MediaObject]]s. Many 3D formats are available (e.g. see [Wikipedia](https://en.wikipedia.org/wiki/Category:3D_graphics_file_formats));"
     "specific encoding formats can be represented using the [[encodingFormat]] property"
     "applied to the relevant [[MediaObject]]. For the case of a single file published after"
     "Zip compression, the convention of appending '+zip' to the [[encodingFormat]] can"
     "be used. Geospatial, AR/VR, artistic/animation, gaming, engineering and scientific"
     "content can all be represented using [[3DModel]].

    See: https://schema.org/3DModel
    Model depth: 4
    """
    type_: str = Field(default="3DModel", alias='@type', const=True)
    isResizable: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether the 3DModel allows resizing. For example, room layout applications often do"
     "not allow 3DModel elements to be resized to reflect reality.",
    )
    



class BackgroundNewsArticle(NewsArticle):
    """A [[NewsArticle]] providing historical context, definition and detail on a specific"
     "topic (aka \"explainer\" or \"backgrounder\"). For example, an in-depth article or"
     "frequently-asked-questions ([FAQ](https://en.wikipedia.org/wiki/FAQ)) document"
     "on topics such as Climate Change or the European Union. Other kinds of background material"
     "from a non-news setting are often described using [[Book]] or [[Article]], in particular"
     "[[ScholarlyArticle]]. See also [[NewsArticle]] for related vocabulary from a learning/education"
     "perspective.

    See: https://schema.org/BackgroundNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="BackgroundNewsArticle", alias='@type', const=True)
    



class Diet(LifestyleModification, CreativeWork):
    """A strategy of regulating the intake of food to achieve or maintain a specific health-related"
     "goal.

    See: https://schema.org/Diet
    Model depth: 3
    """
    type_: str = Field(default="Diet", alias='@type', const=True)
    endorsers: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="People or organizations that endorse the plan.",
    )
    dietFeatures: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Nutritional information specific to the dietary plan. May include dietary recommendations"
     "on what foods to avoid, what foods to consume, and specific alterations/deviations"
     "from the USDA or other regulatory body's approved dietary guidelines.",
    )
    physiologicalBenefits: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Specific physiologic benefits associated to the plan.",
    )
    expertConsiderations: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Medical expert advice related to the plan.",
    )
    risks: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Specific physiologic risks associated to the diet plan.",
    )
    



class House(Accommodation):
    """A house is a building or structure that has the ability to be occupied for habitation by"
     "humans or other creatures (source: Wikipedia, the free encyclopedia, see <a href=\"http://en.wikipedia.org/wiki/House\">http://en.wikipedia.org/wiki/House</a>).

    See: https://schema.org/House
    Model depth: 4
    """
    type_: str = Field(default="House", alias='@type', const=True)
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    



class Course(LearningResource, CreativeWork):
    """A description of an educational course which may be offered as distinct instances which"
     "take place at different times or take place at different locations, or be offered through"
     "different media or modes of study. An educational course is a sequence of one or more educational"
     "events and/or creative works which aims to build knowledge, competence or ability of"
     "learners.

    See: https://schema.org/Course
    Model depth: 3
    """
    type_: str = Field(default="Course", alias='@type', const=True)
    occupationalCredentialAwarded: Optional[Union[List[Union[AnyUrl, URL, str, Text, EducationalOccupationalCredential]], AnyUrl, URL, str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="A description of the qualification, award, certificate, diploma or other occupational"
     "credential awarded as a consequence of successful completion of this course or program.",
    )
    coursePrerequisites: Optional[Union[List[Union[str, Text, Course, AlignmentObject]], str, Text, Course, AlignmentObject]] = Field(
        default=None,
        description="Requirements for taking the Course. May be completion of another [[Course]] or a textual"
     "description like \"permission of instructor\". Requirements may be a pre-requisite"
     "competency, referenced using [[AlignmentObject]].",
    )
    educationalCredentialAwarded: Optional[Union[List[Union[AnyUrl, URL, str, Text, EducationalOccupationalCredential]], AnyUrl, URL, str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="A description of the qualification, award, certificate, diploma or other educational"
     "credential awarded as a consequence of successful completion of this course or program.",
    )
    courseCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The identifier for the [[Course]] used by the course [[provider]] (e.g. CS101 or 6.001).",
    )
    numberOfCredits: Optional[Union[List[Union[int, Integer, StructuredValue, str]], int, Integer, StructuredValue, str]] = Field(
        default=None,
        description="The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.",
    )
    hasCourseInstance: Optional[Union[List[Union[CourseInstance, str]], CourseInstance, str]] = Field(
        default=None,
        description="An offering of the course at a specific time and place or through specific media or mode"
     "of study or to a specific section of students.",
    )
    



class InStock(ItemAvailability):
    """Indicates that the item is in stock.

    See: https://schema.org/InStock
    Model depth: 5
    """
    type_: str = Field(default="InStock", alias='@type', const=True)
    



class SolveMathAction(Action):
    """The action that takes in a math expression and directs users to a page potentially capable"
     "of solving/simplifying that expression.

    See: https://schema.org/SolveMathAction
    Model depth: 3
    """
    type_: str = Field(default="SolveMathAction", alias='@type', const=True)
    eduQuestionType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates"
     "the format of question being given. Example: \"Multiple choice\", \"Open ended\","
     "\"Flashcard\".",
    )
    



class Volcano(Landform):
    """A volcano, like Fujisan.

    See: https://schema.org/Volcano
    Model depth: 4
    """
    type_: str = Field(default="Volcano", alias='@type', const=True)
    



class RentalVehicleUsage(CarUsageType):
    """Indicates the usage of the vehicle as a rental car.

    See: https://schema.org/RentalVehicleUsage
    Model depth: 5
    """
    type_: str = Field(default="RentalVehicleUsage", alias='@type', const=True)
    



class ViewAction(ConsumeAction):
    """The act of consuming static visual content.

    See: https://schema.org/ViewAction
    Model depth: 4
    """
    type_: str = Field(default="ViewAction", alias='@type', const=True)
    



class NonprofitANBI(NLNonprofitType):
    """NonprofitANBI: Non-profit type referring to a Public Benefit Organization (NL).

    See: https://schema.org/NonprofitANBI
    Model depth: 6
    """
    type_: str = Field(default="NonprofitANBI", alias='@type', const=True)
    



class Nonprofit501c22(USNonprofitType):
    """Nonprofit501c22: Non-profit type referring to Withdrawal Liability Payment Funds.

    See: https://schema.org/Nonprofit501c22
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c22", alias='@type', const=True)
    



class Clinician(MedicalAudienceType):
    """Medical clinicians, including practicing physicians and other medical professionals"
     "involved in clinical practice.

    See: https://schema.org/Clinician
    Model depth: 6
    """
    type_: str = Field(default="Clinician", alias='@type', const=True)
    



class PawnShop(Store):
    """A shop that will buy, or lend money against the security of, personal possessions.

    See: https://schema.org/PawnShop
    Model depth: 5
    """
    type_: str = Field(default="PawnShop", alias='@type', const=True)
    



class DanceEvent(Event):
    """Event type: A social dance.

    See: https://schema.org/DanceEvent
    Model depth: 3
    """
    type_: str = Field(default="DanceEvent", alias='@type', const=True)
    



class DefinedTermSet(CreativeWork):
    """A set of defined terms, for example a set of categories or a classification scheme, a glossary,"
     "dictionary or enumeration.

    See: https://schema.org/DefinedTermSet
    Model depth: 3
    """
    type_: str = Field(default="DefinedTermSet", alias='@type', const=True)
    hasDefinedTerm: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="A Defined Term contained in this term set.",
    )
    



class CategoryCodeSet(DefinedTermSet):
    """A set of Category Code values.

    See: https://schema.org/CategoryCodeSet
    Model depth: 4
    """
    type_: str = Field(default="CategoryCodeSet", alias='@type', const=True)
    hasCategoryCode: Optional[Union[List[Union[CategoryCode, str]], CategoryCode, str]] = Field(
        default=None,
        description="A Category code contained in this code set.",
    )
    



class Nonprofit501k(USNonprofitType):
    """Nonprofit501k: Non-profit type referring to Child Care Organizations.

    See: https://schema.org/Nonprofit501k
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501k", alias='@type', const=True)
    



class PregnancyHealthAspect(HealthAspectEnumeration):
    """Content discussing pregnancy-related aspects of a health topic.

    See: https://schema.org/PregnancyHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="PregnancyHealthAspect", alias='@type', const=True)
    



class MobileWebPlatform(DigitalPlatformEnumeration):
    """Represents the broad notion of 'mobile' browsers as a Web Platform.

    See: https://schema.org/MobileWebPlatform
    Model depth: 5
    """
    type_: str = Field(default="MobileWebPlatform", alias='@type', const=True)
    



class ApprovedIndication(MedicalIndication):
    """An indication for a medical therapy that has been formally specified or approved by a"
     "regulatory body that regulates use of the therapy; for example, the US FDA approves indications"
     "for most drugs in the US.

    See: https://schema.org/ApprovedIndication
    Model depth: 4
    """
    type_: str = Field(default="ApprovedIndication", alias='@type', const=True)
    



class MedicalGuidelineContraindication(MedicalGuideline):
    """A guideline contraindication that designates a process as harmful and where quality"
     "of the data supporting the contraindication is sound.

    See: https://schema.org/MedicalGuidelineContraindication
    Model depth: 4
    """
    type_: str = Field(default="MedicalGuidelineContraindication", alias='@type', const=True)
    



class GolfCourse(SportsActivityLocation):
    """A golf course.

    See: https://schema.org/GolfCourse
    Model depth: 5
    """
    type_: str = Field(default="GolfCourse", alias='@type', const=True)
    



class BefriendAction(InteractAction):
    """The act of forming a personal connection with someone (object) mutually/bidirectionally/symmetrically."
     "Related actions: * [[FollowAction]]: Unlike FollowAction, BefriendAction implies"
     "that the connection is reciprocal.

    See: https://schema.org/BefriendAction
    Model depth: 4
    """
    type_: str = Field(default="BefriendAction", alias='@type', const=True)
    



class Motel(LodgingBusiness):
    """A motel. <br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated document"
     "on the use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/Motel
    Model depth: 5
    """
    type_: str = Field(default="Motel", alias='@type', const=True)
    



class EatAction(ConsumeAction):
    """The act of swallowing solid objects.

    See: https://schema.org/EatAction
    Model depth: 4
    """
    type_: str = Field(default="EatAction", alias='@type', const=True)
    



class OrderProcessing(OrderStatus):
    """OrderStatus representing that an order is being processed.

    See: https://schema.org/OrderProcessing
    Model depth: 6
    """
    type_: str = Field(default="OrderProcessing", alias='@type', const=True)
    



class FullRefund(RefundTypeEnumeration):
    """Specifies that a refund can be done in the full amount the customer paid for the product.

    See: https://schema.org/FullRefund
    Model depth: 5
    """
    type_: str = Field(default="FullRefund", alias='@type', const=True)
    



class PreventionIndication(MedicalIndication):
    """An indication for preventing an underlying condition, symptom, etc.

    See: https://schema.org/PreventionIndication
    Model depth: 4
    """
    type_: str = Field(default="PreventionIndication", alias='@type', const=True)
    



class MolecularEntity(BioChemEntity):
    """Any constitutionally or isotopically distinct atom, molecule, ion, ion pair, radical,"
     "radical ion, complex, conformer etc., identifiable as a separately distinguishable"
     "entity.

    See: https://schema.org/MolecularEntity
    Model depth: 3
    """
    type_: str = Field(default="MolecularEntity", alias='@type', const=True)
    chemicalRole: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="A role played by the BioChemEntity within a chemical context.",
    )
    smiles: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A specification in form of a line notation for describing the structure of chemical species"
     "using short ASCII strings. Double bond stereochemistry \ indicators may need to be escaped"
     "in the string in formats where the backslash is an escape character.",
    )
    potentialUse: Optional[Union[List[Union[DefinedTerm, str]], DefinedTerm, str]] = Field(
        default=None,
        description="Intended use of the BioChemEntity by humans.",
    )
    monoisotopicMolecularWeight: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="The monoisotopic mass is the sum of the masses of the atoms in a molecule using the unbound,"
     "ground-state, rest mass of the principal (most abundant) isotope for each element instead"
     "of the isotopic average mass. Please include the units in the form '&lt;Number&gt; &lt;unit&gt;',"
     "for example '770.230488 g/mol' or as '&lt;QuantitativeValue&gt;.",
    )
    molecularWeight: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="This is the molecular weight of the entity being described, not of the parent. Units should"
     "be included in the form '&lt;Number&gt; &lt;unit&gt;', for example '12 amu' or as '&lt;QuantitativeValue&gt;.",
    )
    inChIKey: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="InChIKey is a hashed version of the full InChI (using the SHA-256 algorithm).",
    )
    iupacName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Systematic method of naming chemical compounds as recommended by the International"
     "Union of Pure and Applied Chemistry (IUPAC).",
    )
    molecularFormula: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The empirical formula is the simplest whole number ratio of all the atoms in a molecule.",
    )
    inChI: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Non-proprietary identifier for molecular entity that can be used in printed and electronic"
     "data sources thus enabling easier linking of diverse data compilations.",
    )
    



class FAQPage(WebPage):
    """A [[FAQPage]] is a [[WebPage]] presenting one or more \"[Frequently asked questions](https://en.wikipedia.org/wiki/FAQ)\""
     "(see also [[QAPage]]).

    See: https://schema.org/FAQPage
    Model depth: 4
    """
    type_: str = Field(default="FAQPage", alias='@type', const=True)
    



class BodyMeasurementInsideLeg(BodyMeasurementTypeEnumeration):
    """Inside leg (measured between crotch and soles of feet). Used, for example, to fit pants.

    See: https://schema.org/BodyMeasurementInsideLeg
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementInsideLeg", alias='@type', const=True)
    



class ReportageNewsArticle(NewsArticle):
    """The [[ReportageNewsArticle]] type is a subtype of [[NewsArticle]] representing news"
     "articles which are the result of journalistic news reporting conventions. In practice"
     "many news publishers produce a wide variety of article types, many of which might be considered"
     "a [[NewsArticle]] but not a [[ReportageNewsArticle]]. For example, opinion pieces,"
     "reviews, analysis, sponsored or satirical articles, or articles that combine several"
     "of these elements. The [[ReportageNewsArticle]] type is based on a stricter ideal for"
     "\"news\" as a work of journalism, with articles based on factual information either"
     "observed or verified by the author, or reported and verified from knowledgeable sources."
     "This often includes perspectives from multiple viewpoints on a particular issue (distinguishing"
     "news reports from public relations or propaganda). News reports in the [[ReportageNewsArticle]]"
     "sense de-emphasize the opinion of the author, with commentary and value judgements"
     "typically expressed elsewhere. A [[ReportageNewsArticle]] which goes deeper into"
     "analysis can also be marked with an additional type of [[AnalysisNewsArticle]].

    See: https://schema.org/ReportageNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="ReportageNewsArticle", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryF(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class F as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryF
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryF", alias='@type', const=True)
    



class TobaccoNicotineConsideration(AdultOrientedEnumeration):
    """Item contains tobacco and/or nicotine, for example cigars, cigarettes, chewing tobacco,"
     "e-cigarettes, or hookahs.

    See: https://schema.org/TobaccoNicotineConsideration
    Model depth: 5
    """
    type_: str = Field(default="TobaccoNicotineConsideration", alias='@type', const=True)
    



class MinimumAdvertisedPrice(PriceTypeEnumeration):
    """Represents the minimum advertised price (\"MAP\") (as dictated by the manufacturer)"
     "of an offered product.

    See: https://schema.org/MinimumAdvertisedPrice
    Model depth: 5
    """
    type_: str = Field(default="MinimumAdvertisedPrice", alias='@type', const=True)
    



class CardiovascularExam(PhysicalExam):
    """Cardiovascular system assessment with clinical examination.

    See: https://schema.org/CardiovascularExam
    Model depth: 5
    """
    type_: str = Field(default="CardiovascularExam", alias='@type', const=True)
    



class QuantitativeValue(StructuredValue):
    """A point value or interval for product characteristics and other purposes.

    See: https://schema.org/QuantitativeValue
    Model depth: 4
    """
    type_: str = Field(default="QuantitativeValue", alias='@type', const=True)
    value: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]], StrictInt, StrictFloat, Number, str, Text, StrictBool, Boolean, StructuredValue]] = Field(
        default=None,
        description="The value of the quantitative value or property value node. * For [[QuantitativeValue]]"
     "and [[MonetaryAmount]], the recommended type for values is 'Number'. * For [[PropertyValue]],"
     "it can be 'Text', 'Number', 'Boolean', or 'StructuredValue'. * Use values from 0123456789"
     "(Unicode 'DIGIT ZERO' (U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially"
     "similar Unicode symbols. * Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to"
     "indicate a decimal point. Avoid using these symbols as a readability separator.",
    )
    additionalProperty: Optional[Union[List[Union[PropertyValue, str]], PropertyValue, str]] = Field(
        default=None,
        description="A property-value pair representing an additional characteristic of the entity, e.g."
     "a product feature or another characteristic for which there is no matching property"
     "in schema.org. Note: Publishers should be aware that applications designed to use specific"
     "schema.org properties (e.g. https://schema.org/width, https://schema.org/color,"
     "https://schema.org/gtin13, ...) will typically expect such data to be provided using"
     "those properties, rather than using the generic property/value mechanism.",
    )
    valueReference: Optional[Union[List[Union[str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]], str, Text, MeasurementTypeEnumeration, StructuredValue, QuantitativeValue, DefinedTerm, PropertyValue, Enumeration, QualitativeValue]] = Field(
        default=None,
        description="A secondary value that provides additional information on the original value, e.g."
     "a reference temperature or a type of measurement.",
    )
    unitCode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL."
     "Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.",
    )
    maxValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The upper value of some characteristic or property.",
    )
    unitText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A string or text indicating the unit of measurement. Useful if you cannot provide a standard"
     "unit code for <a href='unitCode'>unitCode</a>.",
    )
    minValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The lower value of some characteristic or property.",
    )
    



class WearableSizeSystemEurope(WearableSizeSystemEnumeration):
    """European size system for wearables.

    See: https://schema.org/WearableSizeSystemEurope
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemEurope", alias='@type', const=True)
    



class Blog(CreativeWork):
    """A [blog](https://en.wikipedia.org/wiki/Blog), sometimes known as a \"weblog\"."
     "Note that the individual posts ([[BlogPosting]]s) in a [[Blog]] are often colloquially"
     "referred to by the same term.

    See: https://schema.org/Blog
    Model depth: 3
    """
    type_: str = Field(default="Blog", alias='@type', const=True)
    blogPosts: Optional[Union[List[Union[BlogPosting, str]], BlogPosting, str]] = Field(
        default=None,
        description="Indicates a post that is part of a [[Blog]]. Note that historically, what we term a \"Blog\""
     "was once known as a \"weblog\", and that what we term a \"BlogPosting\" is now often colloquially"
     "referred to as a \"blog\".",
    )
    blogPost: Optional[Union[List[Union[BlogPosting, str]], BlogPosting, str]] = Field(
        default=None,
        description="A posting that is part of this blog.",
    )
    issn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Serial Number (ISSN) that identifies this serial publication."
     "You can repeat this property to identify different formats of, or the linking ISSN (ISSN-L)"
     "for, this serial publication.",
    )
    



class DeleteAction(UpdateAction):
    """The act of editing a recipient by removing one of its objects.

    See: https://schema.org/DeleteAction
    Model depth: 4
    """
    type_: str = Field(default="DeleteAction", alias='@type', const=True)
    



class BoardingPolicyType(Enumeration):
    """A type of boarding policy used by an airline.

    See: https://schema.org/BoardingPolicyType
    Model depth: 4
    """
    type_: str = Field(default="BoardingPolicyType", alias='@type', const=True)
    



class GroupBoardingPolicy(BoardingPolicyType):
    """The airline boards by groups based on check-in time, priority, etc.

    See: https://schema.org/GroupBoardingPolicy
    Model depth: 5
    """
    type_: str = Field(default="GroupBoardingPolicy", alias='@type', const=True)
    



class BikeStore(Store):
    """A bike store.

    See: https://schema.org/BikeStore
    Model depth: 5
    """
    type_: str = Field(default="BikeStore", alias='@type', const=True)
    



class OnSitePickup(DeliveryMethod):
    """A DeliveryMethod in which an item is collected on site, e.g. in a store or at a box office.

    See: https://schema.org/OnSitePickup
    Model depth: 5
    """
    type_: str = Field(default="OnSitePickup", alias='@type', const=True)
    



class HighSchool(EducationalOrganization):
    """A high school.

    See: https://schema.org/HighSchool
    Model depth: 4
    """
    type_: str = Field(default="HighSchool", alias='@type', const=True)
    



class Synagogue(PlaceOfWorship):
    """A synagogue.

    See: https://schema.org/Synagogue
    Model depth: 5
    """
    type_: str = Field(default="Synagogue", alias='@type', const=True)
    



class PalliativeProcedure(MedicalTherapy, MedicalProcedure):
    """A medical procedure intended primarily for palliative purposes, aimed at relieving"
     "the symptoms of an underlying health condition.

    See: https://schema.org/PalliativeProcedure
    Model depth: 4
    """
    type_: str = Field(default="PalliativeProcedure", alias='@type', const=True)
    



class Optician(MedicalBusiness):
    """A store that sells reading glasses and similar devices for improving vision.

    See: https://schema.org/Optician
    Model depth: 5
    """
    type_: str = Field(default="Optician", alias='@type', const=True)
    



class TelevisionChannel(BroadcastChannel):
    """A unique instance of a television BroadcastService on a CableOrSatelliteService lineup.

    See: https://schema.org/TelevisionChannel
    Model depth: 4
    """
    type_: str = Field(default="TelevisionChannel", alias='@type', const=True)
    



class GenericWebPlatform(DigitalPlatformEnumeration):
    """Represents the generic notion of the Web Platform. More specific codes include [[MobileWebPlatform]]"
     "and [[DesktopWebPlatform]], as an incomplete list.

    See: https://schema.org/GenericWebPlatform
    Model depth: 5
    """
    type_: str = Field(default="GenericWebPlatform", alias='@type', const=True)
    



class PublicationVolume(CreativeWork):
    """A part of a successively published publication such as a periodical or multi-volume"
     "work, often numbered. It may represent a time span, such as a year. See also [blog post](http://blog.schema.org/2014/09/schemaorg-support-for-bibliographic_2.html).

    See: https://schema.org/PublicationVolume
    Model depth: 3
    """
    type_: str = Field(default="PublicationVolume", alias='@type', const=True)
    pageEnd: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work ends; for example \"138\" or \"xvi\".",
    )
    volumeNumber: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="Identifies the volume of publication or multi-part work; for example, \"iii\" or \"2\".",
    )
    pagination: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any description of pages that is not separated into pageStart and pageEnd; for example,"
     "\"1-6, 9, 55\" or \"10-12, 46-49\".",
    )
    pageStart: Optional[Union[List[Union[int, Integer, str, Text]], int, Integer, str, Text]] = Field(
        default=None,
        description="The page on which the work starts; for example \"135\" or \"xiii\".",
    )
    



class ShippingDeliveryTime(StructuredValue):
    """ShippingDeliveryTime provides various pieces of information about delivery times"
     "for shipping.

    See: https://schema.org/ShippingDeliveryTime
    Model depth: 4
    """
    type_: str = Field(default="ShippingDeliveryTime", alias='@type', const=True)
    cutoffTime: Optional[Union[List[Union[time, Time, str]], time, Time, str]] = Field(
        default=None,
        description="Order cutoff time allows merchants to describe the time after which they will no longer"
     "process orders received on that day. For orders processed after cutoff time, one day"
     "gets added to the delivery time estimate. This property is expected to be most typically"
     "used via the [[ShippingRateSettings]] publication pattern. The time is indicated"
     "using the ISO-8601 Time format, e.g. \"23:30:00-05:00\" would represent 6:30 pm Eastern"
     "Standard Time (EST) which is 5 hours behind Coordinated Universal Time (UTC).",
    )
    transitTime: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The typical delay the order has been sent for delivery and the goods reach the final customer."
     "Typical properties: minValue, maxValue, unitCode (d for DAY).",
    )
    handlingTime: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The typical delay between the receipt of the order and the goods either leaving the warehouse"
     "or being prepared for pickup, in case the delivery method is on site pickup. Typical properties:"
     "minValue, maxValue, unitCode (d for DAY). This is by common convention assumed to mean"
     "business days (if a unitCode is used, coded as \"d\"), i.e. only counting days when the"
     "business normally operates.",
    )
    businessDays: Optional[Union[List[Union[OpeningHoursSpecification, str]], OpeningHoursSpecification, str]] = Field(
        default=None,
        description="Days of the week when the merchant typically operates, indicated via opening hours markup.",
    )
    



class UnitPriceSpecification(PriceSpecification):
    """The price asked for a given offer by the respective organization or person.

    See: https://schema.org/UnitPriceSpecification
    Model depth: 5
    """
    type_: str = Field(default="UnitPriceSpecification", alias='@type', const=True)
    priceType: Optional[Union[List[Union[str, Text, PriceTypeEnumeration]], str, Text, PriceTypeEnumeration]] = Field(
        default=None,
        description="Defines the type of a price specified for an offered product, for example a list price,"
     "a (temporary) sale price or a manufacturer suggested retail price. If multiple prices"
     "are specified for an offer the [[priceType]] property can be used to identify the type"
     "of each such specified price. The value of priceType can be specified as a value from enumeration"
     "PriceTypeEnumeration or as a free form text string for price types that are not already"
     "predefined in PriceTypeEnumeration.",
    )
    priceComponentType: Optional[Union[List[Union[PriceComponentTypeEnumeration, str]], PriceComponentTypeEnumeration, str]] = Field(
        default=None,
        description="Identifies a price component (for example, a line item on an invoice), part of the total"
     "price for an offer.",
    )
    billingStart: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="Specifies after how much time this price (or price component) becomes valid and billing"
     "starts. Can be used, for example, to model a price increase after the first year of a subscription."
     "The unit of measurement is specified by the unitCode property.",
    )
    unitCode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The unit of measurement given using the UN/CEFACT Common Code (3 characters) or a URL."
     "Other codes than the UN/CEFACT Common Code may be used with a prefix followed by a colon.",
    )
    billingDuration: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, Duration, str]], StrictInt, StrictFloat, Number, QuantitativeValue, Duration, str]] = Field(
        default=None,
        description="Specifies for how long this price (or price component) will be billed. Can be used, for"
     "example, to model the contractual duration of a subscription or payment plan. Type can"
     "be either a Duration or a Number (in which case the unit of measurement, for example month,"
     "is specified by the unitCode property).",
    )
    unitText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A string or text indicating the unit of measurement. Useful if you cannot provide a standard"
     "unit code for <a href='unitCode'>unitCode</a>.",
    )
    referenceQuantity: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The reference quantity for which a certain price applies, e.g. 1 EUR per 4 kWh of electricity."
     "This property is a replacement for unitOfMeasurement for the advanced cases where the"
     "price does not relate to a standard unit.",
    )
    billingIncrement: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="This property specifies the minimal quantity and rounding increment that will be the"
     "basis for the billing. The unit of measurement is specified by the unitCode property.",
    )
    



class RadioClip(Clip):
    """A short radio program or a segment/part of a radio program.

    See: https://schema.org/RadioClip
    Model depth: 4
    """
    type_: str = Field(default="RadioClip", alias='@type', const=True)
    



class Nonprofit501d(USNonprofitType):
    """Nonprofit501d: Non-profit type referring to Religious and Apostolic Associations.

    See: https://schema.org/Nonprofit501d
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501d", alias='@type', const=True)
    



class HowOrWhereHealthAspect(HealthAspectEnumeration):
    """Information about how or where to find a topic. Also may contain location data that can"
     "be used for where to look for help if the topic is observed.

    See: https://schema.org/HowOrWhereHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="HowOrWhereHealthAspect", alias='@type', const=True)
    



class Otolaryngologic(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that is concerned with the ear, nose and throat and"
     "their respective disease states.

    See: https://schema.org/Otolaryngologic
    Model depth: 5
    """
    type_: str = Field(default="Otolaryngologic", alias='@type', const=True)
    



class PreSale(ItemAvailability):
    """Indicates that the item is available for ordering and delivery before general availability.

    See: https://schema.org/PreSale
    Model depth: 5
    """
    type_: str = Field(default="PreSale", alias='@type', const=True)
    



class Hostel(LodgingBusiness):
    """A hostel - cheap accommodation, often in shared dormitories. <br /><br /> See also the"
     "<a href=\"/docs/hotels.html\">dedicated document on the use of schema.org for marking"
     "up hotels and other forms of accommodations</a>.

    See: https://schema.org/Hostel
    Model depth: 5
    """
    type_: str = Field(default="Hostel", alias='@type', const=True)
    



class PsychologicalTreatment(TherapeuticProcedure):
    """A process of care relying upon counseling, dialogue and communication aimed at improving"
     "a mental health condition without use of drugs.

    See: https://schema.org/PsychologicalTreatment
    Model depth: 5
    """
    type_: str = Field(default="PsychologicalTreatment", alias='@type', const=True)
    



class PerformAction(PlayAction):
    """The act of participating in performance arts.

    See: https://schema.org/PerformAction
    Model depth: 4
    """
    type_: str = Field(default="PerformAction", alias='@type', const=True)
    entertainmentBusiness: Optional[Union[List[Union[EntertainmentBusiness, str]], EntertainmentBusiness, str]] = Field(
        default=None,
        description="A sub property of location. The entertainment business where the action occurred.",
    )
    



class PreOrder(ItemAvailability):
    """Indicates that the item is available for pre-order.

    See: https://schema.org/PreOrder
    Model depth: 5
    """
    type_: str = Field(default="PreOrder", alias='@type', const=True)
    



class ChildrensEvent(Event):
    """Event type: Children's event.

    See: https://schema.org/ChildrensEvent
    Model depth: 3
    """
    type_: str = Field(default="ChildrensEvent", alias='@type', const=True)
    



class AuthoritativeLegalValue(LegalValueLevel):
    """Indicates that the publisher gives some special status to the publication of the document."
     "(\"The Queens Printer\" version of a UK Act of Parliament, or the PDF version of a Directive"
     "published by the EU Office of Publications.) Something \"Authoritative\" is considered"
     "to be also [[OfficialLegalValue]].

    See: https://schema.org/AuthoritativeLegalValue
    Model depth: 5
    """
    type_: str = Field(default="AuthoritativeLegalValue", alias='@type', const=True)
    



class WearableSizeSystemFR(WearableSizeSystemEnumeration):
    """French size system for wearables.

    See: https://schema.org/WearableSizeSystemFR
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemFR", alias='@type', const=True)
    



class BroadcastRelease(MusicAlbumReleaseType):
    """BroadcastRelease.

    See: https://schema.org/BroadcastRelease
    Model depth: 5
    """
    type_: str = Field(default="BroadcastRelease", alias='@type', const=True)
    



class TaxiService(Service):
    """A service for a vehicle for hire with a driver for local travel. Fares are usually calculated"
     "based on distance traveled.

    See: https://schema.org/TaxiService
    Model depth: 4
    """
    type_: str = Field(default="TaxiService", alias='@type', const=True)
    



class TattooParlor(HealthAndBeautyBusiness):
    """A tattoo parlor.

    See: https://schema.org/TattooParlor
    Model depth: 5
    """
    type_: str = Field(default="TattooParlor", alias='@type', const=True)
    



class EnergyStarCertified(EnergyStarEnergyEfficiencyEnumeration):
    """Represents EnergyStar certification.

    See: https://schema.org/EnergyStarCertified
    Model depth: 6
    """
    type_: str = Field(default="EnergyStarCertified", alias='@type', const=True)
    



class SendAction(TransferAction):
    """The act of physically/electronically dispatching an object for transfer from an origin"
     "to a destination. Related actions: * [[ReceiveAction]]: The reciprocal of SendAction."
     "* [[GiveAction]]: Unlike GiveAction, SendAction does not imply the transfer of ownership"
     "(e.g. I can send you my laptop, but I'm not necessarily giving it to you).

    See: https://schema.org/SendAction
    Model depth: 4
    """
    type_: str = Field(default="SendAction", alias='@type', const=True)
    deliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="A sub property of instrument. The method of delivery.",
    )
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class Demand(Intangible):
    """A demand entity represents the public, not necessarily binding, not necessarily exclusive,"
     "announcement by an organization or person to seek a certain type of goods or services."
     "For describing demand using this type, the very same properties used for Offer apply.

    See: https://schema.org/Demand
    Model depth: 3
    """
    type_: str = Field(default="Demand", alias='@type', const=True)
    eligibleQuantity: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The interval and unit of measurement of ordering quantities for which the offer or price"
     "specification is valid. This allows e.g. specifying that a certain freight charge is"
     "valid only for a certain quantity.",
    )
    deliveryLeadTime: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The typical delay between the receipt of the order and the goods either leaving the warehouse"
     "or being prepared for pickup, in case the delivery method is on site pickup.",
    )
    availabilityEnds: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The end of the availability of the product or service included in the offer.",
    )
    seller: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="An entity which offers (sells / leases / lends / loans) the services / goods. A seller may"
     "also be a provider.",
    )
    availabilityStarts: Optional[Union[List[Union[datetime, DateTime, date, Date, time, Time, str]], datetime, DateTime, date, Date, time, Time, str]] = Field(
        default=None,
        description="The beginning of the availability of the product or service included in the offer.",
    )
    areaServed: Optional[Union[List[Union[str, Text, GeoShape, Place, AdministrativeArea]], str, Text, GeoShape, Place, AdministrativeArea]] = Field(
        default=None,
        description="The geographic area where a service or offered item is provided.",
    )
    advanceBookingRequirement: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The amount of time that is required between accepting the offer and the actual usage of"
     "the resource or service.",
    )
    gtin14: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-14 code of the product, or the product to which the offer refers. See [GS1 GTIN"
     "Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin) for more details.",
    )
    warranty: Optional[Union[List[Union[WarrantyPromise, str]], WarrantyPromise, str]] = Field(
        default=None,
        description="The warranty promise(s) included in the offer.",
    )
    inventoryLevel: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The current approximate inventory level for the item or items.",
    )
    eligibleDuration: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The duration for which the given offer is valid.",
    )
    availability: Optional[Union[List[Union[ItemAvailability, str]], ItemAvailability, str]] = Field(
        default=None,
        description="The availability of this item&#x2014;for example In stock, Out of stock, Pre-order,"
     "etc.",
    )
    itemCondition: Optional[Union[List[Union[OfferItemCondition, str]], OfferItemCondition, str]] = Field(
        default=None,
        description="A predefined value from OfferItemCondition specifying the condition of the product"
     "or service, or the products or services included in the offer. Also used for product return"
     "policies to specify the condition of products accepted for returns.",
    )
    gtin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A Global Trade Item Number ([GTIN](https://www.gs1.org/standards/id-keys/gtin))."
     "GTINs identify trade items, including products and services, using numeric identification"
     "codes. The GS1 [digital link specifications](https://www.gs1.org/standards/Digital-Link/)"
     "express GTINs as URLs (URIs, IRIs, etc.). Details including regular expression examples"
     "can be found in, Section 6 of the GS1 URI Syntax specification; see also [schema.org tracking"
     "issue](https://github.com/schemaorg/schemaorg/issues/3156#issuecomment-1209522809)"
     "for schema.org-specific discussion. A correct [[gtin]] value should be a valid GTIN,"
     "which means that it should be an all-numeric string of either 8, 12, 13 or 14 digits, or"
     "a \"GS1 Digital Link\" URL based on such a string. The numeric component should also have"
     "a [valid GS1 check digit](https://www.gs1.org/services/check-digit-calculator)"
     "and meet the other rules for valid GTINs. See also [GS1's GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "and [Wikipedia](https://en.wikipedia.org/wiki/Global_Trade_Item_Number) for"
     "more details. Left-padding of the gtin values is not required or encouraged. The [[gtin]]"
     "property generalizes the earlier [[gtin8]], [[gtin12]], [[gtin13]], and [[gtin14]]"
     "properties. Note also that this is a definition for how to include GTINs in Schema.org"
     "data, and not a definition of GTINs in general - see the GS1 documentation for authoritative"
     "details.",
    )
    itemOffered: Optional[Union[List[Union[MenuItem, Event, Product, Trip, Service, AggregateOffer, CreativeWork, str]], MenuItem, Event, Product, Trip, Service, AggregateOffer, CreativeWork, str]] = Field(
        default=None,
        description="An item being offered (or demanded). The transactional nature of the offer or demand"
     "is documented using [[businessFunction]], e.g. sell, lease etc. While several common"
     "expected types are listed explicitly in this definition, others can be used. Using a"
     "second type, such as Product or a subtype of Product, can clarify the nature of the offer.",
    )
    businessFunction: Optional[Union[List[Union[BusinessFunction, str]], BusinessFunction, str]] = Field(
        default=None,
        description="The business function (e.g. sell, lease, repair, dispose) of the offer or component"
     "of a bundle (TypeAndQuantityNode). The default is http://purl.org/goodrelations/v1#Sell.",
    )
    gtin12: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-12 code of the product, or the product to which the offer refers. The GTIN-12"
     "is the 12-digit GS1 Identification Key composed of a U.P.C. Company Prefix, Item Reference,"
     "and Check Digit used to identify trade items. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    includesObject: Optional[Union[List[Union[TypeAndQuantityNode, str]], TypeAndQuantityNode, str]] = Field(
        default=None,
        description="This links to a node or nodes indicating the exact quantity of the products included in"
     "an [[Offer]] or [[ProductCollection]].",
    )
    eligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "valid. See also [[ineligibleRegion]].",
    )
    asin: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An Amazon Standard Identification Number (ASIN) is a 10-character alphanumeric unique"
     "identifier assigned by Amazon.com and its partners for product identification within"
     "the Amazon organization (summary from [Wikipedia](https://en.wikipedia.org/wiki/Amazon_Standard_Identification_Number)'s"
     "article). Note also that this is a definition for how to include ASINs in Schema.org data,"
     "and not a definition of ASINs in general - see documentation from Amazon for authoritative"
     "details. ASINs are most commonly encoded as text strings, but the [asin] property supports"
     "URL/URI as potential values too.",
    )
    gtin8: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-8 code of the product, or the product to which the offer refers. This code is also"
     "known as EAN/UCC-8 or 8-digit EAN. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    ineligibleRegion: Optional[Union[List[Union[str, Text, GeoShape, Place]], str, Text, GeoShape, Place]] = Field(
        default=None,
        description="The ISO 3166-1 (ISO 3166-1 alpha-2) or ISO 3166-2 code, the place, or the GeoShape for"
     "the geo-political region(s) for which the offer or delivery charge specification is"
     "not valid, e.g. a region where the transaction is not allowed. See also [[eligibleRegion]].",
    )
    priceSpecification: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="One or more detailed price specifications, indicating the unit price and delivery or"
     "payment charges.",
    )
    validFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date when the item becomes valid.",
    )
    eligibleTransactionVolume: Optional[Union[List[Union[PriceSpecification, str]], PriceSpecification, str]] = Field(
        default=None,
        description="The transaction volume, in a monetary unit, for which the offer or price specification"
     "is valid, e.g. for indicating a minimal purchasing volume, to express free shipping"
     "above a certain order volume, or to limit the acceptance of credit cards to purchases"
     "to a certain minimal amount.",
    )
    mpn: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Manufacturer Part Number (MPN) of the product, or the product to which the offer refers.",
    )
    availableAtOrFrom: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="The place(s) from which the offer can be obtained (e.g. store locations).",
    )
    eligibleCustomerType: Optional[Union[List[Union[BusinessEntityType, str]], BusinessEntityType, str]] = Field(
        default=None,
        description="The type(s) of customers for which the given offer is valid.",
    )
    gtin13: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The GTIN-13 code of the product, or the product to which the offer refers. This is equivalent"
     "to 13-digit ISBN codes and EAN UCC-13. Former 12-digit UPC codes can be converted into"
     "a GTIN-13 code by simply adding a preceding zero. See [GS1 GTIN Summary](http://www.gs1.org/barcodes/technical/idkeys/gtin)"
     "for more details.",
    )
    serialNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The serial number or any alphanumeric identifier of a particular product. When attached"
     "to an offer, it is a shortcut for the serial number of the product included in the offer.",
    )
    sku: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The Stock Keeping Unit (SKU), i.e. a merchant-specific identifier for a product or service,"
     "or the product to which the offer refers.",
    )
    acceptedPaymentMethod: Optional[Union[List[Union[LoanOrCredit, PaymentMethod, str]], LoanOrCredit, PaymentMethod, str]] = Field(
        default=None,
        description="The payment method(s) accepted by seller for this offer.",
    )
    availableDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="The delivery method(s) available for this offer.",
    )
    



class SubscribeAction(InteractAction):
    """The act of forming a personal connection with someone/something (object) unidirectionally/asymmetrically"
     "to get updates pushed to. Related actions: * [[FollowAction]]: Unlike FollowAction,"
     "SubscribeAction implies that the subscriber acts as a passive agent being constantly/actively"
     "pushed for updates. * [[RegisterAction]]: Unlike RegisterAction, SubscribeAction"
     "implies that the agent is interested in continuing receiving updates from the object."
     "* [[JoinAction]]: Unlike JoinAction, SubscribeAction implies that the agent is interested"
     "in continuing receiving updates from the object.

    See: https://schema.org/SubscribeAction
    Model depth: 4
    """
    type_: str = Field(default="SubscribeAction", alias='@type', const=True)
    



class Number(DataType):
    """Data type: Number. Usage guidelines: * Use values from 0123456789 (Unicode 'DIGIT ZERO'"
     "(U+0030) to 'DIGIT NINE' (U+0039)) rather than superficially similar Unicode symbols."
     "* Use '.' (Unicode 'FULL STOP' (U+002E)) rather than ',' to indicate a decimal point."
     "Avoid using these symbols as a readability separator.

    See: https://schema.org/Number
    Model depth: 5
    """
    type_: str = Field(default="Number", alias='@type', const=True)
    



class Waterfall(BodyOfWater):
    """A waterfall, like Niagara.

    See: https://schema.org/Waterfall
    Model depth: 5
    """
    type_: str = Field(default="Waterfall", alias='@type', const=True)
    



class TakeAction(TransferAction):
    """The act of gaining ownership of an object from an origin. Reciprocal of GiveAction. Related"
     "actions: * [[GiveAction]]: The reciprocal of TakeAction. * [[ReceiveAction]]: Unlike"
     "ReceiveAction, TakeAction implies that ownership has been transferred.

    See: https://schema.org/TakeAction
    Model depth: 4
    """
    type_: str = Field(default="TakeAction", alias='@type', const=True)
    



class State(AdministrativeArea):
    """A state or province of a country.

    See: https://schema.org/State
    Model depth: 4
    """
    type_: str = Field(default="State", alias='@type', const=True)
    



class ReturnFeesCustomerResponsibility(ReturnFeesEnumeration):
    """Specifies that product returns must be paid for, and are the responsibility of, the customer.

    See: https://schema.org/ReturnFeesCustomerResponsibility
    Model depth: 5
    """
    type_: str = Field(default="ReturnFeesCustomerResponsibility", alias='@type', const=True)
    



class NewCondition(OfferItemCondition):
    """Indicates that the item is new.

    See: https://schema.org/NewCondition
    Model depth: 5
    """
    type_: str = Field(default="NewCondition", alias='@type', const=True)
    



class LeaveAction(InteractAction):
    """An agent leaves an event / group with participants/friends at a location. Related actions:"
     "* [[JoinAction]]: The antonym of LeaveAction. * [[UnRegisterAction]]: Unlike UnRegisterAction,"
     "LeaveAction implies leaving a group/team of people rather than a service.

    See: https://schema.org/LeaveAction
    Model depth: 4
    """
    type_: str = Field(default="LeaveAction", alias='@type', const=True)
    event: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="Upcoming or past event associated with this place, organization, or action.",
    )
    



class WearableMeasurementChestOrBust(WearableMeasurementTypeEnumeration):
    """Measurement of the chest/bust section, for example of a suit

    See: https://schema.org/WearableMeasurementChestOrBust
    Model depth: 6
    """
    type_: str = Field(default="WearableMeasurementChestOrBust", alias='@type', const=True)
    



class Property(Intangible):
    """A property, used to indicate attributes and relationships of some Thing; equivalent"
     "to rdf:Property.

    See: https://schema.org/Property
    Model depth: 3
    """
    type_: str = Field(default="Property", alias='@type', const=True)
    supersededBy: Optional[Union[List[Union[Enumeration, Class, Property, str]], Enumeration, Class, Property, str]] = Field(
        default=None,
        description="Relates a term (i.e. a property, class or enumeration) to one that supersedes it.",
    )
    domainIncludes: Optional[Union[List[Union[Class, str]], Class, str]] = Field(
        default=None,
        description="Relates a property to a class that is (one of) the type(s) the property is expected to be"
     "used on.",
    )
    inverseOf: Optional[Union[List[Union[Property, str]], Property, str]] = Field(
        default=None,
        description="Relates a property to a property that is its inverse. Inverse properties relate the same"
     "pairs of items to each other, but in reversed direction. For example, the 'alumni' and"
     "'alumniOf' properties are inverseOf each other. Some properties don't have explicit"
     "inverses; in these situations RDFa and JSON-LD syntax for reverse properties can be"
     "used.",
    )
    rangeIncludes: Optional[Union[List[Union[Class, str]], Class, str]] = Field(
        default=None,
        description="Relates a property to a class that constitutes (one of) the expected type(s) for values"
     "of the property.",
    )
    



class TVSeason(CreativeWorkSeason, CreativeWork):
    """Season dedicated to TV broadcast and associated online delivery.

    See: https://schema.org/TVSeason
    Model depth: 3
    """
    type_: str = Field(default="TVSeason", alias='@type', const=True)
    partOfTVSeries: Optional[Union[List[Union[TVSeries, str]], TVSeries, str]] = Field(
        default=None,
        description="The TV series to which this episode or season belongs.",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    



class WPHeader(WebPageElement):
    """The header section of the page.

    See: https://schema.org/WPHeader
    Model depth: 4
    """
    type_: str = Field(default="WPHeader", alias='@type', const=True)
    



class Nonprofit501c26(USNonprofitType):
    """Nonprofit501c26: Non-profit type referring to State-Sponsored Organizations Providing"
     "Health Coverage for High-Risk Individuals.

    See: https://schema.org/Nonprofit501c26
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c26", alias='@type', const=True)
    



class ShoppingCenter(LocalBusiness):
    """A shopping center or mall.

    See: https://schema.org/ShoppingCenter
    Model depth: 4
    """
    type_: str = Field(default="ShoppingCenter", alias='@type', const=True)
    



class MedicalCode(CategoryCode, MedicalIntangible):
    """A code for a medical entity.

    See: https://schema.org/MedicalCode
    Model depth: 4
    """
    type_: str = Field(default="MedicalCode", alias='@type', const=True)
    codeValue: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short textual code that uniquely identifies the value.",
    )
    codingSystem: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The coding system, e.g. 'ICD-10'.",
    )
    



class PronounceableText(Text):
    """Data type: PronounceableText.

    See: https://schema.org/PronounceableText
    Model depth: 6
    """
    type_: str = Field(default="PronounceableText", alias='@type', const=True)
    textValue: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Text value being annotated.",
    )
    phoneticText: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Representation of a text [[textValue]] using the specified [[speechToTextMarkup]]."
     "For example the city name of Houston in IPA: /ˈhjuːstən/.",
    )
    inLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="The language of the content or performance or used in an action. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[availableLanguage]].",
    )
    speechToTextMarkup: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Form of markup used. eg. [SSML](https://www.w3.org/TR/speech-synthesis11) or [IPA](https://www.wikidata.org/wiki/Property:P898).",
    )
    



class TransformedContent(MediaManipulationRatingEnumeration):
    """Content coded 'transformed content' in a [[MediaReview]], considered in the context"
     "of how it was published or shared. For a [[VideoObject]] to be 'transformed content':"
     "or all of the video has been manipulated to transform the footage itself. This category"
     "includes using tools like the Adobe Suite to change the speed of the video, add or remove"
     "visual elements or dub audio. Deepfakes are also a subset of transformation. For an [[ImageObject]]"
     "to be 'transformed content': Adding or deleting visual elements to give the image a different"
     "meaning with the intention to mislead. For an [[ImageObject]] with embedded text to"
     "be 'transformed content': Adding or deleting visual elements to give the image a different"
     "meaning with the intention to mislead. For an [[AudioObject]] to be 'transformed content':"
     "Part or all of the audio has been manipulated to alter the words or sounds, or the audio"
     "has been synthetically generated, such as to create a sound-alike voice.

    See: https://schema.org/TransformedContent
    Model depth: 5
    """
    type_: str = Field(default="TransformedContent", alias='@type', const=True)
    



class MotorcycleRepair(AutomotiveBusiness):
    """A motorcycle repair shop.

    See: https://schema.org/MotorcycleRepair
    Model depth: 5
    """
    type_: str = Field(default="MotorcycleRepair", alias='@type', const=True)
    



class ActiveActionStatus(ActionStatusType):
    """An in-progress action (e.g., while watching the movie, or driving to a location).

    See: https://schema.org/ActiveActionStatus
    Model depth: 6
    """
    type_: str = Field(default="ActiveActionStatus", alias='@type', const=True)
    



class EducationalOccupationalProgram(Intangible):
    """A program offered by an institution which determines the learning progress to achieve"
     "an outcome, usually a credential like a degree or certificate. This would define a discrete"
     "set of opportunities (e.g., job, courses) that together constitute a program with a"
     "clear start, end, set of requirements, and transition to a new occupational opportunity"
     "(e.g., a job), or sometimes a higher educational opportunity (e.g., an advanced degree).

    See: https://schema.org/EducationalOccupationalProgram
    Model depth: 3
    """
    type_: str = Field(default="EducationalOccupationalProgram", alias='@type', const=True)
    applicationDeadline: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date at which the program stops collecting applications for the next enrollment"
     "cycle.",
    )
    timeToComplete: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The expected length of time to complete the program if attending full-time.",
    )
    timeOfDay: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The time of day the program normally runs. For example, \"evenings\".",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    termsPerYear: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The number of times terms of study are offered per year. Semesters and quarters are common"
     "units for term. For example, if the student can only take 2 semesters for the program in"
     "one year, then termsPerYear should be 2.",
    )
    termDuration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The amount of time in a term as defined by the institution. A term is a length of time where"
     "students take one or more classes. Semesters and quarters are common units for term.",
    )
    occupationalCredentialAwarded: Optional[Union[List[Union[AnyUrl, URL, str, Text, EducationalOccupationalCredential]], AnyUrl, URL, str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="A description of the qualification, award, certificate, diploma or other occupational"
     "credential awarded as a consequence of successful completion of this course or program.",
    )
    financialAidEligible: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="A financial aid type or program which students may use to pay for tuition or fees associated"
     "with the program.",
    )
    salaryUponCompletion: Optional[Union[List[Union[MonetaryAmountDistribution, str]], MonetaryAmountDistribution, str]] = Field(
        default=None,
        description="The expected salary upon completing the training.",
    )
    hasCourse: Optional[Union[List[Union[Course, str]], Course, str]] = Field(
        default=None,
        description="A course or class that is one of the learning opportunities that constitute an educational"
     "/ occupational program. No information is implied about whether the course is mandatory"
     "or optional; no guarantee is implied about whether the course will be available to everyone"
     "on the program.",
    )
    educationalCredentialAwarded: Optional[Union[List[Union[AnyUrl, URL, str, Text, EducationalOccupationalCredential]], AnyUrl, URL, str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="A description of the qualification, award, certificate, diploma or other educational"
     "credential awarded as a consequence of successful completion of this course or program.",
    )
    typicalCreditsPerTerm: Optional[Union[List[Union[int, Integer, StructuredValue, str]], int, Integer, StructuredValue, str]] = Field(
        default=None,
        description="The number of credits or units a full-time student would be expected to take in 1 term however"
     "'term' is defined by the institution.",
    )
    maximumEnrollment: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The maximum number of students who may be enrolled in the program.",
    )
    programType: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The type of educational or occupational program. For example, classroom, internship,"
     "alternance, etc.",
    )
    programPrerequisites: Optional[Union[List[Union[str, Text, Course, EducationalOccupationalCredential, AlignmentObject]], str, Text, Course, EducationalOccupationalCredential, AlignmentObject]] = Field(
        default=None,
        description="Prerequisites for enrolling in the program.",
    )
    educationalProgramMode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="Similar to courseMode, the medium or means of delivery of the program as a whole. The value"
     "may either be a text label (e.g. \"online\", \"onsite\" or \"blended\"; \"synchronous\""
     "or \"asynchronous\"; \"full-time\" or \"part-time\") or a URL reference to a term from"
     "a controlled vocabulary (e.g. https://ceds.ed.gov/element/001311#Asynchronous"
     ").",
    )
    dayOfWeek: Optional[Union[List[Union[DayOfWeek, str]], DayOfWeek, str]] = Field(
        default=None,
        description="The day of the week for which these opening hours are valid.",
    )
    occupationalCategory: Optional[Union[List[Union[str, Text, CategoryCode]], str, Text, CategoryCode]] = Field(
        default=None,
        description="A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html),"
     "[ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or"
     "similar, with the property repeated for each applicable value. Ideally the taxonomy"
     "should be identified, and both the textual label and formal code for the category should"
     "be provided. Note: for historical reasons, any textual label and formal code provided"
     "as a literal may be assumed to be from O*NET-SOC.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    numberOfCredits: Optional[Union[List[Union[int, Integer, StructuredValue, str]], int, Integer, StructuredValue, str]] = Field(
        default=None,
        description="The number of credits or units awarded by a Course or required to complete an EducationalOccupationalProgram.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    trainingSalary: Optional[Union[List[Union[MonetaryAmountDistribution, str]], MonetaryAmountDistribution, str]] = Field(
        default=None,
        description="The estimated salary earned while in the program.",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    applicationStartDate: Optional[Union[List[Union[date, Date, str]], date, Date, str]] = Field(
        default=None,
        description="The date at which the program begins collecting applications for the next enrollment"
     "cycle.",
    )
    



class WorkBasedProgram(EducationalOccupationalProgram):
    """A program with both an educational and employment component. Typically based at a workplace"
     "and structured around work-based learning, with the aim of instilling competencies"
     "related to an occupation. WorkBasedProgram is used to distinguish programs such as"
     "apprenticeships from school, college or other classroom based educational programs.

    See: https://schema.org/WorkBasedProgram
    Model depth: 4
    """
    type_: str = Field(default="WorkBasedProgram", alias='@type', const=True)
    occupationalCategory: Optional[Union[List[Union[str, Text, CategoryCode]], str, Text, CategoryCode]] = Field(
        default=None,
        description="A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html),"
     "[ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or"
     "similar, with the property repeated for each applicable value. Ideally the taxonomy"
     "should be identified, and both the textual label and formal code for the category should"
     "be provided. Note: for historical reasons, any textual label and formal code provided"
     "as a literal may be assumed to be from O*NET-SOC.",
    )
    trainingSalary: Optional[Union[List[Union[MonetaryAmountDistribution, str]], MonetaryAmountDistribution, str]] = Field(
        default=None,
        description="The estimated salary earned while in the program.",
    )
    



class DefinedRegion(StructuredValue):
    """A DefinedRegion is a geographic area defined by potentially arbitrary (rather than"
     "political, administrative or natural geographical) criteria. Properties are provided"
     "for defining a region by reference to sets of postal codes. Examples: a delivery destination"
     "when shopping. Region where regional pricing is configured. Requirement 1: Country:"
     "US States: \"NY\", \"CA\" Requirement 2: Country: US PostalCode Set: { [94000-94585],"
     "[97000, 97999], [13000, 13599]} { [12345, 12345], [78945, 78945], } Region = state,"
     "canton, prefecture, autonomous community...

    See: https://schema.org/DefinedRegion
    Model depth: 4
    """
    type_: str = Field(default="DefinedRegion", alias='@type', const=True)
    postalCodePrefix: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A defined range of postal codes indicated by a common textual prefix. Used for non-numeric"
     "systems such as UK.",
    )
    addressCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2"
     "country code](http://en.wikipedia.org/wiki/ISO_3166-1).",
    )
    postalCodeRange: Optional[Union[List[Union[PostalCodeRangeSpecification, str]], PostalCodeRangeSpecification, str]] = Field(
        default=None,
        description="A defined range of postal codes.",
    )
    postalCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The postal code. For example, 94043.",
    )
    addressRegion: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The region in which the locality is, and which is in the country. For example, California"
     "or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country).",
    )
    



class Distillery(FoodEstablishment):
    """A distillery.

    See: https://schema.org/Distillery
    Model depth: 5
    """
    type_: str = Field(default="Distillery", alias='@type', const=True)
    



class BusOrCoach(Vehicle):
    """A bus (also omnibus or autobus) is a road vehicle designed to carry passengers. Coaches"
     "are luxury busses, usually in service for long distance travel.

    See: https://schema.org/BusOrCoach
    Model depth: 4
    """
    type_: str = Field(default="BusOrCoach", alias='@type', const=True)
    roofLoad: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The permitted total weight of cargo and installations (e.g. a roof rack) on top of the"
     "vehicle. Typical unit code(s): KGM for kilogram, LBR for pound * Note 1: You can indicate"
     "additional information in the [[name]] of the [[QuantitativeValue]] node. * Note 2:"
     "You may also link to a [[QualitativeValue]] node that provides additional information"
     "using [[valueReference]] * Note 3: Note that you can use [[minValue]] and [[maxValue]]"
     "to indicate ranges.",
    )
    acrissCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The ACRISS Car Classification Code is a code used by many car rental companies, for classifying"
     "vehicles. ACRISS stands for Association of Car Rental Industry Systems and Standards.",
    )
    



class BodyMeasurementHips(BodyMeasurementTypeEnumeration):
    """Girth of hips (measured around the buttocks). Used, for example, to fit skirts.

    See: https://schema.org/BodyMeasurementHips
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementHips", alias='@type', const=True)
    



class Researcher(Audience):
    """Researchers.

    See: https://schema.org/Researcher
    Model depth: 4
    """
    type_: str = Field(default="Researcher", alias='@type', const=True)
    



class IOSPlatform(DigitalPlatformEnumeration):
    """Represents the broad notion of iOS-based operating systems.

    See: https://schema.org/IOSPlatform
    Model depth: 5
    """
    type_: str = Field(default="IOSPlatform", alias='@type', const=True)
    



class Quiz(LearningResource):
    """Quiz: A test of knowledge, skills and abilities.

    See: https://schema.org/Quiz
    Model depth: 4
    """
    type_: str = Field(default="Quiz", alias='@type', const=True)
    



class LowFatDiet(RestrictedDiet):
    """A diet focused on reduced fat and cholesterol intake.

    See: https://schema.org/LowFatDiet
    Model depth: 5
    """
    type_: str = Field(default="LowFatDiet", alias='@type', const=True)
    



class Airline(Organization):
    """An organization that provides flights for passengers.

    See: https://schema.org/Airline
    Model depth: 3
    """
    type_: str = Field(default="Airline", alias='@type', const=True)
    boardingPolicy: Optional[Union[List[Union[BoardingPolicyType, str]], BoardingPolicyType, str]] = Field(
        default=None,
        description="The type of boarding policy used by the airline (e.g. zone-based or group-based).",
    )
    iataCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="IATA identifier for an airline or airport.",
    )
    



class Chiropractic(MedicineSystem):
    """A system of medicine focused on the relationship between the body's structure, mainly"
     "the spine, and its functioning.

    See: https://schema.org/Chiropractic
    Model depth: 6
    """
    type_: str = Field(default="Chiropractic", alias='@type', const=True)
    



class WesternConventional(MedicineSystem):
    """The conventional Western system of medicine, that aims to apply the best available evidence"
     "gained from the scientific method to clinical decision making. Also known as conventional"
     "or Western medicine.

    See: https://schema.org/WesternConventional
    Model depth: 6
    """
    type_: str = Field(default="WesternConventional", alias='@type', const=True)
    



class MerchantReturnUnspecified(MerchantReturnEnumeration):
    """Specifies that a product return policy is not provided.

    See: https://schema.org/MerchantReturnUnspecified
    Model depth: 5
    """
    type_: str = Field(default="MerchantReturnUnspecified", alias='@type', const=True)
    



class ReceiveAction(TransferAction):
    """The act of physically/electronically taking delivery of an object that has been transferred"
     "from an origin to a destination. Reciprocal of SendAction. Related actions: * [[SendAction]]:"
     "The reciprocal of ReceiveAction. * [[TakeAction]]: Unlike TakeAction, ReceiveAction"
     "does not imply that the ownership has been transferred (e.g. I can receive a package,"
     "but it does not mean the package is now mine).

    See: https://schema.org/ReceiveAction
    Model depth: 4
    """
    type_: str = Field(default="ReceiveAction", alias='@type', const=True)
    deliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="A sub property of instrument. The method of delivery.",
    )
    sender: Optional[Union[List[Union[Organization, Audience, Person, str]], Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the sending end of the action.",
    )
    



class ReplyAction(CommunicateAction):
    """The act of responding to a question/message asked/sent by the object. Related to [[AskAction]]."
     "Related actions: * [[AskAction]]: Appears generally as an origin of a ReplyAction.

    See: https://schema.org/ReplyAction
    Model depth: 5
    """
    type_: str = Field(default="ReplyAction", alias='@type', const=True)
    resultComment: Optional[Union[List[Union[Comment, str]], Comment, str]] = Field(
        default=None,
        description="A sub property of result. The Comment created or sent as a result of this action.",
    )
    



class RightHandDriving(SteeringPositionValue):
    """The steering position is on the right side of the vehicle (viewed from the main direction"
     "of driving).

    See: https://schema.org/RightHandDriving
    Model depth: 6
    """
    type_: str = Field(default="RightHandDriving", alias='@type', const=True)
    



class SearchAction(Action):
    """The act of searching for an object. Related actions: * [[FindAction]]: SearchAction"
     "generally leads to a FindAction, but not necessarily.

    See: https://schema.org/SearchAction
    Model depth: 3
    """
    type_: str = Field(default="SearchAction", alias='@type', const=True)
    query: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A sub property of instrument. The query used on this action.",
    )
    



class InternationalTrial(MedicalTrialDesign):
    """An international trial.

    See: https://schema.org/InternationalTrial
    Model depth: 6
    """
    type_: str = Field(default="InternationalTrial", alias='@type', const=True)
    



class MedicalRiskCalculator(MedicalRiskEstimator):
    """A complex mathematical calculation requiring an online calculator, used to assess"
     "prognosis. Note: use the url property of Thing to record any URLs for online calculators.

    See: https://schema.org/MedicalRiskCalculator
    Model depth: 4
    """
    type_: str = Field(default="MedicalRiskCalculator", alias='@type', const=True)
    



class MovieTheater(EntertainmentBusiness, CivicStructure):
    """A movie theater.

    See: https://schema.org/MovieTheater
    Model depth: 4
    """
    type_: str = Field(default="MovieTheater", alias='@type', const=True)
    screenCount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The number of screens in the movie theater.",
    )
    



class ShippingRateSettings(StructuredValue):
    """A ShippingRateSettings represents re-usable pieces of shipping information. It is"
     "designed for publication on an URL that may be referenced via the [[shippingSettingsLink]]"
     "property of an [[OfferShippingDetails]]. Several occurrences can be published, distinguished"
     "and matched (i.e. identified/referenced) by their different values for [[shippingLabel]].

    See: https://schema.org/ShippingRateSettings
    Model depth: 4
    """
    type_: str = Field(default="ShippingRateSettings", alias='@type', const=True)
    shippingDestination: Optional[Union[List[Union[DefinedRegion, str]], DefinedRegion, str]] = Field(
        default=None,
        description="indicates (possibly multiple) shipping destinations. These can be defined in several"
     "ways, e.g. postalCode ranges.",
    )
    shippingLabel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Label to match an [[OfferShippingDetails]] with a [[ShippingRateSettings]] (within"
     "the context of a [[shippingSettingsLink]] cross-reference).",
    )
    doesNotShip: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates when shipping to a particular [[shippingDestination]] is not available.",
    )
    freeShippingThreshold: Optional[Union[List[Union[DeliveryChargeSpecification, MonetaryAmount, str]], DeliveryChargeSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="A monetary value above (or at) which the shipping rate becomes free. Intended to be used"
     "via an [[OfferShippingDetails]] with [[shippingSettingsLink]] matching this [[ShippingRateSettings]].",
    )
    shippingRate: Optional[Union[List[Union[MonetaryAmount, str]], MonetaryAmount, str]] = Field(
        default=None,
        description="The shipping rate is the cost of shipping to the specified destination. Typically, the"
     "maxValue and currency values (of the [[MonetaryAmount]]) are most appropriate.",
    )
    isUnlabelledFallback: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="This can be marked 'true' to indicate that some published [[DeliveryTimeSettings]]"
     "or [[ShippingRateSettings]] are intended to apply to all [[OfferShippingDetails]]"
     "published by the same merchant, when referenced by a [[shippingSettingsLink]] in those"
     "settings. It is not meaningful to use a 'true' value for this property alongside a transitTimeLabel"
     "(for [[DeliveryTimeSettings]]) or shippingLabel (for [[ShippingRateSettings]]),"
     "since this property is for use with unlabelled settings.",
    )
    



class RsvpResponseMaybe(RsvpResponseType):
    """The invitee may or may not attend.

    See: https://schema.org/RsvpResponseMaybe
    Model depth: 5
    """
    type_: str = Field(default="RsvpResponseMaybe", alias='@type', const=True)
    



class Ear(PhysicalExam):
    """Ear function assessment with clinical examination.

    See: https://schema.org/Ear
    Model depth: 5
    """
    type_: str = Field(default="Ear", alias='@type', const=True)
    



class WearAction(UseAction):
    """The act of dressing oneself in clothing.

    See: https://schema.org/WearAction
    Model depth: 5
    """
    type_: str = Field(default="WearAction", alias='@type', const=True)
    



class BusReservation(Reservation):
    """A reservation for bus travel. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations."
     "For offers of tickets, use [[Offer]].

    See: https://schema.org/BusReservation
    Model depth: 4
    """
    type_: str = Field(default="BusReservation", alias='@type', const=True)
    



class ArchiveComponent(CreativeWork):
    """An intangible type to be applied to any archive content, carrying with it a set of properties"
     "required to describe archival items and collections.

    See: https://schema.org/ArchiveComponent
    Model depth: 3
    """
    type_: str = Field(default="ArchiveComponent", alias='@type', const=True)
    holdingArchive: Optional[Union[List[Union[ArchiveOrganization, str]], ArchiveOrganization, str]] = Field(
        default=None,
        description="[[ArchiveOrganization]] that holds, keeps or maintains the [[ArchiveComponent]].",
    )
    itemLocation: Optional[Union[List[Union[str, Text, Place, PostalAddress]], str, Text, Place, PostalAddress]] = Field(
        default=None,
        description="Current location of the item.",
    )
    



class Library(LocalBusiness):
    """A library.

    See: https://schema.org/Library
    Model depth: 4
    """
    type_: str = Field(default="Library", alias='@type', const=True)
    



class MerchantReturnFiniteReturnWindow(MerchantReturnEnumeration):
    """Specifies that there is a finite window for product returns.

    See: https://schema.org/MerchantReturnFiniteReturnWindow
    Model depth: 5
    """
    type_: str = Field(default="MerchantReturnFiniteReturnWindow", alias='@type', const=True)
    



class SpecialAnnouncement(CreativeWork):
    """A SpecialAnnouncement combines a simple date-stamped textual information update"
     "with contextualized Web links and other structured data. It represents an information"
     "update made by a locally-oriented organization, for example schools, pharmacies,"
     "healthcare providers, community groups, police, local government. For work in progress"
     "guidelines on Coronavirus-related markup see [this doc](https://docs.google.com/document/d/14ikaGCKxo50rRM7nvKSlbUpjyIk2WMQd3IkB1lItlrM/edit#)."
     "The motivating scenario for SpecialAnnouncement is the [Coronavirus pandemic](https://en.wikipedia.org/wiki/2019%E2%80%9320_coronavirus_pandemic),"
     "and the initial vocabulary is oriented to this urgent situation. Schema.org expect"
     "to improve the markup iteratively as it is deployed and as feedback emerges from use."
     "In addition to our usual [Github entry](https://github.com/schemaorg/schemaorg/issues/2490),"
     "feedback comments can also be provided in [this document](https://docs.google.com/document/d/1fpdFFxk8s87CWwACs53SGkYv3aafSxz_DTtOQxMrBJQ/edit#)."
     "While this schema is designed to communicate urgent crisis-related information, it"
     "is not the same as an emergency warning technology like [CAP](https://en.wikipedia.org/wiki/Common_Alerting_Protocol),"
     "although there may be overlaps. The intent is to cover the kinds of everyday practical"
     "information being posted to existing websites during an emergency situation. Several"
     "kinds of information can be provided: We encourage the provision of \"name\", \"text\","
     "\"datePosted\", \"expires\" (if appropriate), \"category\" and \"url\" as a simple"
     "baseline. It is important to provide a value for \"category\" where possible, most ideally"
     "as a well known URL from Wikipedia or Wikidata. In the case of the 2019-2020 Coronavirus"
     "pandemic, this should be \"https://en.wikipedia.org/w/index.php?title=2019-20\_coronavirus\_pandemic\""
     "or \"https://www.wikidata.org/wiki/Q81068910\". For many of the possible properties,"
     "values can either be simple links or an inline description, depending on whether a summary"
     "is available. For a link, provide just the URL of the appropriate page as the property's"
     "value. For an inline description, use a [[WebContent]] type, and provide the url as a"
     "property of that, alongside at least a simple \"[[text]]\" summary of the page. It is"
     "unlikely that a single SpecialAnnouncement will need all of the possible properties"
     "simultaneously. We expect that in many cases the page referenced might contain more"
     "specialized structured data, e.g. contact info, [[openingHours]], [[Event]], [[FAQPage]]"
     "etc. By linking to those pages from a [[SpecialAnnouncement]] you can help make it clearer"
     "that the events are related to the situation (e.g. Coronavirus) indicated by the [[category]]"
     "property of the [[SpecialAnnouncement]]. Many [[SpecialAnnouncement]]s will relate"
     "to particular regions and to identifiable local organizations. Use [[spatialCoverage]]"
     "for the region, and [[announcementLocation]] to indicate specific [[LocalBusiness]]es"
     "and [[CivicStructure]]s. If the announcement affects both a particular region and"
     "a specific location (for example, a library closure that serves an entire region), use"
     "both [[spatialCoverage]] and [[announcementLocation]]. The [[about]] property"
     "can be used to indicate entities that are the focus of the announcement. We now recommend"
     "using [[about]] only for representing non-location entities (e.g. a [[Course]] or"
     "a [[RadioStation]]). For places, use [[announcementLocation]] and [[spatialCoverage]]."
     "Consumers of this markup should be aware that the initial design encouraged the use of"
     "[[about]] for locations too. The basic content of [[SpecialAnnouncement]] is similar"
     "to that of an [RSS](https://en.wikipedia.org/wiki/RSS) or [Atom](https://en.wikipedia.org/wiki/Atom_(Web_standard))"
     "feed. For publishers without such feeds, basic feed-like information can be shared"
     "by posting [[SpecialAnnouncement]] updates in a page, e.g. using JSON-LD. For sites"
     "with Atom/RSS functionality, you can point to a feed with the [[webFeed]] property."
     "This can be a simple URL, or an inline [[DataFeed]] object, with [[encodingFormat]]"
     "providing media type information, e.g. \"application/rss+xml\" or \"application/atom+xml\".

    See: https://schema.org/SpecialAnnouncement
    Model depth: 3
    """
    type_: str = Field(default="SpecialAnnouncement", alias='@type', const=True)
    diseaseSpreadStatistics: Optional[Union[List[Union[AnyUrl, URL, Observation, Dataset, WebContent, str]], AnyUrl, URL, Observation, Dataset, WebContent, str]] = Field(
        default=None,
        description="Statistical information about the spread of a disease, either as [[WebContent]], or"
     "described directly as a [[Dataset]], or the specific [[Observation]]s in the dataset."
     "When a [[WebContent]] URL is provided, the page indicated might also contain more such"
     "markup.",
    )
    publicTransportClosuresInfo: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Information about public transport closures.",
    )
    governmentBenefitsInfo: Optional[Union[List[Union[GovernmentService, str]], GovernmentService, str]] = Field(
        default=None,
        description="governmentBenefitsInfo provides information about government benefits associated"
     "with a SpecialAnnouncement.",
    )
    quarantineGuidelines: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Guidelines about quarantine rules, e.g. in the context of a pandemic.",
    )
    travelBans: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Information about travel bans, e.g. in the context of a pandemic.",
    )
    webFeed: Optional[Union[List[Union[AnyUrl, URL, DataFeed, str]], AnyUrl, URL, DataFeed, str]] = Field(
        default=None,
        description="The URL for a feed, e.g. associated with a podcast series, blog, or series of date-stamped"
     "updates. This is usually RSS or Atom.",
    )
    diseasePreventionInfo: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Information about disease prevention.",
    )
    datePosted: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Publication date of an online listing.",
    )
    category: Optional[Union[List[Union[AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]], AnyUrl, URL, str, Text, CategoryCode, Thing, PhysicalActivityCategory]] = Field(
        default=None,
        description="A category for the item. Greater signs or slashes can be used to informally indicate a"
     "category hierarchy.",
    )
    announcementLocation: Optional[Union[List[Union[CivicStructure, LocalBusiness, str]], CivicStructure, LocalBusiness, str]] = Field(
        default=None,
        description="Indicates a specific [[CivicStructure]] or [[LocalBusiness]] associated with the"
     "SpecialAnnouncement. For example, a specific testing facility or business with special"
     "opening hours. For a larger geographic region like a quarantine of an entire region,"
     "use [[spatialCoverage]].",
    )
    schoolClosuresInfo: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Information about school closures.",
    )
    newsUpdatesAndGuidelines: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Indicates a page with news updates and guidelines. This could often be (but is not required"
     "to be) the main page containing [[SpecialAnnouncement]] markup on a site.",
    )
    gettingTestedInfo: Optional[Union[List[Union[AnyUrl, URL, WebContent, str]], AnyUrl, URL, WebContent, str]] = Field(
        default=None,
        description="Information about getting tested (for a [[MedicalCondition]]), e.g. in the context"
     "of a pandemic.",
    )
    



class EmployerReview(Review):
    """An [[EmployerReview]] is a review of an [[Organization]] regarding its role as an employer,"
     "written by a current or former employee of that organization.

    See: https://schema.org/EmployerReview
    Model depth: 4
    """
    type_: str = Field(default="EmployerReview", alias='@type', const=True)
    



class RsvpResponseNo(RsvpResponseType):
    """The invitee will not attend.

    See: https://schema.org/RsvpResponseNo
    Model depth: 5
    """
    type_: str = Field(default="RsvpResponseNo", alias='@type', const=True)
    



class HyperTocEntry(CreativeWork):
    """A HyperToEntry is an item within a [[HyperToc]], which represents a hypertext table"
     "of contents for complex media objects, such as [[VideoObject]], [[AudioObject]]."
     "The media object itself is indicated using [[associatedMedia]]. Each section of interest"
     "within that content can be described with a [[HyperTocEntry]], with associated [[startOffset]]"
     "and [[endOffset]]. When several entries are all from the same file, [[associatedMedia]]"
     "is used on the overarching [[HyperTocEntry]]; if the content has been split into multiple"
     "files, they can be referenced using [[associatedMedia]] on each [[HyperTocEntry]].

    See: https://schema.org/HyperTocEntry
    Model depth: 3
    """
    type_: str = Field(default="HyperTocEntry", alias='@type', const=True)
    associatedMedia: Optional[Union[List[Union[MediaObject, str]], MediaObject, str]] = Field(
        default=None,
        description="A media object that encodes this CreativeWork. This property is a synonym for encoding.",
    )
    utterances: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Text of an utterances (spoken words, lyrics etc.) that occurs at a certain section of"
     "a media object, represented as a [[HyperTocEntry]].",
    )
    tocContinuation: Optional[Union[List[Union[HyperTocEntry, str]], HyperTocEntry, str]] = Field(
        default=None,
        description="A [[HyperTocEntry]] can have a [[tocContinuation]] indicated, which is another [[HyperTocEntry]]"
     "that would be the default next item to play or render.",
    )
    



class SurgicalProcedure(MedicalProcedure):
    """A medical procedure involving an incision with instruments; performed for diagnose,"
     "or therapeutic purposes.

    See: https://schema.org/SurgicalProcedure
    Model depth: 4
    """
    type_: str = Field(default="SurgicalProcedure", alias='@type', const=True)
    



class GettingAccessHealthAspect(HealthAspectEnumeration):
    """Content that discusses practical and policy aspects for getting access to specific"
     "kinds of healthcare (e.g. distribution mechanisms for vaccines).

    See: https://schema.org/GettingAccessHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="GettingAccessHealthAspect", alias='@type', const=True)
    



class VideoGallery(MediaGallery):
    """Web page type: Video gallery page.

    See: https://schema.org/VideoGallery
    Model depth: 6
    """
    type_: str = Field(default="VideoGallery", alias='@type', const=True)
    



class ScreeningEvent(Event):
    """A screening of a movie or other video.

    See: https://schema.org/ScreeningEvent
    Model depth: 3
    """
    type_: str = Field(default="ScreeningEvent", alias='@type', const=True)
    subtitleLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).",
    )
    videoFormat: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).",
    )
    workPresented: Optional[Union[List[Union[Movie, str]], Movie, str]] = Field(
        default=None,
        description="The movie presented during this event.",
    )
    



class AndroidPlatform(DigitalPlatformEnumeration):
    """Represents the broad notion of Android-based operating systems.

    See: https://schema.org/AndroidPlatform
    Model depth: 5
    """
    type_: str = Field(default="AndroidPlatform", alias='@type', const=True)
    



class Claim(CreativeWork):
    """A [[Claim]] in Schema.org represents a specific, factually-oriented claim that could"
     "be the [[itemReviewed]] in a [[ClaimReview]]. The content of a claim can be summarized"
     "with the [[text]] property. Variations on well known claims can have their common identity"
     "indicated via [[sameAs]] links, and summarized with a [[name]]. Ideally, a [[Claim]]"
     "description includes enough contextual information to minimize the risk of ambiguity"
     "or inclarity. In practice, many claims are better understood in the context in which"
     "they appear or the interpretations provided by claim reviews. Beyond [[ClaimReview]],"
     "the Claim type can be associated with related creative works - for example a [[ScholarlyArticle]]"
     "or [[Question]] might be [[about]] some [[Claim]]. At this time, Schema.org does not"
     "define any types of relationship between claims. This is a natural area for future exploration.

    See: https://schema.org/Claim
    Model depth: 3
    """
    type_: str = Field(default="Claim", alias='@type', const=True)
    claimInterpreter: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="For a [[Claim]] interpreted from [[MediaObject]] content sed to indicate a claim contained,"
     "implied or refined from the content of a [[MediaObject]].",
    )
    appearance: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Indicates an occurrence of a [[Claim]] in some [[CreativeWork]].",
    )
    firstAppearance: Optional[Union[List[Union[CreativeWork, str]], CreativeWork, str]] = Field(
        default=None,
        description="Indicates the first known occurrence of a [[Claim]] in some [[CreativeWork]].",
    )
    



class Mosque(PlaceOfWorship):
    """A mosque.

    See: https://schema.org/Mosque
    Model depth: 5
    """
    type_: str = Field(default="Mosque", alias='@type', const=True)
    



class LibrarySystem(Organization):
    """A [[LibrarySystem]] is a collaborative system amongst several libraries.

    See: https://schema.org/LibrarySystem
    Model depth: 3
    """
    type_: str = Field(default="LibrarySystem", alias='@type', const=True)
    



class Nerve(AnatomicalStructure):
    """A common pathway for the electrochemical nerve impulses that are transmitted along"
     "each of the axons.

    See: https://schema.org/Nerve
    Model depth: 4
    """
    type_: str = Field(default="Nerve", alias='@type', const=True)
    nerveMotor: Optional[Union[List[Union[Muscle, str]], Muscle, str]] = Field(
        default=None,
        description="The neurological pathway extension that involves muscle control.",
    )
    branch: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="The branches that delineate from the nerve bundle. Not to be confused with [[branchOf]].",
    )
    sourcedFrom: Optional[Union[List[Union[BrainStructure, str]], BrainStructure, str]] = Field(
        default=None,
        description="The neurological pathway that originates the neurons.",
    )
    sensoryUnit: Optional[Union[List[Union[SuperficialAnatomy, AnatomicalStructure, str]], SuperficialAnatomy, AnatomicalStructure, str]] = Field(
        default=None,
        description="The neurological pathway extension that inputs and sends information to the brain or"
     "spinal cord.",
    )
    



class Notary(LegalService):
    """A notary.

    See: https://schema.org/Notary
    Model depth: 5
    """
    type_: str = Field(default="Notary", alias='@type', const=True)
    



class WatchAction(ConsumeAction):
    """The act of consuming dynamic/moving visual content.

    See: https://schema.org/WatchAction
    Model depth: 4
    """
    type_: str = Field(default="WatchAction", alias='@type', const=True)
    



class AutoWash(AutomotiveBusiness):
    """A car wash business.

    See: https://schema.org/AutoWash
    Model depth: 5
    """
    type_: str = Field(default="AutoWash", alias='@type', const=True)
    



class UsageOrScheduleHealthAspect(HealthAspectEnumeration):
    """Content about how, when, frequency and dosage of a topic.

    See: https://schema.org/UsageOrScheduleHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="UsageOrScheduleHealthAspect", alias='@type', const=True)
    



class CommentAction(CommunicateAction):
    """The act of generating a comment about a subject.

    See: https://schema.org/CommentAction
    Model depth: 5
    """
    type_: str = Field(default="CommentAction", alias='@type', const=True)
    resultComment: Optional[Union[List[Union[Comment, str]], Comment, str]] = Field(
        default=None,
        description="A sub property of result. The Comment created or sent as a result of this action.",
    )
    



class JewelryStore(Store):
    """A jewelry store.

    See: https://schema.org/JewelryStore
    Model depth: 5
    """
    type_: str = Field(default="JewelryStore", alias='@type', const=True)
    



class Skin(PhysicalExam):
    """Skin assessment with clinical examination.

    See: https://schema.org/Skin
    Model depth: 5
    """
    type_: str = Field(default="Skin", alias='@type', const=True)
    



class ReviewAction(AssessAction):
    """The act of producing a balanced opinion about the object for an audience. An agent reviews"
     "an object with participants resulting in a review.

    See: https://schema.org/ReviewAction
    Model depth: 4
    """
    type_: str = Field(default="ReviewAction", alias='@type', const=True)
    resultReview: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A sub property of result. The review that resulted in the performing of the action.",
    )
    



class WearableSizeGroupMisses(WearableSizeGroupEnumeration):
    """Size group \"Misses\" (also known as \"Missy\") for wearables.

    See: https://schema.org/WearableSizeGroupMisses
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupMisses", alias='@type', const=True)
    



class MusculoskeletalExam(PhysicalExam):
    """Musculoskeletal system clinical examination.

    See: https://schema.org/MusculoskeletalExam
    Model depth: 5
    """
    type_: str = Field(default="MusculoskeletalExam", alias='@type', const=True)
    



class AnimalShelter(LocalBusiness):
    """Animal shelter.

    See: https://schema.org/AnimalShelter
    Model depth: 4
    """
    type_: str = Field(default="AnimalShelter", alias='@type', const=True)
    



class Emergency(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that deals with the evaluation and initial treatment"
     "of medical conditions caused by trauma or sudden illness.

    See: https://schema.org/Emergency
    Model depth: 5
    """
    type_: str = Field(default="Emergency", alias='@type', const=True)
    



class ImageGallery(MediaGallery):
    """Web page type: Image gallery page.

    See: https://schema.org/ImageGallery
    Model depth: 6
    """
    type_: str = Field(default="ImageGallery", alias='@type', const=True)
    



class LiveBlogPosting(BlogPosting):
    """A [[LiveBlogPosting]] is a [[BlogPosting]] intended to provide a rolling textual coverage"
     "of an ongoing event through continuous updates.

    See: https://schema.org/LiveBlogPosting
    Model depth: 6
    """
    type_: str = Field(default="LiveBlogPosting", alias='@type', const=True)
    liveBlogUpdate: Optional[Union[List[Union[BlogPosting, str]], BlogPosting, str]] = Field(
        default=None,
        description="An update to the LiveBlog.",
    )
    coverageStartTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The time when the live blog will begin covering the Event. Note that coverage may begin"
     "before the Event's start time. The LiveBlogPosting may also be created before coverage"
     "begins.",
    )
    coverageEndTime: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The time when the live blog will stop covering the Event. Note that coverage may continue"
     "after the Event concludes.",
    )
    



class WearableSizeGroupInfants(WearableSizeGroupEnumeration):
    """Size group \"Infants\" for wearables.

    See: https://schema.org/WearableSizeGroupInfants
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupInfants", alias='@type', const=True)
    



class PublicToilet(CivicStructure):
    """A public toilet is a room or small building containing one or more toilets (and possibly"
     "also urinals) which is available for use by the general public, or by customers or employees"
     "of certain businesses.

    See: https://schema.org/PublicToilet
    Model depth: 4
    """
    type_: str = Field(default="PublicToilet", alias='@type', const=True)
    



class FDAcategoryA(DrugPregnancyCategory):
    """A designation by the US FDA signifying that adequate and well-controlled studies have"
     "failed to demonstrate a risk to the fetus in the first trimester of pregnancy (and there"
     "is no evidence of risk in later trimesters).

    See: https://schema.org/FDAcategoryA
    Model depth: 6
    """
    type_: str = Field(default="FDAcategoryA", alias='@type', const=True)
    



class MedicalContraindication(MedicalEntity):
    """A condition or factor that serves as a reason to withhold a certain medical therapy. Contraindications"
     "can be absolute (there are no reasonable circumstances for undertaking a course of action)"
     "or relative (the patient is at higher risk of complications, but these risks may be outweighed"
     "by other considerations or mitigated by other measures).

    See: https://schema.org/MedicalContraindication
    Model depth: 3
    """
    type_: str = Field(default="MedicalContraindication", alias='@type', const=True)
    



class ComedyEvent(Event):
    """Event type: Comedy event.

    See: https://schema.org/ComedyEvent
    Model depth: 3
    """
    type_: str = Field(default="ComedyEvent", alias='@type', const=True)
    



class SuspendAction(ControlAction):
    """The act of momentarily pausing a device or application (e.g. pause music playback or"
     "pause a timer).

    See: https://schema.org/SuspendAction
    Model depth: 4
    """
    type_: str = Field(default="SuspendAction", alias='@type', const=True)
    



class Pathology(MedicalSpecialty):
    """A specific branch of medical science that is concerned with the study of the cause, origin"
     "and nature of a disease state, including its consequences as a result of manifestation"
     "of the disease. In clinical care, the term is used to designate a branch of medicine using"
     "laboratory tests to diagnose and determine the prognostic significance of illness.

    See: https://schema.org/Pathology
    Model depth: 6
    """
    type_: str = Field(default="Pathology", alias='@type', const=True)
    



class ParentalSupport(GovernmentBenefitsType):
    """ParentalSupport: this is a benefit for parental support.

    See: https://schema.org/ParentalSupport
    Model depth: 5
    """
    type_: str = Field(default="ParentalSupport", alias='@type', const=True)
    



class LendAction(TransferAction):
    """The act of providing an object under an agreement that it will be returned at a later date."
     "Reciprocal of BorrowAction. Related actions: * [[BorrowAction]]: Reciprocal of LendAction.

    See: https://schema.org/LendAction
    Model depth: 4
    """
    type_: str = Field(default="LendAction", alias='@type', const=True)
    borrower: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A sub property of participant. The person that borrows the object being lent.",
    )
    



class Hardcover(BookFormatType):
    """Book format: Hardcover.

    See: https://schema.org/Hardcover
    Model depth: 5
    """
    type_: str = Field(default="Hardcover", alias='@type', const=True)
    



class FundingScheme(Organization):
    """A FundingScheme combines organizational, project and policy aspects of grant-based"
     "funding that sets guidelines, principles and mechanisms to support other kinds of projects"
     "and activities. Funding is typically organized via [[Grant]] funding. Examples of"
     "funding schemes: Swiss Priority Programmes (SPPs); EU Framework 7 (FP7); Horizon 2020;"
     "the NIH-R01 Grant Program; Wellcome institutional strategic support fund. For large"
     "scale public sector funding, the management and administration of grant awards is often"
     "handled by other, dedicated, organizations - [[FundingAgency]]s such as ERC, REA,"
     "...

    See: https://schema.org/FundingScheme
    Model depth: 3
    """
    type_: str = Field(default="FundingScheme", alias='@type', const=True)
    



class PatientExperienceHealthAspect(HealthAspectEnumeration):
    """Content about the real life experience of patients or people that have lived a similar"
     "experience about the topic. May be forums, topics, Q-and-A and related material.

    See: https://schema.org/PatientExperienceHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="PatientExperienceHealthAspect", alias='@type', const=True)
    



class TelevisionStation(LocalBusiness):
    """A television station.

    See: https://schema.org/TelevisionStation
    Model depth: 4
    """
    type_: str = Field(default="TelevisionStation", alias='@type', const=True)
    



class MRI(MedicalImagingTechnique):
    """Magnetic resonance imaging.

    See: https://schema.org/MRI
    Model depth: 6
    """
    type_: str = Field(default="MRI", alias='@type', const=True)
    



class MotorizedBicycle(Vehicle):
    """A motorized bicycle is a bicycle with an attached motor used to power the vehicle, or to"
     "assist with pedaling.

    See: https://schema.org/MotorizedBicycle
    Model depth: 4
    """
    type_: str = Field(default="MotorizedBicycle", alias='@type', const=True)
    



class Poster(CreativeWork):
    """A large, usually printed placard, bill, or announcement, often illustrated, that is"
     "posted to advertise or publicize something.

    See: https://schema.org/Poster
    Model depth: 3
    """
    type_: str = Field(default="Poster", alias='@type', const=True)
    



class RsvpResponseYes(RsvpResponseType):
    """The invitee will attend.

    See: https://schema.org/RsvpResponseYes
    Model depth: 5
    """
    type_: str = Field(default="RsvpResponseYes", alias='@type', const=True)
    



class EventRescheduled(EventStatusType):
    """The event has been rescheduled. The event's previousStartDate should be set to the old"
     "date and the startDate should be set to the event's new date. (If the event has been rescheduled"
     "multiple times, the previousStartDate property may be repeated.)

    See: https://schema.org/EventRescheduled
    Model depth: 6
    """
    type_: str = Field(default="EventRescheduled", alias='@type', const=True)
    



class BodyMeasurementHead(BodyMeasurementTypeEnumeration):
    """Maximum girth of head above the ears. Used, for example, to fit hats.

    See: https://schema.org/BodyMeasurementHead
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementHead", alias='@type', const=True)
    



class UserPlays(UserInteraction):
    """UserInteraction and its subtypes is an old way of talking about users interacting with"
     "pages. It is generally better to use [[Action]]-based vocabulary, alongside types"
     "such as [[Comment]].

    See: https://schema.org/UserPlays
    Model depth: 4
    """
    type_: str = Field(default="UserPlays", alias='@type', const=True)
    



class MiddleSchool(EducationalOrganization):
    """A middle school (typically for children aged around 11-14, although this varies somewhat).

    See: https://schema.org/MiddleSchool
    Model depth: 4
    """
    type_: str = Field(default="MiddleSchool", alias='@type', const=True)
    



class LakeBodyOfWater(BodyOfWater):
    """A lake (for example, Lake Pontrachain).

    See: https://schema.org/LakeBodyOfWater
    Model depth: 5
    """
    type_: str = Field(default="LakeBodyOfWater", alias='@type', const=True)
    



class Monday(DayOfWeek):
    """The day of the week between Sunday and Tuesday.

    See: https://schema.org/Monday
    Model depth: 5
    """
    type_: str = Field(default="Monday", alias='@type', const=True)
    



class AboutPage(WebPage):
    """Web page type: About page.

    See: https://schema.org/AboutPage
    Model depth: 4
    """
    type_: str = Field(default="AboutPage", alias='@type', const=True)
    



class GameServer(Intangible):
    """Server that provides game interaction in a multiplayer game.

    See: https://schema.org/GameServer
    Model depth: 3
    """
    type_: str = Field(default="GameServer", alias='@type', const=True)
    playersOnline: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="Number of players on the server.",
    )
    game: Optional[Union[List[Union[VideoGame, str]], VideoGame, str]] = Field(
        default=None,
        description="Video game which is played on this server.",
    )
    serverStatus: Optional[Union[List[Union[GameServerStatus, str]], GameServerStatus, str]] = Field(
        default=None,
        description="Status of a game server.",
    )
    



class PreOrderAction(TradeAction):
    """An agent orders a (not yet released) object/product/service to be delivered/sent.

    See: https://schema.org/PreOrderAction
    Model depth: 4
    """
    type_: str = Field(default="PreOrderAction", alias='@type', const=True)
    



class Duration(Quantity):
    """Quantity: Duration (use [ISO 8601 duration format](http://en.wikipedia.org/wiki/ISO_8601)).

    See: https://schema.org/Duration
    Model depth: 4
    """
    type_: str = Field(default="Duration", alias='@type', const=True)
    



class BroadcastEvent(PublicationEvent):
    """An over the air or online broadcast event.

    See: https://schema.org/BroadcastEvent
    Model depth: 4
    """
    type_: str = Field(default="BroadcastEvent", alias='@type', const=True)
    subtitleLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).",
    )
    broadcastOfEvent: Optional[Union[List[Union[Event, str]], Event, str]] = Field(
        default=None,
        description="The event being broadcast such as a sporting event or awards ceremony.",
    )
    videoFormat: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The type of screening or video broadcast used (e.g. IMAX, 3D, SD, HD, etc.).",
    )
    isLiveBroadcast: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="True if the broadcast is of a live event.",
    )
    



class MedicalRiskFactor(MedicalEntity):
    """A risk factor is anything that increases a person's likelihood of developing or contracting"
     "a disease, medical condition, or complication.

    See: https://schema.org/MedicalRiskFactor
    Model depth: 3
    """
    type_: str = Field(default="MedicalRiskFactor", alias='@type', const=True)
    increasesRiskOf: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="The condition, complication, etc. influenced by this factor.",
    )
    



class ConvenienceStore(Store):
    """A convenience store.

    See: https://schema.org/ConvenienceStore
    Model depth: 5
    """
    type_: str = Field(default="ConvenienceStore", alias='@type', const=True)
    



class AlbumRelease(MusicAlbumReleaseType):
    """AlbumRelease.

    See: https://schema.org/AlbumRelease
    Model depth: 5
    """
    type_: str = Field(default="AlbumRelease", alias='@type', const=True)
    



class SingleFamilyResidence(House):
    """Residence type: Single-family home.

    See: https://schema.org/SingleFamilyResidence
    Model depth: 5
    """
    type_: str = Field(default="SingleFamilyResidence", alias='@type', const=True)
    numberOfRooms: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The number of rooms (excluding bathrooms and closets) of the accommodation or lodging"
     "business. Typical unit code(s): ROM for room or C62 for no unit. The type of room can be"
     "put in the unitText property of the QuantitativeValue.",
    )
    occupancy: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The allowed total occupancy for the accommodation in persons (including infants etc)."
     "For individual accommodations, this is not necessarily the legal maximum but defines"
     "the permitted usage as per the contractual agreement (e.g. a double room used by a single"
     "person). Typical unit code(s): C62 for person",
    )
    



class MusicRelease(MusicPlaylist):
    """A MusicRelease is a specific release of a music album.

    See: https://schema.org/MusicRelease
    Model depth: 4
    """
    type_: str = Field(default="MusicRelease", alias='@type', const=True)
    releaseOf: Optional[Union[List[Union[MusicAlbum, str]], MusicAlbum, str]] = Field(
        default=None,
        description="The album this is a release of.",
    )
    musicReleaseFormat: Optional[Union[List[Union[MusicReleaseFormatType, str]], MusicReleaseFormatType, str]] = Field(
        default=None,
        description="Format of this release (the type of recording media used, i.e. compact disc, digital"
     "media, LP, etc.).",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    recordLabel: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The label that issued the release.",
    )
    catalogNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The catalog number for the release.",
    )
    creditedTo: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The group the release is credited to if different than the byArtist. For example, Red"
     "and Blue is credited to \"Stefani Germanotta Band\", but by Lady Gaga.",
    )
    



class EmployerAggregateRating(AggregateRating):
    """An aggregate rating of an Organization related to its role as an employer.

    See: https://schema.org/EmployerAggregateRating
    Model depth: 5
    """
    type_: str = Field(default="EmployerAggregateRating", alias='@type', const=True)
    



class Female(GenderType):
    """The female gender.

    See: https://schema.org/Female
    Model depth: 5
    """
    type_: str = Field(default="Female", alias='@type', const=True)
    



class ReviewNewsArticle(NewsArticle, CriticReview):
    """A [[NewsArticle]] and [[CriticReview]] providing a professional critic's assessment"
     "of a service, product, performance, or artistic or literary work.

    See: https://schema.org/ReviewNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="ReviewNewsArticle", alias='@type', const=True)
    



class SeatingMap(MapCategoryType):
    """A seating map.

    See: https://schema.org/SeatingMap
    Model depth: 5
    """
    type_: str = Field(default="SeatingMap", alias='@type', const=True)
    



class EvidenceLevelB(MedicalEvidenceLevel):
    """Data derived from a single randomized trial, or nonrandomized studies.

    See: https://schema.org/EvidenceLevelB
    Model depth: 6
    """
    type_: str = Field(default="EvidenceLevelB", alias='@type', const=True)
    



class BodyMeasurementBust(BodyMeasurementTypeEnumeration):
    """Maximum girth of bust. Used, for example, to fit women's suits.

    See: https://schema.org/BodyMeasurementBust
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementBust", alias='@type', const=True)
    



class HomeGoodsStore(Store):
    """A home goods store.

    See: https://schema.org/HomeGoodsStore
    Model depth: 5
    """
    type_: str = Field(default="HomeGoodsStore", alias='@type', const=True)
    



class ClaimReview(Review):
    """A fact-checking review of claims made (or reported) in some creative work (referenced"
     "via itemReviewed).

    See: https://schema.org/ClaimReview
    Model depth: 4
    """
    type_: str = Field(default="ClaimReview", alias='@type', const=True)
    claimReviewed: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A short summary of the specific claims reviewed in a ClaimReview.",
    )
    



class NutritionInformation(StructuredValue):
    """Nutritional information about the recipe.

    See: https://schema.org/NutritionInformation
    Model depth: 4
    """
    type_: str = Field(default="NutritionInformation", alias='@type', const=True)
    sodiumContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of milligrams of sodium.",
    )
    carbohydrateContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of carbohydrates.",
    )
    fatContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of fat.",
    )
    cholesterolContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of milligrams of cholesterol.",
    )
    calories: Optional[Union[List[Union[Energy, str]], Energy, str]] = Field(
        default=None,
        description="The number of calories.",
    )
    unsaturatedFatContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of unsaturated fat.",
    )
    sugarContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of sugar.",
    )
    transFatContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of trans fat.",
    )
    proteinContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of protein.",
    )
    saturatedFatContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of saturated fat.",
    )
    servingSize: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The serving size, in terms of the number of volume or mass.",
    )
    fiberContent: Optional[Union[List[Union[Mass, str]], Mass, str]] = Field(
        default=None,
        description="The number of grams of fiber.",
    )
    



class CT(MedicalImagingTechnique):
    """X-ray computed tomography imaging.

    See: https://schema.org/CT
    Model depth: 6
    """
    type_: str = Field(default="CT", alias='@type', const=True)
    



class Nonprofit527(USNonprofitType):
    """Nonprofit527: Non-profit type referring to political organizations.

    See: https://schema.org/Nonprofit527
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit527", alias='@type', const=True)
    



class MenuItem(Intangible):
    """A food or drink item listed in a menu or menu section.

    See: https://schema.org/MenuItem
    Model depth: 3
    """
    type_: str = Field(default="MenuItem", alias='@type', const=True)
    nutrition: Optional[Union[List[Union[NutritionInformation, str]], NutritionInformation, str]] = Field(
        default=None,
        description="Nutrition information about the recipe or menu item.",
    )
    suitableForDiet: Optional[Union[List[Union[RestrictedDiet, str]], RestrictedDiet, str]] = Field(
        default=None,
        description="Indicates a dietary restriction or guideline for which this recipe or menu item is suitable,"
     "e.g. diabetic, halal etc.",
    )
    menuAddOn: Optional[Union[List[Union[MenuItem, MenuSection, str]], MenuItem, MenuSection, str]] = Field(
        default=None,
        description="Additional menu item(s) such as a side dish of salad or side order of fries that can be added"
     "to this menu item. Additionally it can be a menu section containing allowed add-on menu"
     "items for this menu item.",
    )
    offers: Optional[Union[List[Union[Offer, Demand, str]], Offer, Demand, str]] = Field(
        default=None,
        description="An offer to provide this item&#x2014;for example, an offer to sell a product, rent the"
     "DVD of a movie, perform a service, or give away tickets to an event. Use [[businessFunction]]"
     "to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can"
     "also be used to describe a [[Demand]]. While this property is listed as expected on a number"
     "of common types, it can be used in others. In that case, using a second type, such as Product"
     "or a subtype of Product, can clarify the nature of the offer.",
    )
    



class OnlineEventAttendanceMode(EventAttendanceModeEnumeration):
    """OnlineEventAttendanceMode - an event that is primarily conducted online.

    See: https://schema.org/OnlineEventAttendanceMode
    Model depth: 5
    """
    type_: str = Field(default="OnlineEventAttendanceMode", alias='@type', const=True)
    



class SizeSystemImperial(SizeSystemEnumeration):
    """Imperial size system.

    See: https://schema.org/SizeSystemImperial
    Model depth: 5
    """
    type_: str = Field(default="SizeSystemImperial", alias='@type', const=True)
    



class Recruiting(MedicalStudyStatus):
    """Recruiting participants.

    See: https://schema.org/Recruiting
    Model depth: 6
    """
    type_: str = Field(default="Recruiting", alias='@type', const=True)
    



class Nonprofit501c23(USNonprofitType):
    """Nonprofit501c23: Non-profit type referring to Veterans Organizations.

    See: https://schema.org/Nonprofit501c23
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c23", alias='@type', const=True)
    



class PotentialActionStatus(ActionStatusType):
    """A description of an action that is supported.

    See: https://schema.org/PotentialActionStatus
    Model depth: 6
    """
    type_: str = Field(default="PotentialActionStatus", alias='@type', const=True)
    



class OneTimePayments(GovernmentBenefitsType):
    """OneTimePayments: this is a benefit for one-time payments for individuals.

    See: https://schema.org/OneTimePayments
    Model depth: 5
    """
    type_: str = Field(default="OneTimePayments", alias='@type', const=True)
    



class TravelAction(MoveAction):
    """The act of traveling from a fromLocation to a destination by a specified mode of transport,"
     "optionally with participants.

    See: https://schema.org/TravelAction
    Model depth: 4
    """
    type_: str = Field(default="TravelAction", alias='@type', const=True)
    distance: Optional[Union[List[Union[Distance, str]], Distance, str]] = Field(
        default=None,
        description="The distance travelled, e.g. exercising or travelling.",
    )
    



class EUEnergyEfficiencyCategoryD(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class D as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryD
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryD", alias='@type', const=True)
    



class MaximumDoseSchedule(DoseSchedule):
    """The maximum dosing schedule considered safe for a drug or supplement as recommended"
     "by an authority or by the drug/supplement's manufacturer. Capture the recommending"
     "authority in the recognizingAuthority property of MedicalEntity.

    See: https://schema.org/MaximumDoseSchedule
    Model depth: 5
    """
    type_: str = Field(default="MaximumDoseSchedule", alias='@type', const=True)
    



class Brand(Intangible):
    """A brand is a name used by an organization or business person for labeling a product, product"
     "group, or similar.

    See: https://schema.org/Brand
    Model depth: 3
    """
    type_: str = Field(default="Brand", alias='@type', const=True)
    slogan: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A slogan or motto associated with the item.",
    )
    review: Optional[Union[List[Union[Review, str]], Review, str]] = Field(
        default=None,
        description="A review of the item.",
    )
    logo: Optional[Union[List[Union[AnyUrl, URL, ImageObject, str]], AnyUrl, URL, ImageObject, str]] = Field(
        default=None,
        description="An associated logo.",
    )
    aggregateRating: Optional[Union[List[Union[AggregateRating, str]], AggregateRating, str]] = Field(
        default=None,
        description="The overall rating, based on a collection of reviews or ratings, of the item.",
    )
    



class HowToSupply(HowToItem):
    """A supply consumed when performing the instructions for how to achieve a result.

    See: https://schema.org/HowToSupply
    Model depth: 5
    """
    type_: str = Field(default="HowToSupply", alias='@type', const=True)
    estimatedCost: Optional[Union[List[Union[str, Text, MonetaryAmount]], str, Text, MonetaryAmount]] = Field(
        default=None,
        description="The estimated cost of the supply or supplies consumed when performing instructions.",
    )
    



class ZoneBoardingPolicy(BoardingPolicyType):
    """The airline boards by zones of the plane.

    See: https://schema.org/ZoneBoardingPolicy
    Model depth: 5
    """
    type_: str = Field(default="ZoneBoardingPolicy", alias='@type', const=True)
    



class Nonprofit501f(USNonprofitType):
    """Nonprofit501f: Non-profit type referring to Cooperative Service Organizations.

    See: https://schema.org/Nonprofit501f
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501f", alias='@type', const=True)
    



class ParcelDelivery(Intangible):
    """The delivery of a parcel either via the postal service or a commercial service.

    See: https://schema.org/ParcelDelivery
    Model depth: 3
    """
    type_: str = Field(default="ParcelDelivery", alias='@type', const=True)
    itemShipped: Optional[Union[List[Union[Product, str]], Product, str]] = Field(
        default=None,
        description="Item(s) being shipped.",
    )
    trackingNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Shipper tracking number.",
    )
    expectedArrivalUntil: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The latest date the package may arrive.",
    )
    provider: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The service provider, service operator, or service performer; the goods producer."
     "Another party (a seller) may offer those services or goods on behalf of the provider."
     "A provider may also serve as the seller.",
    )
    deliveryAddress: Optional[Union[List[Union[PostalAddress, str]], PostalAddress, str]] = Field(
        default=None,
        description="Destination address.",
    )
    expectedArrivalFrom: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The earliest date the package may arrive.",
    )
    carrier: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="'carrier' is an out-dated term indicating the 'provider' for parcel delivery and flights.",
    )
    originAddress: Optional[Union[List[Union[PostalAddress, str]], PostalAddress, str]] = Field(
        default=None,
        description="Shipper's address.",
    )
    deliveryStatus: Optional[Union[List[Union[DeliveryEvent, str]], DeliveryEvent, str]] = Field(
        default=None,
        description="New entry added as the package passes through each leg of its journey (from shipment to"
     "final delivery).",
    )
    trackingUrl: Optional[Union[List[Union[AnyUrl, URL, str]], AnyUrl, URL, str]] = Field(
        default=None,
        description="Tracking url for the parcel delivery.",
    )
    partOfOrder: Optional[Union[List[Union[Order, str]], Order, str]] = Field(
        default=None,
        description="The overall order the items in this delivery were included in.",
    )
    hasDeliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="Method used for delivery or shipping.",
    )
    



class SeekToAction(Action):
    """This is the [[Action]] of navigating to a specific [[startOffset]] timestamp within"
     "a [[VideoObject]], typically represented with a URL template structure.

    See: https://schema.org/SeekToAction
    Model depth: 3
    """
    type_: str = Field(default="SeekToAction", alias='@type', const=True)
    startOffset: Optional[Union[List[Union[StrictInt, StrictFloat, Number, HyperTocEntry, str]], StrictInt, StrictFloat, Number, HyperTocEntry, str]] = Field(
        default=None,
        description="The start time of the clip expressed as the number of seconds from the beginning of the"
     "work.",
    )
    



class Balance(PhysicalActivityCategory):
    """Physical activity that is engaged to help maintain posture and balance.

    See: https://schema.org/Balance
    Model depth: 5
    """
    type_: str = Field(default="Balance", alias='@type', const=True)
    



class InForce(LegalForceStatus):
    """Indicates that a legislation is in force.

    See: https://schema.org/InForce
    Model depth: 6
    """
    type_: str = Field(default="InForce", alias='@type', const=True)
    



class AuthorizeAction(AllocateAction):
    """The act of granting permission to an object.

    See: https://schema.org/AuthorizeAction
    Model depth: 5
    """
    type_: str = Field(default="AuthorizeAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class InvoicePrice(PriceTypeEnumeration):
    """Represents the invoice price of an offered product.

    See: https://schema.org/InvoicePrice
    Model depth: 5
    """
    type_: str = Field(default="InvoicePrice", alias='@type', const=True)
    



class Neurologic(MedicalSpecialty):
    """A specific branch of medical science that studies the nerves and nervous system and its"
     "respective disease states.

    See: https://schema.org/Neurologic
    Model depth: 6
    """
    type_: str = Field(default="Neurologic", alias='@type', const=True)
    



class CassetteFormat(MusicReleaseFormatType):
    """CassetteFormat.

    See: https://schema.org/CassetteFormat
    Model depth: 5
    """
    type_: str = Field(default="CassetteFormat", alias='@type', const=True)
    



class TraditionalChinese(MedicineSystem):
    """A system of medicine based on common theoretical concepts that originated in China and"
     "evolved over thousands of years, that uses herbs, acupuncture, exercise, massage,"
     "dietary therapy, and other methods to treat a wide range of conditions.

    See: https://schema.org/TraditionalChinese
    Model depth: 6
    """
    type_: str = Field(default="TraditionalChinese", alias='@type', const=True)
    



class Homeopathic(MedicineSystem):
    """A system of medicine based on the principle that a disease can be cured by a substance that"
     "produces similar symptoms in healthy people.

    See: https://schema.org/Homeopathic
    Model depth: 6
    """
    type_: str = Field(default="Homeopathic", alias='@type', const=True)
    



class TouristAttraction(Place):
    """A tourist attraction. In principle any Thing can be a [[TouristAttraction]], from a"
     "[[Mountain]] and [[LandmarksOrHistoricalBuildings]] to a [[LocalBusiness]]. This"
     "Type can be used on its own to describe a general [[TouristAttraction]], or be used as"
     "an [[additionalType]] to add tourist attraction properties to any other type. (See"
     "examples below)

    See: https://schema.org/TouristAttraction
    Model depth: 3
    """
    type_: str = Field(default="TouristAttraction", alias='@type', const=True)
    availableLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="A language someone may use with or at the item, service or place. Please use one of the language"
     "codes from the [IETF BCP 47 standard](http://tools.ietf.org/html/bcp47). See also"
     "[[inLanguage]].",
    )
    touristType: Optional[Union[List[Union[str, Text, Audience]], str, Text, Audience]] = Field(
        default=None,
        description="Attraction suitable for type(s) of tourist. E.g. children, visitors from a particular"
     "country, etc.",
    )
    



class Energy(Quantity):
    """Properties that take Energy as values are of the form '&lt;Number&gt; &lt;Energy unit"
     "of measure&gt;'.

    See: https://schema.org/Energy
    Model depth: 4
    """
    type_: str = Field(default="Energy", alias='@type', const=True)
    



class Nonprofit501c19(USNonprofitType):
    """Nonprofit501c19: Non-profit type referring to Post or Organization of Past or Present"
     "Members of the Armed Forces.

    See: https://schema.org/Nonprofit501c19
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c19", alias='@type', const=True)
    



class OfferForPurchase(Offer):
    """An [[OfferForPurchase]] in Schema.org represents an [[Offer]] to sell something,"
     "i.e. an [[Offer]] whose [[businessFunction]] is [sell](http://purl.org/goodrelations/v1#Sell.)."
     "See [Good Relations](https://en.wikipedia.org/wiki/GoodRelations) for background"
     "on the underlying concepts.

    See: https://schema.org/OfferForPurchase
    Model depth: 4
    """
    type_: str = Field(default="OfferForPurchase", alias='@type', const=True)
    



class EntryPoint(Intangible):
    """An entry point, within some Web-based protocol.

    See: https://schema.org/EntryPoint
    Model depth: 3
    """
    type_: str = Field(default="EntryPoint", alias='@type', const=True)
    encodingType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The supported encoding type(s) for an EntryPoint request.",
    )
    actionApplication: Optional[Union[List[Union[SoftwareApplication, str]], SoftwareApplication, str]] = Field(
        default=None,
        description="An application that can complete the request.",
    )
    actionPlatform: Optional[Union[List[Union[AnyUrl, URL, str, Text, DigitalPlatformEnumeration]], AnyUrl, URL, str, Text, DigitalPlatformEnumeration]] = Field(
        default=None,
        description="The high level platform(s) where the Action can be performed for the given URL. To specify"
     "a specific application or operating system instance, use actionApplication.",
    )
    contentType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The supported content type(s) for an EntryPoint response.",
    )
    application: Optional[Union[List[Union[SoftwareApplication, str]], SoftwareApplication, str]] = Field(
        default=None,
        description="An application that can complete the request.",
    )
    httpMethod: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An HTTP method that specifies the appropriate HTTP method for a request to an HTTP EntryPoint."
     "Values are capitalized strings as used in HTTP.",
    )
    urlTemplate: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An url template (RFC6570) that will be used to construct the target of the execution of"
     "the action.",
    )
    



class OfficialLegalValue(LegalValueLevel):
    """All the documents published by an official publisher should have at least the legal value"
     "level \"OfficialLegalValue\". This indicates that the document was published by an"
     "organisation with the public task of making it available (e.g. a consolidated version"
     "of an EU directive published by the EU Office of Publications).

    See: https://schema.org/OfficialLegalValue
    Model depth: 5
    """
    type_: str = Field(default="OfficialLegalValue", alias='@type', const=True)
    



class HowItWorksHealthAspect(HealthAspectEnumeration):
    """Content that discusses and explains how a particular health-related topic works, e.g."
     "in terms of mechanisms and underlying science.

    See: https://schema.org/HowItWorksHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="HowItWorksHealthAspect", alias='@type', const=True)
    



class Table(WebPageElement):
    """A table on a Web page.

    See: https://schema.org/Table
    Model depth: 4
    """
    type_: str = Field(default="Table", alias='@type', const=True)
    



class EnrollingByInvitation(MedicalStudyStatus):
    """Enrolling participants by invitation only.

    See: https://schema.org/EnrollingByInvitation
    Model depth: 6
    """
    type_: str = Field(default="EnrollingByInvitation", alias='@type', const=True)
    



class MayTreatHealthAspect(HealthAspectEnumeration):
    """Related topics may be treated by a Topic.

    See: https://schema.org/MayTreatHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="MayTreatHealthAspect", alias='@type', const=True)
    



class OrderReturned(OrderStatus):
    """OrderStatus representing that an order has been returned.

    See: https://schema.org/OrderReturned
    Model depth: 6
    """
    type_: str = Field(default="OrderReturned", alias='@type', const=True)
    



class FoodEvent(Event):
    """Event type: Food event.

    See: https://schema.org/FoodEvent
    Model depth: 3
    """
    type_: str = Field(default="FoodEvent", alias='@type', const=True)
    



class CrossSectional(MedicalObservationalStudyDesign):
    """Studies carried out on pre-existing data (usually from 'snapshot' surveys), such as"
     "that collected by the Census Bureau. Sometimes called Prevalence Studies.

    See: https://schema.org/CrossSectional
    Model depth: 6
    """
    type_: str = Field(default="CrossSectional", alias='@type', const=True)
    



class AutoDealer(AutomotiveBusiness):
    """An car dealership.

    See: https://schema.org/AutoDealer
    Model depth: 5
    """
    type_: str = Field(default="AutoDealer", alias='@type', const=True)
    



class InsuranceAgency(FinancialService):
    """An Insurance agency.

    See: https://schema.org/InsuranceAgency
    Model depth: 5
    """
    type_: str = Field(default="InsuranceAgency", alias='@type', const=True)
    



class MusicRecording(CreativeWork):
    """A music recording (track), usually a single song.

    See: https://schema.org/MusicRecording
    Model depth: 3
    """
    type_: str = Field(default="MusicRecording", alias='@type', const=True)
    recordingOf: Optional[Union[List[Union[MusicComposition, str]], MusicComposition, str]] = Field(
        default=None,
        description="The composition this track is a recording of.",
    )
    byArtist: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The artist that performed this album or recording.",
    )
    inPlaylist: Optional[Union[List[Union[MusicPlaylist, str]], MusicPlaylist, str]] = Field(
        default=None,
        description="The playlist to which this recording belongs.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    isrcCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The International Standard Recording Code for the recording.",
    )
    inAlbum: Optional[Union[List[Union[MusicAlbum, str]], MusicAlbum, str]] = Field(
        default=None,
        description="The album to which this recording belongs.",
    )
    



class HalalDiet(RestrictedDiet):
    """A diet conforming to Islamic dietary practices.

    See: https://schema.org/HalalDiet
    Model depth: 5
    """
    type_: str = Field(default="HalalDiet", alias='@type', const=True)
    



class Time(DataType):
    """A point in time recurring on multiple days in the form hh:mm:ss[Z|(+|-)hh:mm] (see [XML"
     "schema for details](http://www.w3.org/TR/xmlschema-2/#time)).

    See: https://schema.org/Time
    Model depth: 5
    """
    type_: str = Field(default="Time", alias='@type', const=True)
    



class WearableSizeGroupBig(WearableSizeGroupEnumeration):
    """Size group \"Big\" for wearables.

    See: https://schema.org/WearableSizeGroupBig
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupBig", alias='@type', const=True)
    



class GatedResidenceCommunity(Residence):
    """Residence type: Gated community.

    See: https://schema.org/GatedResidenceCommunity
    Model depth: 4
    """
    type_: str = Field(default="GatedResidenceCommunity", alias='@type', const=True)
    



class Diagnostic(MedicalDevicePurpose):
    """A medical device used for diagnostic purposes.

    See: https://schema.org/Diagnostic
    Model depth: 6
    """
    type_: str = Field(default="Diagnostic", alias='@type', const=True)
    



class Courthouse(GovernmentBuilding):
    """A courthouse.

    See: https://schema.org/Courthouse
    Model depth: 5
    """
    type_: str = Field(default="Courthouse", alias='@type', const=True)
    



class ComedyClub(EntertainmentBusiness):
    """A comedy club.

    See: https://schema.org/ComedyClub
    Model depth: 5
    """
    type_: str = Field(default="ComedyClub", alias='@type', const=True)
    



class AerobicActivity(PhysicalActivityCategory):
    """Physical activity of relatively low intensity that depends primarily on the aerobic"
     "energy-generating process; during activity, the aerobic metabolism uses oxygen to"
     "adequately meet energy demands during exercise.

    See: https://schema.org/AerobicActivity
    Model depth: 5
    """
    type_: str = Field(default="AerobicActivity", alias='@type', const=True)
    



class SpreadsheetDigitalDocument(DigitalDocument):
    """A spreadsheet file.

    See: https://schema.org/SpreadsheetDigitalDocument
    Model depth: 4
    """
    type_: str = Field(default="SpreadsheetDigitalDocument", alias='@type', const=True)
    



class Locksmith(HomeAndConstructionBusiness):
    """A locksmith.

    See: https://schema.org/Locksmith
    Model depth: 5
    """
    type_: str = Field(default="Locksmith", alias='@type', const=True)
    



class Boolean(DataType):
    """Boolean: True or False.

    See: https://schema.org/Boolean
    Model depth: 5
    """
    type_: str = Field(default="Boolean", alias='@type', const=True)
    



class True_(Boolean):
    """The boolean value true.

    See: https://schema.org/True
    Model depth: 6
    """
    type_: str = Field(default="True", alias='@type', const=True)
    



class DietarySupplement(Substance, Product):
    """A product taken by mouth that contains a dietary ingredient intended to supplement the"
     "diet. Dietary ingredients may include vitamins, minerals, herbs or other botanicals,"
     "amino acids, and substances such as enzymes, organ tissues, glandulars and metabolites.

    See: https://schema.org/DietarySupplement
    Model depth: 3
    """
    type_: str = Field(default="DietarySupplement", alias='@type', const=True)
    activeIngredient: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="An active ingredient, typically chemical compounds and/or biologic substances.",
    )
    nonProprietaryName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The generic name of this drug or supplement.",
    )
    safetyConsideration: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any potential safety concern associated with the supplement. May include interactions"
     "with other drugs and foods, pregnancy, breastfeeding, known adverse reactions, and"
     "documented efficacy of the supplement.",
    )
    proprietaryName: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Proprietary name given to the diet plan, typically by its originator or creator.",
    )
    legalStatus: Optional[Union[List[Union[str, Text, MedicalEnumeration, DrugLegalStatus]], str, Text, MedicalEnumeration, DrugLegalStatus]] = Field(
        default=None,
        description="The drug or supplement's legal status, including any controlled substance schedules"
     "that apply.",
    )
    targetPopulation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Characteristics of the population for which this is intended, or which typically uses"
     "it, e.g. 'adults'.",
    )
    isProprietary: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="True if this item's name is a proprietary/brand name (vs. generic name).",
    )
    maximumIntake: Optional[Union[List[Union[MaximumDoseSchedule, str]], MaximumDoseSchedule, str]] = Field(
        default=None,
        description="Recommended intake of this supplement for a given population as defined by a specific"
     "recommending authority.",
    )
    recommendedIntake: Optional[Union[List[Union[RecommendedDoseSchedule, str]], RecommendedDoseSchedule, str]] = Field(
        default=None,
        description="Recommended intake of this supplement for a given population as defined by a specific"
     "recommending authority.",
    )
    mechanismOfAction: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The specific biochemical interaction through which this drug or supplement produces"
     "its pharmacological effect.",
    )
    



class WeaponConsideration(AdultOrientedEnumeration):
    """The item is intended to induce bodily harm, for example guns, mace, combat knives, brass"
     "knuckles, nail or other bombs, and spears.

    See: https://schema.org/WeaponConsideration
    Model depth: 5
    """
    type_: str = Field(default="WeaponConsideration", alias='@type', const=True)
    



class WearableSizeSystemUS(WearableSizeSystemEnumeration):
    """United States size system for wearables.

    See: https://schema.org/WearableSizeSystemUS
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemUS", alias='@type', const=True)
    



class Withdrawn(MedicalStudyStatus):
    """Withdrawn.

    See: https://schema.org/Withdrawn
    Model depth: 6
    """
    type_: str = Field(default="Withdrawn", alias='@type', const=True)
    



class OwnershipInfo(StructuredValue):
    """A structured value providing information about when a certain organization or person"
     "owned a certain product.

    See: https://schema.org/OwnershipInfo
    Model depth: 4
    """
    type_: str = Field(default="OwnershipInfo", alias='@type', const=True)
    ownedThrough: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date and time of giving up ownership on the product.",
    )
    ownedFrom: Optional[Union[List[Union[datetime, DateTime, str]], datetime, DateTime, str]] = Field(
        default=None,
        description="The date and time of obtaining the product.",
    )
    acquiredFrom: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The organization or person from which the product was acquired.",
    )
    typeOfGood: Optional[Union[List[Union[Product, Service, str]], Product, Service, str]] = Field(
        default=None,
        description="The product that this structured value is referring to.",
    )
    



class Completed(MedicalStudyStatus):
    """Completed.

    See: https://schema.org/Completed
    Model depth: 6
    """
    type_: str = Field(default="Completed", alias='@type', const=True)
    



class NoteDigitalDocument(DigitalDocument):
    """A file containing a note, primarily for the author.

    See: https://schema.org/NoteDigitalDocument
    Model depth: 4
    """
    type_: str = Field(default="NoteDigitalDocument", alias='@type', const=True)
    



class Float(Number):
    """Data type: Floating number.

    See: https://schema.org/Float
    Model depth: 6
    """
    type_: str = Field(default="Float", alias='@type', const=True)
    



class Consortium(Organization):
    """A Consortium is a membership [[Organization]] whose members are typically Organizations.

    See: https://schema.org/Consortium
    Model depth: 3
    """
    type_: str = Field(default="Consortium", alias='@type', const=True)
    



class PrescriptionOnly(DrugPrescriptionStatus):
    """Available by prescription only.

    See: https://schema.org/PrescriptionOnly
    Model depth: 6
    """
    type_: str = Field(default="PrescriptionOnly", alias='@type', const=True)
    



class GovernmentOrganization(Organization):
    """A governmental organization or agency.

    See: https://schema.org/GovernmentOrganization
    Model depth: 3
    """
    type_: str = Field(default="GovernmentOrganization", alias='@type', const=True)
    



class CurrencyConversionService(FinancialProduct):
    """A service to convert funds from one currency to another currency.

    See: https://schema.org/CurrencyConversionService
    Model depth: 5
    """
    type_: str = Field(default="CurrencyConversionService", alias='@type', const=True)
    



class UnincorporatedAssociationCharity(UKNonprofitType):
    """UnincorporatedAssociationCharity: Non-profit type referring to a charitable company"
     "that is not incorporated (UK).

    See: https://schema.org/UnincorporatedAssociationCharity
    Model depth: 6
    """
    type_: str = Field(default="UnincorporatedAssociationCharity", alias='@type', const=True)
    



class WearableSizeGroupGirls(WearableSizeGroupEnumeration):
    """Size group \"Girls\" for wearables.

    See: https://schema.org/WearableSizeGroupGirls
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupGirls", alias='@type', const=True)
    



class AssignAction(AllocateAction):
    """The act of allocating an action/event/task to some destination (someone or something).

    See: https://schema.org/AssignAction
    Model depth: 5
    """
    type_: str = Field(default="AssignAction", alias='@type', const=True)
    



class DigitalDocumentPermission(Intangible):
    """A permission for a particular person or group to access a particular file.

    See: https://schema.org/DigitalDocumentPermission
    Model depth: 3
    """
    type_: str = Field(default="DigitalDocumentPermission", alias='@type', const=True)
    grantee: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="The person, organization, contact point, or audience that has been granted this permission.",
    )
    permissionType: Optional[Union[List[Union[DigitalDocumentPermissionType, str]], DigitalDocumentPermissionType, str]] = Field(
        default=None,
        description="The type of permission granted the person, organization, or audience.",
    )
    



class BookmarkAction(OrganizeAction):
    """An agent bookmarks/flags/labels/tags/marks an object.

    See: https://schema.org/BookmarkAction
    Model depth: 4
    """
    type_: str = Field(default="BookmarkAction", alias='@type', const=True)
    



class BedDetails(Intangible):
    """An entity holding detailed information about the available bed types, e.g. the quantity"
     "of twin beds for a hotel room. For the single case of just one bed of a certain type, you can"
     "use bed directly with a text. See also [[BedType]] (under development).

    See: https://schema.org/BedDetails
    Model depth: 3
    """
    type_: str = Field(default="BedDetails", alias='@type', const=True)
    typeOfBed: Optional[Union[List[Union[str, Text, BedType]], str, Text, BedType]] = Field(
        default=None,
        description="The type of bed to which the BedDetail refers, i.e. the type of bed available in the quantity"
     "indicated by quantity.",
    )
    numberOfBeds: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The quantity of the given bed type available in the HotelRoom, Suite, House, or Apartment.",
    )
    



class ReturnLabelCustomerResponsibility(ReturnLabelSourceEnumeration):
    """Indicated that creating a return label is the responsibility of the customer.

    See: https://schema.org/ReturnLabelCustomerResponsibility
    Model depth: 5
    """
    type_: str = Field(default="ReturnLabelCustomerResponsibility", alias='@type', const=True)
    



class EventPostponed(EventStatusType):
    """The event has been postponed and no new date has been set. The event's previousStartDate"
     "should be set.

    See: https://schema.org/EventPostponed
    Model depth: 6
    """
    type_: str = Field(default="EventPostponed", alias='@type', const=True)
    



class Psychiatric(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that is concerned with the study, treatment, and"
     "prevention of mental illness, using both medical and psychological therapies.

    See: https://schema.org/Psychiatric
    Model depth: 5
    """
    type_: str = Field(default="Psychiatric", alias='@type', const=True)
    



class Muscle(AnatomicalStructure):
    """A muscle is an anatomical structure consisting of a contractile form of tissue that animals"
     "use to effect movement.

    See: https://schema.org/Muscle
    Model depth: 4
    """
    type_: str = Field(default="Muscle", alias='@type', const=True)
    nerve: Optional[Union[List[Union[Nerve, str]], Nerve, str]] = Field(
        default=None,
        description="The underlying innervation associated with the muscle.",
    )
    muscleAction: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The movement the muscle generates.",
    )
    bloodSupply: Optional[Union[List[Union[Vessel, str]], Vessel, str]] = Field(
        default=None,
        description="The blood vessel that carries blood from the heart to the muscle.",
    )
    antagonist: Optional[Union[List[Union[Muscle, str]], Muscle, str]] = Field(
        default=None,
        description="The muscle whose action counteracts the specified muscle.",
    )
    insertion: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="The place of attachment of a muscle, or what the muscle moves.",
    )
    



class Ultrasound(MedicalImagingTechnique):
    """Ultrasound imaging.

    See: https://schema.org/Ultrasound
    Model depth: 6
    """
    type_: str = Field(default="Ultrasound", alias='@type', const=True)
    



class BroadcastFrequencySpecification(Intangible):
    """The frequency in MHz and the modulation used for a particular BroadcastService.

    See: https://schema.org/BroadcastFrequencySpecification
    Model depth: 3
    """
    type_: str = Field(default="BroadcastFrequencySpecification", alias='@type', const=True)
    broadcastSignalModulation: Optional[Union[List[Union[str, Text, QualitativeValue]], str, Text, QualitativeValue]] = Field(
        default=None,
        description="The modulation (e.g. FM, AM, etc) used by a particular broadcast service.",
    )
    broadcastSubChannel: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The subchannel used for the broadcast.",
    )
    broadcastFrequencyValue: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="The frequency in MHz for a particular broadcast.",
    )
    



class TripleBlindedTrial(MedicalTrialDesign):
    """A trial design in which neither the researcher, the person administering the therapy"
     "nor the patient knows the details of the treatment the patient was randomly assigned"
     "to.

    See: https://schema.org/TripleBlindedTrial
    Model depth: 6
    """
    type_: str = Field(default="TripleBlindedTrial", alias='@type', const=True)
    



class AllergiesHealthAspect(HealthAspectEnumeration):
    """Content about the allergy-related aspects of a health topic.

    See: https://schema.org/AllergiesHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="AllergiesHealthAspect", alias='@type', const=True)
    



class OfflineTemporarily(GameServerStatus):
    """Game server status: OfflineTemporarily. Server is offline now but it can be online soon.

    See: https://schema.org/OfflineTemporarily
    Model depth: 6
    """
    type_: str = Field(default="OfflineTemporarily", alias='@type', const=True)
    



class Nose(PhysicalExam):
    """Nose function assessment with clinical examination.

    See: https://schema.org/Nose
    Model depth: 5
    """
    type_: str = Field(default="Nose", alias='@type', const=True)
    



class FundingAgency(Project):
    """A FundingAgency is an organization that implements one or more [[FundingScheme]]s"
     "and manages the granting process (via [[Grant]]s, typically [[MonetaryGrant]]s)."
     "A funding agency is not always required for grant funding, e.g. philanthropic giving,"
     "corporate sponsorship etc. Examples of funding agencies include ERC, REA, NIH, Bill"
     "and Melinda Gates Foundation, ...

    See: https://schema.org/FundingAgency
    Model depth: 4
    """
    type_: str = Field(default="FundingAgency", alias='@type', const=True)
    



class CourseInstance(Event):
    """An instance of a [[Course]] which is distinct from other instances because it is offered"
     "at a different time or location or through different media or modes of study or to a specific"
     "section of students.

    See: https://schema.org/CourseInstance
    Model depth: 3
    """
    type_: str = Field(default="CourseInstance", alias='@type', const=True)
    courseWorkload: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The amount of work expected of students taking the course, often provided as a figure"
     "per week or per month, and may be broken down by type. For example, \"2 hours of lectures,"
     "1 hour of lab work and 3 hours of independent study per week\".",
    )
    courseMode: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="The medium or means of delivery of the course instance or the mode of study, either as a"
     "text label (e.g. \"online\", \"onsite\" or \"blended\"; \"synchronous\" or \"asynchronous\";"
     "\"full-time\" or \"part-time\") or as a URL reference to a term from a controlled vocabulary"
     "(e.g. https://ceds.ed.gov/element/001311#Asynchronous).",
    )
    instructor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A person assigned to instruct or provide instructional assistance for the [[CourseInstance]].",
    )
    



class PlasticSurgery(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that pertains to therapeutic or cosmetic repair"
     "or re-formation of missing, injured or malformed tissues or body parts by manual and"
     "instrumental means.

    See: https://schema.org/PlasticSurgery
    Model depth: 5
    """
    type_: str = Field(default="PlasticSurgery", alias='@type', const=True)
    



class Dentistry(MedicalSpecialty):
    """A branch of medicine that is involved in the dental care.

    See: https://schema.org/Dentistry
    Model depth: 6
    """
    type_: str = Field(default="Dentistry", alias='@type', const=True)
    



class ExchangeRateSpecification(StructuredValue):
    """A structured value representing exchange rate.

    See: https://schema.org/ExchangeRateSpecification
    Model depth: 4
    """
    type_: str = Field(default="ExchangeRateSpecification", alias='@type', const=True)
    currency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217"
     "currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. \"USD\"; [Ticker"
     "symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,"
     "e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    currentExchangeRate: Optional[Union[List[Union[UnitPriceSpecification, str]], UnitPriceSpecification, str]] = Field(
        default=None,
        description="The current price of a currency.",
    )
    exchangeRateSpread: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The difference between the price at which a broker or other intermediary buys and sells"
     "foreign currency.",
    )
    



class SportsEvent(Event):
    """Event type: Sports event.

    See: https://schema.org/SportsEvent
    Model depth: 3
    """
    type_: str = Field(default="SportsEvent", alias='@type', const=True)
    competitor: Optional[Union[List[Union[SportsTeam, Person, str]], SportsTeam, Person, str]] = Field(
        default=None,
        description="A competitor in a sports event.",
    )
    awayTeam: Optional[Union[List[Union[SportsTeam, Person, str]], SportsTeam, Person, str]] = Field(
        default=None,
        description="The away team in a sports event.",
    )
    sport: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A type of sport (e.g. Baseball).",
    )
    homeTeam: Optional[Union[List[Union[SportsTeam, Person, str]], SportsTeam, Person, str]] = Field(
        default=None,
        description="The home team in a sports event.",
    )
    



class Nonprofit501c17(USNonprofitType):
    """Nonprofit501c17: Non-profit type referring to Supplemental Unemployment Benefit"
     "Trusts.

    See: https://schema.org/Nonprofit501c17
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c17", alias='@type', const=True)
    



class MedicalCause(MedicalEntity):
    """The causative agent(s) that are responsible for the pathophysiologic process that"
     "eventually results in a medical condition, symptom or sign. In this schema, unless otherwise"
     "specified this is meant to be the proximate cause of the medical condition, symptom or"
     "sign. The proximate cause is defined as the causative agent that most directly results"
     "in the medical condition, symptom or sign. For example, the HIV virus could be considered"
     "a cause of AIDS. Or in a diagnostic context, if a patient fell and sustained a hip fracture"
     "and two days later sustained a pulmonary embolism which eventuated in a cardiac arrest,"
     "the cause of the cardiac arrest (the proximate cause) would be the pulmonary embolism"
     "and not the fall. Medical causes can include cardiovascular, chemical, dermatologic,"
     "endocrine, environmental, gastroenterologic, genetic, hematologic, gynecologic,"
     "iatrogenic, infectious, musculoskeletal, neurologic, nutritional, obstetric,"
     "oncologic, otolaryngologic, pharmacologic, psychiatric, pulmonary, renal, rheumatologic,"
     "toxic, traumatic, or urologic causes; medical conditions can be causes as well.

    See: https://schema.org/MedicalCause
    Model depth: 3
    """
    type_: str = Field(default="MedicalCause", alias='@type', const=True)
    causeOf: Optional[Union[List[Union[MedicalEntity, str]], MedicalEntity, str]] = Field(
        default=None,
        description="The condition, complication, symptom, sign, etc. caused.",
    )
    



class HealthPlanFormulary(Intangible):
    """For a given health insurance plan, the specification for costs and coverage of prescription"
     "drugs.

    See: https://schema.org/HealthPlanFormulary
    Model depth: 3
    """
    type_: str = Field(default="HealthPlanFormulary", alias='@type', const=True)
    healthPlanCostSharing: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="The costs to the patient for services under this network or formulary.",
    )
    offersPrescriptionByMail: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Whether prescriptions can be delivered by mail.",
    )
    healthPlanDrugTier: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The tier(s) of drugs offered by this formulary or insurance plan.",
    )
    



class SpokenWordAlbum(MusicAlbumProductionType):
    """SpokenWordAlbum.

    See: https://schema.org/SpokenWordAlbum
    Model depth: 5
    """
    type_: str = Field(default="SpokenWordAlbum", alias='@type', const=True)
    



class FilmAction(CreateAction):
    """The act of capturing sound and moving images on film, video, or digitally.

    See: https://schema.org/FilmAction
    Model depth: 4
    """
    type_: str = Field(default="FilmAction", alias='@type', const=True)
    



class SelfStorage(LocalBusiness):
    """A self-storage facility.

    See: https://schema.org/SelfStorage
    Model depth: 4
    """
    type_: str = Field(default="SelfStorage", alias='@type', const=True)
    



class WPFooter(WebPageElement):
    """The footer section of the page.

    See: https://schema.org/WPFooter
    Model depth: 4
    """
    type_: str = Field(default="WPFooter", alias='@type', const=True)
    



class DesktopWebPlatform(DigitalPlatformEnumeration):
    """Represents the broad notion of 'desktop' browsers as a Web Platform.

    See: https://schema.org/DesktopWebPlatform
    Model depth: 5
    """
    type_: str = Field(default="DesktopWebPlatform", alias='@type', const=True)
    



class MulticellularParasite(InfectiousAgentClass):
    """Multicellular parasite that causes an infection.

    See: https://schema.org/MulticellularParasite
    Model depth: 6
    """
    type_: str = Field(default="MulticellularParasite", alias='@type', const=True)
    



class ViolenceConsideration(AdultOrientedEnumeration):
    """Item shows or promotes violence.

    See: https://schema.org/ViolenceConsideration
    Model depth: 5
    """
    type_: str = Field(default="ViolenceConsideration", alias='@type', const=True)
    



class BodyMeasurementChest(BodyMeasurementTypeEnumeration):
    """Maximum girth of chest. Used, for example, to fit men's suits.

    See: https://schema.org/BodyMeasurementChest
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementChest", alias='@type', const=True)
    



class DataFeedItem(Intangible):
    """A single item within a larger data feed.

    See: https://schema.org/DataFeedItem
    Model depth: 3
    """
    type_: str = Field(default="DataFeedItem", alias='@type', const=True)
    item: Optional[Union[List[Union[Thing, str]], Thing, str]] = Field(
        default=None,
        description="An entity represented by an entry in a list or data feed (e.g. an 'artist' in a list of 'artists').",
    )
    dateCreated: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date on which the CreativeWork was created or the item was added to a DataFeed.",
    )
    dateDeleted: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The datetime the item was removed from the DataFeed.",
    )
    dateModified: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date on which the CreativeWork was most recently modified or when the item's entry"
     "was modified within a DataFeed.",
    )
    



class Oncologic(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that deals with benign and malignant tumors, including"
     "the study of their development, diagnosis, treatment and prevention.

    See: https://schema.org/Oncologic
    Model depth: 5
    """
    type_: str = Field(default="Oncologic", alias='@type', const=True)
    



class CompoundPriceSpecification(PriceSpecification):
    """A compound price specification is one that bundles multiple prices that all apply in"
     "combination for different dimensions of consumption. Use the name property of the attached"
     "unit price specification for indicating the dimension of a price component (e.g. \"electricity\""
     "or \"final cleaning\").

    See: https://schema.org/CompoundPriceSpecification
    Model depth: 5
    """
    type_: str = Field(default="CompoundPriceSpecification", alias='@type', const=True)
    priceType: Optional[Union[List[Union[str, Text, PriceTypeEnumeration]], str, Text, PriceTypeEnumeration]] = Field(
        default=None,
        description="Defines the type of a price specified for an offered product, for example a list price,"
     "a (temporary) sale price or a manufacturer suggested retail price. If multiple prices"
     "are specified for an offer the [[priceType]] property can be used to identify the type"
     "of each such specified price. The value of priceType can be specified as a value from enumeration"
     "PriceTypeEnumeration or as a free form text string for price types that are not already"
     "predefined in PriceTypeEnumeration.",
    )
    priceComponent: Optional[Union[List[Union[UnitPriceSpecification, str]], UnitPriceSpecification, str]] = Field(
        default=None,
        description="This property links to all [[UnitPriceSpecification]] nodes that apply in parallel"
     "for the [[CompoundPriceSpecification]] node.",
    )
    



class AutoPartsStore(Store, AutomotiveBusiness):
    """An auto parts store.

    See: https://schema.org/AutoPartsStore
    Model depth: 5
    """
    type_: str = Field(default="AutoPartsStore", alias='@type', const=True)
    



class DatedMoneySpecification(StructuredValue):
    """A DatedMoneySpecification represents monetary values with optional start and end"
     "dates. For example, this could represent an employee's salary over a specific period"
     "of time. __Note:__ This type has been superseded by [[MonetaryAmount]], use of that"
     "type is recommended.

    See: https://schema.org/DatedMoneySpecification
    Model depth: 4
    """
    type_: str = Field(default="DatedMoneySpecification", alias='@type', const=True)
    currency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency in which the monetary amount is expressed. Use standard formats: [ISO 4217"
     "currency format](http://en.wikipedia.org/wiki/ISO_4217), e.g. \"USD\"; [Ticker"
     "symbol](https://en.wikipedia.org/wiki/List_of_cryptocurrencies) for cryptocurrencies,"
     "e.g. \"BTC\"; well known names for [Local Exchange Trading Systems](https://en.wikipedia.org/wiki/Local_exchange_trading_system)"
     "(LETS) and other currency types, e.g. \"Ithaca HOUR\".",
    )
    amount: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmount, str]] = Field(
        default=None,
        description="The amount of money.",
    )
    startDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The start date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    endDate: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The end date and time of the item (in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601)).",
    )
    



class Hospital(EmergencyService, MedicalOrganization, CivicStructure):
    """A hospital.

    See: https://schema.org/Hospital
    Model depth: 4
    """
    type_: str = Field(default="Hospital", alias='@type', const=True)
    healthcareReportingData: Optional[Union[List[Union[CDCPMDRecord, Dataset, str]], CDCPMDRecord, Dataset, str]] = Field(
        default=None,
        description="Indicates data describing a hospital, e.g. a CDC [[CDCPMDRecord]] or as some kind of"
     "[[Dataset]].",
    )
    medicalSpecialty: Optional[Union[List[Union[MedicalSpecialty, str]], MedicalSpecialty, str]] = Field(
        default=None,
        description="A medical specialty of the provider.",
    )
    availableService: Optional[Union[List[Union[MedicalTest, MedicalTherapy, MedicalProcedure, str]], MedicalTest, MedicalTherapy, MedicalProcedure, str]] = Field(
        default=None,
        description="A medical service available from this provider.",
    )
    



class EndorseAction(ReactAction):
    """An agent approves/certifies/likes/supports/sanctions an object.

    See: https://schema.org/EndorseAction
    Model depth: 5
    """
    type_: str = Field(default="EndorseAction", alias='@type', const=True)
    endorsee: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The person/organization being supported.",
    )
    



class RandomizedTrial(MedicalTrialDesign):
    """A randomized trial design.

    See: https://schema.org/RandomizedTrial
    Model depth: 6
    """
    type_: str = Field(default="RandomizedTrial", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryA2Plus(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class A++ as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryA2Plus
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryA2Plus", alias='@type', const=True)
    



class Renal(MedicalSpecialty):
    """A specific branch of medical science that pertains to the study of the kidneys and its"
     "respective disease states.

    See: https://schema.org/Renal
    Model depth: 6
    """
    type_: str = Field(default="Renal", alias='@type', const=True)
    



class BoatReservation(Reservation):
    """A reservation for boat travel. Note: This type is for information about actual reservations,"
     "e.g. in confirmation emails or HTML pages with individual confirmations of reservations."
     "For offers of tickets, use [[Offer]].

    See: https://schema.org/BoatReservation
    Model depth: 4
    """
    type_: str = Field(default="BoatReservation", alias='@type', const=True)
    



class SuperficialAnatomy(MedicalEntity):
    """Anatomical features that can be observed by sight (without dissection), including"
     "the form and proportions of the human body as well as surface landmarks that correspond"
     "to deeper subcutaneous structures. Superficial anatomy plays an important role in"
     "sports medicine, phlebotomy, and other medical specialties as underlying anatomical"
     "structures can be identified through surface palpation. For example, during back surgery,"
     "superficial anatomy can be used to palpate and count vertebrae to find the site of incision."
     "Or in phlebotomy, superficial anatomy can be used to locate an underlying vein; for example,"
     "the median cubital vein can be located by palpating the borders of the cubital fossa (such"
     "as the epicondyles of the humerus) and then looking for the superficial signs of the vein,"
     "such as size, prominence, ability to refill after depression, and feel of surrounding"
     "tissue support. As another example, in a subluxation (dislocation) of the glenohumeral"
     "joint, the bony structure becomes pronounced with the deltoid muscle failing to cover"
     "the glenohumeral joint allowing the edges of the scapula to be superficially visible."
     "Here, the superficial anatomy is the visible edges of the scapula, implying the underlying"
     "dislocation of the joint (the related anatomical structure).

    See: https://schema.org/SuperficialAnatomy
    Model depth: 3
    """
    type_: str = Field(default="SuperficialAnatomy", alias='@type', const=True)
    relatedAnatomy: Optional[Union[List[Union[AnatomicalStructure, AnatomicalSystem, str]], AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="Anatomical systems or structures that relate to the superficial anatomy.",
    )
    associatedPathophysiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If applicable, a description of the pathophysiology associated with the anatomical"
     "system, including potential abnormal changes in the mechanical, physical, and biochemical"
     "functions of the system.",
    )
    significance: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The significance associated with the superficial anatomy; as an example, how characteristics"
     "of the superficial anatomy can suggest underlying medical conditions or courses of"
     "treatment.",
    )
    relatedTherapy: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A medical therapy related to this anatomy.",
    )
    relatedCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="A medical condition associated with this anatomy.",
    )
    



class TheaterEvent(Event):
    """Event type: Theater performance.

    See: https://schema.org/TheaterEvent
    Model depth: 3
    """
    type_: str = Field(default="TheaterEvent", alias='@type', const=True)
    



class InStoreOnly(ItemAvailability):
    """Indicates that the item is available only at physical locations.

    See: https://schema.org/InStoreOnly
    Model depth: 5
    """
    type_: str = Field(default="InStoreOnly", alias='@type', const=True)
    



class ReadAction(ConsumeAction):
    """The act of consuming written content.

    See: https://schema.org/ReadAction
    Model depth: 4
    """
    type_: str = Field(default="ReadAction", alias='@type', const=True)
    



class Answer(Comment):
    """An answer offered to a question; perhaps correct, perhaps opinionated or wrong.

    See: https://schema.org/Answer
    Model depth: 4
    """
    type_: str = Field(default="Answer", alias='@type', const=True)
    answerExplanation: Optional[Union[List[Union[Comment, WebContent, str]], Comment, WebContent, str]] = Field(
        default=None,
        description="A step-by-step or full explanation about Answer. Can outline how this Answer was achieved"
     "or contain more broad clarification or statement about it.",
    )
    



class Registry(MedicalObservationalStudyDesign):
    """A registry-based study design.

    See: https://schema.org/Registry
    Model depth: 6
    """
    type_: str = Field(default="Registry", alias='@type', const=True)
    



class ActivationFee(PriceComponentTypeEnumeration):
    """Represents the activation fee part of the total price for an offered product, for example"
     "a cellphone contract.

    See: https://schema.org/ActivationFee
    Model depth: 5
    """
    type_: str = Field(default="ActivationFee", alias='@type', const=True)
    



class LaboratoryScience(MedicalSpecialty):
    """A medical science pertaining to chemical, hematological, immunologic, microscopic,"
     "or bacteriological diagnostic analyses or research.

    See: https://schema.org/LaboratoryScience
    Model depth: 6
    """
    type_: str = Field(default="LaboratoryScience", alias='@type', const=True)
    



class SafetyHealthAspect(HealthAspectEnumeration):
    """Content about the safety-related aspects of a health topic.

    See: https://schema.org/SafetyHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="SafetyHealthAspect", alias='@type', const=True)
    



class Map(CreativeWork):
    """A map.

    See: https://schema.org/Map
    Model depth: 3
    """
    type_: str = Field(default="Map", alias='@type', const=True)
    mapType: Optional[Union[List[Union[MapCategoryType, str]], MapCategoryType, str]] = Field(
        default=None,
        description="Indicates the kind of Map, from the MapCategoryType Enumeration.",
    )
    



class PostalAddress(ContactPoint):
    """The mailing address.

    See: https://schema.org/PostalAddress
    Model depth: 5
    """
    type_: str = Field(default="PostalAddress", alias='@type', const=True)
    addressLocality: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The locality in which the street address is, and which is in the region. For example, Mountain"
     "View.",
    )
    postOfficeBoxNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The post office box number for PO box addresses.",
    )
    streetAddress: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The street address. For example, 1600 Amphitheatre Pkwy.",
    )
    addressCountry: Optional[Union[List[Union[str, Text, Country]], str, Text, Country]] = Field(
        default=None,
        description="The country. For example, USA. You can also provide the two-letter [ISO 3166-1 alpha-2"
     "country code](http://en.wikipedia.org/wiki/ISO_3166-1).",
    )
    postalCode: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The postal code. For example, 94043.",
    )
    addressRegion: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The region in which the locality is, and which is in the country. For example, California"
     "or another appropriate first-level [Administrative division](https://en.wikipedia.org/wiki/List_of_administrative_divisions_by_country).",
    )
    



class JobPosting(Intangible):
    """A listing that describes a job opening in a certain organization.

    See: https://schema.org/JobPosting
    Model depth: 3
    """
    type_: str = Field(default="JobPosting", alias='@type', const=True)
    incentiveCompensation: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of bonus and commission compensation aspects of the job.",
    )
    securityClearanceRequirement: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="A description of any security clearance requirements of the job.",
    )
    hiringOrganization: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="Organization or Person offering the job position.",
    )
    baseSalary: Optional[Union[List[Union[StrictInt, StrictFloat, Number, PriceSpecification, MonetaryAmount, str]], StrictInt, StrictFloat, Number, PriceSpecification, MonetaryAmount, str]] = Field(
        default=None,
        description="The base salary of the job or of an employee in an EmployeeRole.",
    )
    workHours: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The typical working hours for this job (e.g. 1st shift, night shift, 8am-5pm).",
    )
    jobImmediateStart: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="An indicator as to whether a position is available for an immediate start.",
    )
    employerOverview: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the employer, career opportunities and work environment for this position.",
    )
    skills: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="A statement of knowledge, skill, ability, task or any other assertion expressing a competency"
     "that is desired or required to fulfill this role or to work in this occupation.",
    )
    physicalRequirement: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="A description of the types of physical activity associated with the job. Defined terms"
     "such as those in O*net may be used, but note that there is no way to specify the level of ability"
     "as well as its nature when using a defined term.",
    )
    experienceRequirements: Optional[Union[List[Union[str, Text, OccupationalExperienceRequirements]], str, Text, OccupationalExperienceRequirements]] = Field(
        default=None,
        description="Description of skills and experience needed for the position or Occupation.",
    )
    qualifications: Optional[Union[List[Union[str, Text, EducationalOccupationalCredential]], str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="Specific qualifications required for this role or Occupation.",
    )
    specialCommitments: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any special commitments associated with this job posting. Valid entries include VeteranCommit,"
     "MilitarySpouseCommit, etc.",
    )
    jobStartDate: Optional[Union[List[Union[date, Date, str, Text]], date, Date, str, Text]] = Field(
        default=None,
        description="The date on which a successful applicant for this job would be expected to start work."
     "Choose a specific date in the future or use the jobImmediateStart property to indicate"
     "the position is to be filled as soon as possible.",
    )
    title: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The title of the job.",
    )
    relevantOccupation: Optional[Union[List[Union[Occupation, str]], Occupation, str]] = Field(
        default=None,
        description="The Occupation for the JobPosting.",
    )
    jobLocation: Optional[Union[List[Union[Place, str]], Place, str]] = Field(
        default=None,
        description="A (typically single) geographic location associated with the job position.",
    )
    educationRequirements: Optional[Union[List[Union[str, Text, EducationalOccupationalCredential]], str, Text, EducationalOccupationalCredential]] = Field(
        default=None,
        description="Educational background needed for the position or Occupation.",
    )
    eligibilityToWorkRequirement: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The legal requirements such as citizenship, visa and other documentation required"
     "for an applicant to this job.",
    )
    estimatedSalary: Optional[Union[List[Union[StrictInt, StrictFloat, Number, MonetaryAmountDistribution, MonetaryAmount, str]], StrictInt, StrictFloat, Number, MonetaryAmountDistribution, MonetaryAmount, str]] = Field(
        default=None,
        description="An estimated salary for a job posting or occupation, based on a variety of variables including,"
     "but not limited to industry, job title, and location. Estimated salaries are often computed"
     "by outside organizations rather than the hiring organization, who may not have committed"
     "to the estimated value.",
    )
    validThrough: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="The date after when the item is not valid. For example the end of an offer, salary period,"
     "or a period of opening hours.",
    )
    sensoryRequirement: Optional[Union[List[Union[AnyUrl, URL, str, Text, DefinedTerm]], AnyUrl, URL, str, Text, DefinedTerm]] = Field(
        default=None,
        description="A description of any sensory requirements and levels necessary to function on the job,"
     "including hearing and vision. Defined terms such as those in O*net may be used, but note"
     "that there is no way to specify the level of ability as well as its nature when using a defined"
     "term.",
    )
    employmentType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Type of employment (e.g. full-time, part-time, contract, temporary, seasonal, internship).",
    )
    totalJobOpenings: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of positions open for this job posting. Use a positive integer. Do not use if"
     "the number of positions is unclear or not known.",
    )
    salaryCurrency: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The currency (coded using [ISO 4217](http://en.wikipedia.org/wiki/ISO_4217))"
     "used for the main salary information in this job posting or for this employee.",
    )
    applicationContact: Optional[Union[List[Union[ContactPoint, str]], ContactPoint, str]] = Field(
        default=None,
        description="Contact details for further information relevant to this job posting.",
    )
    experienceInPlaceOfEducation: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether a [[JobPosting]] will accept experience (as indicated by [[OccupationalExperienceRequirements]])"
     "in place of its formal educational qualifications (as indicated by [[educationRequirements]])."
     "If true, indicates that satisfying one of these requirements is sufficient.",
    )
    datePosted: Optional[Union[List[Union[datetime, DateTime, date, Date, str]], datetime, DateTime, date, Date, str]] = Field(
        default=None,
        description="Publication date of an online listing.",
    )
    jobBenefits: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of benefits associated with the job.",
    )
    applicantLocationRequirements: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The location(s) applicants can apply from. This is usually used for telecommuting jobs"
     "where the applicant does not need to be in a physical office. Note: This should not be used"
     "for citizenship or work visa requirements.",
    )
    occupationalCategory: Optional[Union[List[Union[str, Text, CategoryCode]], str, Text, CategoryCode]] = Field(
        default=None,
        description="A category describing the job, preferably using a term from a taxonomy such as [BLS O*NET-SOC](http://www.onetcenter.org/taxonomy.html),"
     "[ISCO-08](https://www.ilo.org/public/english/bureau/stat/isco/isco08/) or"
     "similar, with the property repeated for each applicable value. Ideally the taxonomy"
     "should be identified, and both the textual label and formal code for the category should"
     "be provided. Note: for historical reasons, any textual label and formal code provided"
     "as a literal may be assumed to be from O*NET-SOC.",
    )
    industry: Optional[Union[List[Union[str, Text, DefinedTerm]], str, Text, DefinedTerm]] = Field(
        default=None,
        description="The industry associated with the job position.",
    )
    employmentUnit: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="Indicates the department, unit and/or facility where the employee reports and/or in"
     "which the job is to be performed.",
    )
    benefits: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of benefits associated with the job.",
    )
    jobLocationType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="A description of the job location (e.g. TELECOMMUTE for telecommute jobs).",
    )
    responsibilities: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Responsibilities associated with this role or Occupation.",
    )
    directApply: Optional[Union[List[Union[StrictBool, Boolean, str]], StrictBool, Boolean, str]] = Field(
        default=None,
        description="Indicates whether an [[url]] that is associated with a [[JobPosting]] enables direct"
     "application for the job, via the posting website. A job posting is considered to have"
     "directApply of [[True]] if an application process for the specified job can be directly"
     "initiated via the url(s) given (noting that e.g. multiple internet domains might nevertheless"
     "be involved at an implementation level). A value of [[False]] is appropriate if there"
     "is no clear path to applying directly online for the specified job, navigating directly"
     "from the JobPosting url(s) supplied.",
    )
    incentives: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Description of bonus and commission compensation aspects of the job.",
    )
    



class DonateAction(TradeAction):
    """The act of providing goods, services, or money without compensation, often for philanthropic"
     "reasons.

    See: https://schema.org/DonateAction
    Model depth: 4
    """
    type_: str = Field(default="DonateAction", alias='@type', const=True)
    recipient: Optional[Union[List[Union[ContactPoint, Organization, Audience, Person, str]], ContactPoint, Organization, Audience, Person, str]] = Field(
        default=None,
        description="A sub property of participant. The participant who is at the receiving end of the action.",
    )
    



class GlutenFreeDiet(RestrictedDiet):
    """A diet exclusive of gluten.

    See: https://schema.org/GlutenFreeDiet
    Model depth: 5
    """
    type_: str = Field(default="GlutenFreeDiet", alias='@type', const=True)
    



class DrawAction(CreateAction):
    """The act of producing a visual/graphical representation of an object, typically with"
     "a pen/pencil and paper as instruments.

    See: https://schema.org/DrawAction
    Model depth: 4
    """
    type_: str = Field(default="DrawAction", alias='@type', const=True)
    



class OrderDelivered(OrderStatus):
    """OrderStatus representing successful delivery of an order.

    See: https://schema.org/OrderDelivered
    Model depth: 6
    """
    type_: str = Field(default="OrderDelivered", alias='@type', const=True)
    



class ExerciseGym(SportsActivityLocation):
    """A gym.

    See: https://schema.org/ExerciseGym
    Model depth: 5
    """
    type_: str = Field(default="ExerciseGym", alias='@type', const=True)
    



class ReturnInStore(ReturnMethodEnumeration):
    """Specifies that product returns must be made in a store.

    See: https://schema.org/ReturnInStore
    Model depth: 5
    """
    type_: str = Field(default="ReturnInStore", alias='@type', const=True)
    



class BenefitsHealthAspect(HealthAspectEnumeration):
    """Content about the benefits and advantages of usage or utilization of topic.

    See: https://schema.org/BenefitsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="BenefitsHealthAspect", alias='@type', const=True)
    



class Therapeutic(MedicalDevicePurpose):
    """A medical device used for therapeutic purposes.

    See: https://schema.org/Therapeutic
    Model depth: 6
    """
    type_: str = Field(default="Therapeutic", alias='@type', const=True)
    



class LegislativeBuilding(GovernmentBuilding):
    """A legislative building&#x2014;for example, the state capitol.

    See: https://schema.org/LegislativeBuilding
    Model depth: 5
    """
    type_: str = Field(default="LegislativeBuilding", alias='@type', const=True)
    



class DefinitiveLegalValue(LegalValueLevel):
    """Indicates a document for which the text is conclusively what the law says and is legally"
     "binding. (E.g. the digitally signed version of an Official Journal.) Something \"Definitive\""
     "is considered to be also [[AuthoritativeLegalValue]].

    See: https://schema.org/DefinitiveLegalValue
    Model depth: 5
    """
    type_: str = Field(default="DefinitiveLegalValue", alias='@type', const=True)
    



class ShoeStore(Store):
    """A shoe store.

    See: https://schema.org/ShoeStore
    Model depth: 5
    """
    type_: str = Field(default="ShoeStore", alias='@type', const=True)
    



class FurnitureStore(Store):
    """A furniture store.

    See: https://schema.org/FurnitureStore
    Model depth: 5
    """
    type_: str = Field(default="FurnitureStore", alias='@type', const=True)
    



class MusicVideoObject(MediaObject):
    """A music video file.

    See: https://schema.org/MusicVideoObject
    Model depth: 4
    """
    type_: str = Field(default="MusicVideoObject", alias='@type', const=True)
    



class DrugLegalStatus(MedicalIntangible):
    """The legal availability status of a medical drug.

    See: https://schema.org/DrugLegalStatus
    Model depth: 4
    """
    type_: str = Field(default="DrugLegalStatus", alias='@type', const=True)
    applicableLocation: Optional[Union[List[Union[AdministrativeArea, str]], AdministrativeArea, str]] = Field(
        default=None,
        description="The location in which the status applies.",
    )
    



class TireShop(Store):
    """A tire shop.

    See: https://schema.org/TireShop
    Model depth: 5
    """
    type_: str = Field(default="TireShop", alias='@type', const=True)
    



class Obstetric(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that specializes in the care of women during the"
     "prenatal and postnatal care and with the delivery of the child.

    See: https://schema.org/Obstetric
    Model depth: 5
    """
    type_: str = Field(default="Obstetric", alias='@type', const=True)
    



class Nonprofit501c13(USNonprofitType):
    """Nonprofit501c13: Non-profit type referring to Cemetery Companies.

    See: https://schema.org/Nonprofit501c13
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c13", alias='@type', const=True)
    



class Mountain(Landform):
    """A mountain, like Mount Whitney or Mount Everest.

    See: https://schema.org/Mountain
    Model depth: 4
    """
    type_: str = Field(default="Mountain", alias='@type', const=True)
    



class Pediatric(MedicalSpecialty, MedicalBusiness):
    """A specific branch of medical science that specializes in the care of infants, children"
     "and adolescents.

    See: https://schema.org/Pediatric
    Model depth: 5
    """
    type_: str = Field(default="Pediatric", alias='@type', const=True)
    



class Nonprofit501c14(USNonprofitType):
    """Nonprofit501c14: Non-profit type referring to State-Chartered Credit Unions, Mutual"
     "Reserve Funds.

    See: https://schema.org/Nonprofit501c14
    Model depth: 6
    """
    type_: str = Field(default="Nonprofit501c14", alias='@type', const=True)
    



class Corporation(Organization):
    """Organization: A business corporation.

    See: https://schema.org/Corporation
    Model depth: 3
    """
    type_: str = Field(default="Corporation", alias='@type', const=True)
    tickerSymbol: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The exchange traded instrument associated with a Corporation object. The tickerSymbol"
     "is expressed as an exchange and an instrument name separated by a space character. For"
     "the exchange component of the tickerSymbol attribute, we recommend using the controlled"
     "vocabulary of Market Identifier Codes (MIC) specified in ISO 15022.",
    )
    



class RsvpAction(InformAction):
    """The act of notifying an event organizer as to whether you expect to attend the event.

    See: https://schema.org/RsvpAction
    Model depth: 6
    """
    type_: str = Field(default="RsvpAction", alias='@type', const=True)
    additionalNumberOfGuests: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="If responding yes, the number of guests who will attend in addition to the invitee.",
    )
    comment: Optional[Union[List[Union[Comment, str]], Comment, str]] = Field(
        default=None,
        description="Comments, typically from users.",
    )
    rsvpResponse: Optional[Union[List[Union[RsvpResponseType, str]], RsvpResponseType, str]] = Field(
        default=None,
        description="The response (yes, no, maybe) to the RSVP.",
    )
    



class UserReview(Review):
    """A review created by an end-user (e.g. consumer, purchaser, attendee etc.), in contrast"
     "with [[CriticReview]].

    See: https://schema.org/UserReview
    Model depth: 4
    """
    type_: str = Field(default="UserReview", alias='@type', const=True)
    



class DateTime(DataType):
    """A combination of date and time of day in the form [-]CCYY-MM-DDThh:mm:ss[Z|(+|-)hh:mm]"
     "(see Chapter 5.4 of ISO 8601).

    See: https://schema.org/DateTime
    Model depth: 5
    """
    type_: str = Field(default="DateTime", alias='@type', const=True)
    



class PaymentAutomaticallyApplied(PaymentStatusType):
    """An automatic payment system is in place and will be used.

    See: https://schema.org/PaymentAutomaticallyApplied
    Model depth: 6
    """
    type_: str = Field(default="PaymentAutomaticallyApplied", alias='@type', const=True)
    



class Atlas(CreativeWork):
    """A collection or bound volume of maps, charts, plates or tables, physical or in media form"
     "illustrating any subject.

    See: https://schema.org/Atlas
    Model depth: 3
    """
    type_: str = Field(default="Atlas", alias='@type', const=True)
    



class PaintAction(CreateAction):
    """The act of producing a painting, typically with paint and canvas as instruments.

    See: https://schema.org/PaintAction
    Model depth: 4
    """
    type_: str = Field(default="PaintAction", alias='@type', const=True)
    



class OrderAction(TradeAction):
    """An agent orders an object/product/service to be delivered/sent.

    See: https://schema.org/OrderAction
    Model depth: 4
    """
    type_: str = Field(default="OrderAction", alias='@type', const=True)
    deliveryMethod: Optional[Union[List[Union[DeliveryMethod, str]], DeliveryMethod, str]] = Field(
        default=None,
        description="A sub property of instrument. The method of delivery.",
    )
    



class WearableSizeSystemDE(WearableSizeSystemEnumeration):
    """German size system for wearables.

    See: https://schema.org/WearableSizeSystemDE
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemDE", alias='@type', const=True)
    



class Newspaper(Periodical):
    """A publication containing information about varied topics that are pertinent to general"
     "information, a geographic area, or a specific subject matter (i.e. business, culture,"
     "education). Often published daily.

    See: https://schema.org/Newspaper
    Model depth: 5
    """
    type_: str = Field(default="Newspaper", alias='@type', const=True)
    



class RiverBodyOfWater(BodyOfWater):
    """A river (for example, the broad majestic Shannon).

    See: https://schema.org/RiverBodyOfWater
    Model depth: 5
    """
    type_: str = Field(default="RiverBodyOfWater", alias='@type', const=True)
    



class Question(Comment):
    """A specific question - e.g. from a user seeking answers online, or collected in a Frequently"
     "Asked Questions (FAQ) document.

    See: https://schema.org/Question
    Model depth: 4
    """
    type_: str = Field(default="Question", alias='@type', const=True)
    acceptedAnswer: Optional[Union[List[Union[Answer, ItemList, str]], Answer, ItemList, str]] = Field(
        default=None,
        description="The answer(s) that has been accepted as best, typically on a Question/Answer site. Sites"
     "vary in their selection mechanisms, e.g. drawing on community opinion and/or the view"
     "of the Question author.",
    )
    suggestedAnswer: Optional[Union[List[Union[Answer, ItemList, str]], Answer, ItemList, str]] = Field(
        default=None,
        description="An answer (possibly one of several, possibly incorrect) to a Question, e.g. on a Question/Answer"
     "site.",
    )
    answerCount: Optional[Union[List[Union[int, Integer, str]], int, Integer, str]] = Field(
        default=None,
        description="The number of answers this question has received.",
    )
    eduQuestionType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="For questions that are part of learning resources (e.g. Quiz), eduQuestionType indicates"
     "the format of question being given. Example: \"Multiple choice\", \"Open ended\","
     "\"Flashcard\".",
    )
    



class DiagnosticLab(MedicalOrganization):
    """A medical laboratory that offers on-site or off-site diagnostic services.

    See: https://schema.org/DiagnosticLab
    Model depth: 4
    """
    type_: str = Field(default="DiagnosticLab", alias='@type', const=True)
    availableTest: Optional[Union[List[Union[MedicalTest, str]], MedicalTest, str]] = Field(
        default=None,
        description="A diagnostic test or procedure offered by this lab.",
    )
    



class Paperback(BookFormatType):
    """Book format: Paperback.

    See: https://schema.org/Paperback
    Model depth: 5
    """
    type_: str = Field(default="Paperback", alias='@type', const=True)
    



class LowCalorieDiet(RestrictedDiet):
    """A diet focused on reduced calorie intake.

    See: https://schema.org/LowCalorieDiet
    Model depth: 5
    """
    type_: str = Field(default="LowCalorieDiet", alias='@type', const=True)
    



class CheckoutPage(WebPage):
    """Web page type: Checkout page.

    See: https://schema.org/CheckoutPage
    Model depth: 4
    """
    type_: str = Field(default="CheckoutPage", alias='@type', const=True)
    



class DemoAlbum(MusicAlbumProductionType):
    """DemoAlbum.

    See: https://schema.org/DemoAlbum
    Model depth: 5
    """
    type_: str = Field(default="DemoAlbum", alias='@type', const=True)
    



class NewsMediaOrganization(Organization):
    """A News/Media organization such as a newspaper or TV station.

    See: https://schema.org/NewsMediaOrganization
    Model depth: 3
    """
    type_: str = Field(default="NewsMediaOrganization", alias='@type', const=True)
    ownershipFundingInfo: Optional[Union[List[Union[AnyUrl, URL, str, Text, AboutPage, CreativeWork]], AnyUrl, URL, str, Text, AboutPage, CreativeWork]] = Field(
        default=None,
        description="For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]),"
     "a description of organizational ownership structure; funding and grants. In a news/media"
     "setting, this is with particular reference to editorial independence. Note that the"
     "[[funder]] is also available and can be used to make basic funder information machine-readable.",
    )
    missionCoveragePrioritiesPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For a [[NewsMediaOrganization]], a statement on coverage priorities, including any"
     "public agenda or stance on issues.",
    )
    actionableFeedbackPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement"
     "about public engagement activities (for news media, the newsroom’s), including involving"
     "the public - digitally or otherwise -- in coverage decisions, reporting and activities"
     "after publication.",
    )
    noBylinesPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For a [[NewsMediaOrganization]] or other news-related [[Organization]], a statement"
     "explaining when authors of articles are not named in bylines.",
    )
    masthead: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For a [[NewsMediaOrganization]], a link to the masthead page or a page listing top editorial"
     "management.",
    )
    diversityStaffingReport: Optional[Union[List[Union[AnyUrl, URL, Article, str]], AnyUrl, URL, Article, str]] = Field(
        default=None,
        description="For an [[Organization]] (often but not necessarily a [[NewsMediaOrganization]]),"
     "a report on staffing diversity issues. In a news context this might be for example ASNE"
     "or RTDNA (US) reports, or self-reported.",
    )
    unnamedSourcesPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For an [[Organization]] (typically a [[NewsMediaOrganization]]), a statement about"
     "policy on use of unnamed sources and the decision process required.",
    )
    diversityPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Statement on diversity policy by an [[Organization]] e.g. a [[NewsMediaOrganization]]."
     "For a [[NewsMediaOrganization]], a statement describing the newsroom’s diversity"
     "policy on both staffing and sources, typically providing staffing data.",
    )
    verificationFactCheckingPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Disclosure about verification and fact-checking processes for a [[NewsMediaOrganization]]"
     "or other fact-checking [[Organization]].",
    )
    ethicsPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="Statement about ethics policy, e.g. of a [[NewsMediaOrganization]] regarding journalistic"
     "and publishing practices, or of a [[Restaurant]], a page describing food source policies."
     "In the case of a [[NewsMediaOrganization]], an ethicsPolicy is typically a statement"
     "describing the personal, organizational, and corporate standards of behavior expected"
     "by the organization.",
    )
    correctionsPolicy: Optional[Union[List[Union[AnyUrl, URL, CreativeWork, str]], AnyUrl, URL, CreativeWork, str]] = Field(
        default=None,
        description="For an [[Organization]] (e.g. [[NewsMediaOrganization]]), a statement describing"
     "(in news media, the newsroom’s) disclosure and correction policy for errors.",
    )
    



class DefenceEstablishment(GovernmentBuilding):
    """A defence establishment, such as an army or navy base.

    See: https://schema.org/DefenceEstablishment
    Model depth: 5
    """
    type_: str = Field(default="DefenceEstablishment", alias='@type', const=True)
    



class MedicalGuidelineRecommendation(MedicalGuideline):
    """A guideline recommendation that is regarded as efficacious and where quality of the"
     "data supporting the recommendation is sound.

    See: https://schema.org/MedicalGuidelineRecommendation
    Model depth: 4
    """
    type_: str = Field(default="MedicalGuidelineRecommendation", alias='@type', const=True)
    recommendationStrength: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Strength of the guideline's recommendation (e.g. 'class I').",
    )
    



class HotelRoom(Room):
    """A hotel room is a single room in a hotel. <br /><br /> See also the <a href=\"/docs/hotels.html\">dedicated"
     "document on the use of schema.org for marking up hotels and other forms of accommodations</a>.

    See: https://schema.org/HotelRoom
    Model depth: 5
    """
    type_: str = Field(default="HotelRoom", alias='@type', const=True)
    bed: Optional[Union[List[Union[str, Text, BedType, BedDetails]], str, Text, BedType, BedDetails]] = Field(
        default=None,
        description="The type of bed or beds included in the accommodation. For the single case of just one bed"
     "of a certain type, you use bed directly with a text. If you want to indicate the quantity"
     "of a certain kind of bed, use an instance of BedDetails. For more detailed information,"
     "use the amenityFeature property.",
    )
    occupancy: Optional[Union[List[Union[QuantitativeValue, str]], QuantitativeValue, str]] = Field(
        default=None,
        description="The allowed total occupancy for the accommodation in persons (including infants etc)."
     "For individual accommodations, this is not necessarily the legal maximum but defines"
     "the permitted usage as per the contractual agreement (e.g. a double room used by a single"
     "person). Typical unit code(s): C62 for person",
    )
    



class Infectious(MedicalSpecialty):
    """Something in medical science that pertains to infectious diseases, i.e. caused by bacterial,"
     "viral, fungal or parasitic infections.

    See: https://schema.org/Infectious
    Model depth: 6
    """
    type_: str = Field(default="Infectious", alias='@type', const=True)
    



class WearableSizeGroupShort(WearableSizeGroupEnumeration):
    """Size group \"Short\" for wearables.

    See: https://schema.org/WearableSizeGroupShort
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeGroupShort", alias='@type', const=True)
    



class School(EducationalOrganization):
    """A school.

    See: https://schema.org/School
    Model depth: 4
    """
    type_: str = Field(default="School", alias='@type', const=True)
    



class AnalysisNewsArticle(NewsArticle):
    """An AnalysisNewsArticle is a [[NewsArticle]] that, while based on factual reporting,"
     "incorporates the expertise of the author/producer, offering interpretations and"
     "conclusions.

    See: https://schema.org/AnalysisNewsArticle
    Model depth: 5
    """
    type_: str = Field(default="AnalysisNewsArticle", alias='@type', const=True)
    



class Installment(PriceComponentTypeEnumeration):
    """Represents the installment pricing component of the total price for an offered product.

    See: https://schema.org/Installment
    Model depth: 5
    """
    type_: str = Field(default="Installment", alias='@type', const=True)
    



class AnatomicalSystem(MedicalEntity):
    """An anatomical system is a group of anatomical structures that work together to perform"
     "a certain task. Anatomical systems, such as organ systems, are one organizing principle"
     "of anatomy, and can include circulatory, digestive, endocrine, integumentary, immune,"
     "lymphatic, muscular, nervous, reproductive, respiratory, skeletal, urinary, vestibular,"
     "and other systems.

    See: https://schema.org/AnatomicalSystem
    Model depth: 3
    """
    type_: str = Field(default="AnatomicalSystem", alias='@type', const=True)
    associatedPathophysiology: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="If applicable, a description of the pathophysiology associated with the anatomical"
     "system, including potential abnormal changes in the mechanical, physical, and biochemical"
     "functions of the system.",
    )
    relatedTherapy: Optional[Union[List[Union[MedicalTherapy, str]], MedicalTherapy, str]] = Field(
        default=None,
        description="A medical therapy related to this anatomy.",
    )
    comprisedOf: Optional[Union[List[Union[AnatomicalStructure, AnatomicalSystem, str]], AnatomicalStructure, AnatomicalSystem, str]] = Field(
        default=None,
        description="Specifying something physically contained by something else. Typically used here"
     "for the underlying anatomical structures, such as organs, that comprise the anatomical"
     "system.",
    )
    relatedStructure: Optional[Union[List[Union[AnatomicalStructure, str]], AnatomicalStructure, str]] = Field(
        default=None,
        description="Related anatomical structure(s) that are not part of the system but relate or connect"
     "to it, such as vascular bundles associated with an organ system.",
    )
    relatedCondition: Optional[Union[List[Union[MedicalCondition, str]], MedicalCondition, str]] = Field(
        default=None,
        description="A medical condition associated with this anatomy.",
    )
    



class MediaReview(Review):
    """A [[MediaReview]] is a more specialized form of Review dedicated to the evaluation of"
     "media content online, typically in the context of fact-checking and misinformation."
     "For more general reviews of media in the broader sense, use [[UserReview]], [[CriticReview]]"
     "or other [[Review]] types. This definition is a work in progress. While the [[MediaManipulationRatingEnumeration]]"
     "list reflects significant community review amongst fact-checkers and others working"
     "to combat misinformation, the specific structures for representing media objects,"
     "their versions and publication context, are still evolving. Similarly, best practices"
     "for the relationship between [[MediaReview]] and [[ClaimReview]] markup have not"
     "yet been finalized.

    See: https://schema.org/MediaReview
    Model depth: 4
    """
    type_: str = Field(default="MediaReview", alias='@type', const=True)
    originalMediaLink: Optional[Union[List[Union[AnyUrl, URL, MediaObject, WebPage, str]], AnyUrl, URL, MediaObject, WebPage, str]] = Field(
        default=None,
        description="Link to the page containing an original version of the content, or directly to an online"
     "copy of the original [[MediaObject]] content, e.g. video file.",
    )
    originalMediaContextDescription: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Describes, in a [[MediaReview]] when dealing with [[DecontextualizedContent]],"
     "background information that can contribute to better interpretation of the [[MediaObject]].",
    )
    mediaAuthenticityCategory: Optional[Union[List[Union[MediaManipulationRatingEnumeration, str]], MediaManipulationRatingEnumeration, str]] = Field(
        default=None,
        description="Indicates a MediaManipulationRatingEnumeration classification of a media object"
     "(in the context of how it was published or shared).",
    )
    



class ExercisePlan(PhysicalActivity, CreativeWork):
    """Fitness-related activity designed for a specific health-related purpose, including"
     "defined exercise routines as well as activity prescribed by a clinician.

    See: https://schema.org/ExercisePlan
    Model depth: 3
    """
    type_: str = Field(default="ExercisePlan", alias='@type', const=True)
    additionalVariable: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Any additional component of the exercise prescription that may need to be articulated"
     "to the patient. This may include the order of exercises, the number of repetitions of"
     "movement, quantitative distance, progressions over time, etc.",
    )
    activityFrequency: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="How often one should engage in the activity.",
    )
    repetitions: Optional[Union[List[Union[StrictInt, StrictFloat, Number, QuantitativeValue, str]], StrictInt, StrictFloat, Number, QuantitativeValue, str]] = Field(
        default=None,
        description="Number of times one should repeat the activity.",
    )
    intensity: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="Quantitative measure gauging the degree of force involved in the exercise, for example,"
     "heartbeats per minute. May include the velocity of the movement.",
    )
    activityDuration: Optional[Union[List[Union[Duration, QuantitativeValue, str]], Duration, QuantitativeValue, str]] = Field(
        default=None,
        description="Length of time to engage in the activity.",
    )
    exerciseType: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="Type(s) of exercise or activity, such as strength training, flexibility training,"
     "aerobics, cardiac rehabilitation, etc.",
    )
    workload: Optional[Union[List[Union[QuantitativeValue, Energy, str]], QuantitativeValue, Energy, str]] = Field(
        default=None,
        description="Quantitative measure of the physiologic output of the exercise; also referred to as"
     "energy expenditure.",
    )
    restPeriods: Optional[Union[List[Union[str, Text, QuantitativeValue]], str, Text, QuantitativeValue]] = Field(
        default=None,
        description="How often one should break from the activity.",
    )
    



class LowLactoseDiet(RestrictedDiet):
    """A diet appropriate for people with lactose intolerance.

    See: https://schema.org/LowLactoseDiet
    Model depth: 5
    """
    type_: str = Field(default="LowLactoseDiet", alias='@type', const=True)
    



class Quotation(CreativeWork):
    """A quotation. Often but not necessarily from some written work, attributable to a real"
     "world author and - if associated with a fictional character - to any fictional Person."
     "Use [[isBasedOn]] to link to source/origin. The [[recordedIn]] property can be used"
     "to reference a Quotation from an [[Event]].

    See: https://schema.org/Quotation
    Model depth: 3
    """
    type_: str = Field(default="Quotation", alias='@type', const=True)
    spokenByCharacter: Optional[Union[List[Union[Organization, Person, str]], Organization, Person, str]] = Field(
        default=None,
        description="The (e.g. fictional) character, Person or Organization to whom the quotation is attributed"
     "within the containing CreativeWork.",
    )
    



class DisagreeAction(ReactAction):
    """The act of expressing a difference of opinion with the object. An agent disagrees to/about"
     "an object (a proposition, topic or theme) with participants.

    See: https://schema.org/DisagreeAction
    Model depth: 5
    """
    type_: str = Field(default="DisagreeAction", alias='@type', const=True)
    



class OnlineOnly(ItemAvailability):
    """Indicates that the item is available only online.

    See: https://schema.org/OnlineOnly
    Model depth: 5
    """
    type_: str = Field(default="OnlineOnly", alias='@type', const=True)
    



class WearableSizeSystemUK(WearableSizeSystemEnumeration):
    """United Kingdom size system for wearables.

    See: https://schema.org/WearableSizeSystemUK
    Model depth: 6
    """
    type_: str = Field(default="WearableSizeSystemUK", alias='@type', const=True)
    



class ReturnLabelDownloadAndPrint(ReturnLabelSourceEnumeration):
    """Indicated that a return label must be downloaded and printed by the customer.

    See: https://schema.org/ReturnLabelDownloadAndPrint
    Model depth: 5
    """
    type_: str = Field(default="ReturnLabelDownloadAndPrint", alias='@type', const=True)
    



class Wholesale(DrugCostCategory):
    """The drug's cost represents the wholesale acquisition cost of the drug.

    See: https://schema.org/Wholesale
    Model depth: 6
    """
    type_: str = Field(default="Wholesale", alias='@type', const=True)
    



class ItemPage(WebPage):
    """A page devoted to a single item, such as a particular product or hotel.

    See: https://schema.org/ItemPage
    Model depth: 4
    """
    type_: str = Field(default="ItemPage", alias='@type', const=True)
    



class EUEnergyEfficiencyCategoryA1Plus(EUEnergyEfficiencyEnumeration):
    """Represents EU Energy Efficiency Class A+ as defined in EU energy labeling regulations.

    See: https://schema.org/EUEnergyEfficiencyCategoryA1Plus
    Model depth: 6
    """
    type_: str = Field(default="EUEnergyEfficiencyCategoryA1Plus", alias='@type', const=True)
    



class Reservoir(BodyOfWater):
    """A reservoir of water, typically an artificially created lake, like the Lake Kariba reservoir.

    See: https://schema.org/Reservoir
    Model depth: 5
    """
    type_: str = Field(default="Reservoir", alias='@type', const=True)
    



class EBook(BookFormatType):
    """Book format: Ebook.

    See: https://schema.org/EBook
    Model depth: 5
    """
    type_: str = Field(default="EBook", alias='@type', const=True)
    



class SelfCareHealthAspect(HealthAspectEnumeration):
    """Self care actions or measures that can be taken to sooth, health or avoid a topic. This"
     "may be carried at home and can be carried/managed by the person itself.

    See: https://schema.org/SelfCareHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="SelfCareHealthAspect", alias='@type', const=True)
    



class RisksOrComplicationsHealthAspect(HealthAspectEnumeration):
    """Information about the risk factors and possible complications that may follow a topic.

    See: https://schema.org/RisksOrComplicationsHealthAspect
    Model depth: 5
    """
    type_: str = Field(default="RisksOrComplicationsHealthAspect", alias='@type', const=True)
    



class Movie(CreativeWork):
    """A movie.

    See: https://schema.org/Movie
    Model depth: 3
    """
    type_: str = Field(default="Movie", alias='@type', const=True)
    actors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc. Actors can be associated with individual"
     "items or with a series, episode, clip.",
    )
    actor: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="An actor, e.g. in TV, radio, movie, video games etc., or in an event. Actors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    titleEIDR: Optional[Union[List[Union[AnyUrl, URL, str, Text]], AnyUrl, URL, str, Text]] = Field(
        default=None,
        description="An [EIDR](https://eidr.org/) (Entertainment Identifier Registry) [[identifier]]"
     "representing at the most general/abstract level, a work of film or television. For example,"
     "the motion picture known as \"Ghostbusters\" has a titleEIDR of \"10.5240/7EC7-228A-510A-053E-CBB8-J\"."
     "This title (or work) may have several variants, which EIDR calls \"edits\". See [[editEIDR]]."
     "Since schema.org types like [[Movie]] and [[TVEpisode]] can be used for both works and"
     "their multiple expressions, it is possible to use [[titleEIDR]] alone (for a general"
     "description), or alongside [[editEIDR]] for a more edit-specific description.",
    )
    subtitleLanguage: Optional[Union[List[Union[str, Text, Language]], str, Text, Language]] = Field(
        default=None,
        description="Languages in which subtitles/captions are available, in [IETF BCP 47 standard format](http://tools.ietf.org/html/bcp47).",
    )
    trailer: Optional[Union[List[Union[VideoObject, str]], VideoObject, str]] = Field(
        default=None,
        description="The trailer of a movie or TV/radio series, season, episode, etc.",
    )
    duration: Optional[Union[List[Union[Duration, str]], Duration, str]] = Field(
        default=None,
        description="The duration of the item (movie, audio recording, event, etc.) in [ISO 8601 date format](http://en.wikipedia.org/wiki/ISO_8601).",
    )
    productionCompany: Optional[Union[List[Union[Organization, str]], Organization, str]] = Field(
        default=None,
        description="The production company or studio responsible for the item, e.g. series, video game,"
     "episode etc.",
    )
    countryOfOrigin: Optional[Union[List[Union[Country, str]], Country, str]] = Field(
        default=None,
        description="The country of origin of something, including products as well as creative works such"
     "as movie and TV content. In the case of TV and movie, this would be the country of the principle"
     "offices of the production company or individual responsible for the movie. For other"
     "kinds of [[CreativeWork]] it is difficult to provide fully general guidance, and properties"
     "such as [[contentLocation]] and [[locationCreated]] may be more applicable. In the"
     "case of products, the country of origin of the product. The exact interpretation of this"
     "may vary by context and product type, and cannot be fully enumerated here.",
    )
    director: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video gaming etc. content, or of an event. Directors"
     "can be associated with individual items or with a series, episode, clip.",
    )
    directors: Optional[Union[List[Union[Person, str]], Person, str]] = Field(
        default=None,
        description="A director of e.g. TV, radio, movie, video games etc. content. Directors can be associated"
     "with individual items or with a series, episode, clip.",
    )
    musicBy: Optional[Union[List[Union[MusicGroup, Person, str]], MusicGroup, Person, str]] = Field(
        default=None,
        description="The composer of the soundtrack.",
    )
    



class False_(Boolean):
    """The boolean value false.

    See: https://schema.org/False
    Model depth: 6
    """
    type_: str = Field(default="False", alias='@type', const=True)
    



class OfflineEventAttendanceMode(EventAttendanceModeEnumeration):
    """OfflineEventAttendanceMode - an event that is primarily conducted offline.

    See: https://schema.org/OfflineEventAttendanceMode
    Model depth: 5
    """
    type_: str = Field(default="OfflineEventAttendanceMode", alias='@type', const=True)
    



class Integer(Number):
    """Data type: Integer.

    See: https://schema.org/Integer
    Model depth: 6
    """
    type_: str = Field(default="Integer", alias='@type', const=True)
    



class OrderItem(Intangible):
    """An order item is a line of an order. It includes the quantity and shipping details of a bought"
     "offer.

    See: https://schema.org/OrderItem
    Model depth: 3
    """
    type_: str = Field(default="OrderItem", alias='@type', const=True)
    orderItemStatus: Optional[Union[List[Union[OrderStatus, str]], OrderStatus, str]] = Field(
        default=None,
        description="The current status of the order item.",
    )
    orderQuantity: Optional[Union[List[Union[StrictInt, StrictFloat, Number, str]], StrictInt, StrictFloat, Number, str]] = Field(
        default=None,
        description="The number of the item ordered. If the property is not set, assume the quantity is one.",
    )
    orderDelivery: Optional[Union[List[Union[ParcelDelivery, str]], ParcelDelivery, str]] = Field(
        default=None,
        description="The delivery of the parcel related to this order or order item.",
    )
    orderedItem: Optional[Union[List[Union[OrderItem, Product, Service, str]], OrderItem, Product, Service, str]] = Field(
        default=None,
        description="The item ordered.",
    )
    orderItemNumber: Optional[Union[List[Union[str, Text]], str, Text]] = Field(
        default=None,
        description="The identifier of the order item.",
    )
    



class CaseSeries(MedicalObservationalStudyDesign):
    """A case series (also known as a clinical series) is a medical research study that tracks"
     "patients with a known exposure given similar treatment or examines their medical records"
     "for exposure and outcome. A case series can be retrospective or prospective and usually"
     "involves a smaller number of patients than the more powerful case-control studies or"
     "randomized controlled trials. Case series may be consecutive or non-consecutive,"
     "depending on whether all cases presenting to the reporting authors over a period of time"
     "were included, or only a selection.

    See: https://schema.org/CaseSeries
    Model depth: 6
    """
    type_: str = Field(default="CaseSeries", alias='@type', const=True)
    



class Preschool(EducationalOrganization):
    """A preschool.

    See: https://schema.org/Preschool
    Model depth: 4
    """
    type_: str = Field(default="Preschool", alias='@type', const=True)
    



class BodyMeasurementWaist(BodyMeasurementTypeEnumeration):
    """Girth of natural waistline (between hip bones and lower ribs). Used, for example, to"
     "fit pants.

    See: https://schema.org/BodyMeasurementWaist
    Model depth: 6
    """
    type_: str = Field(default="BodyMeasurementWaist", alias='@type', const=True)
    



class NotYetRecruiting(MedicalStudyStatus):
    """Not yet recruiting.

    See: https://schema.org/NotYetRecruiting
    Model depth: 6
    """
    type_: str = Field(default="NotYetRecruiting", alias='@type', const=True)
    

